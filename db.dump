banking: database
    + schemas
        information_schema: schema
            + object-types
                cardinal_number: domain (numeric) of integer baseType: int4
                    + checks
                        cardinal_number_domain_check: check VALUE >= 0
                character_data: domain (string) of varchar baseType: varchar
                sql_identifier: domain (string) of name baseType: name
                time_stamp: domain (date time) of timestamp(2) with time zone default CURRENT_TIMESTAMP(2) baseType: timestamptz
                yes_or_no: domain (string) of varchar(3) baseType: varchar
                    + checks
                        yes_or_no_check: check (VALUE)::text = ANY ((ARRAY['YES'::character varying, 'NO'::character varying])::text[])
            + tables
                sql_features: table
                    + columns
                        feature_id: information_schema.character_data
                        feature_name: information_schema.character_data
                        sub_feature_id: information_schema.character_data
                        sub_feature_name: information_schema.character_data
                        is_supported: information_schema.yes_or_no
                        is_verified_by: information_schema.character_data
                        comments: information_schema.character_data
                sql_implementation_info: table
                    + columns
                        implementation_info_id: information_schema.character_data
                        implementation_info_name: information_schema.character_data
                        integer_value: information_schema.cardinal_number
                        character_value: information_schema.character_data
                        comments: information_schema.character_data
                sql_languages: table
                    + columns
                        sql_language_source: information_schema.character_data
                        sql_language_year: information_schema.character_data
                        sql_language_conformance: information_schema.character_data
                        sql_language_integrity: information_schema.character_data
                        sql_language_implementation: information_schema.character_data
                        sql_language_binding_style: information_schema.character_data
                        sql_language_programming_language: information_schema.character_data
                sql_packages: table
                    + columns
                        feature_id: information_schema.character_data
                        feature_name: information_schema.character_data
                        is_supported: information_schema.yes_or_no
                        is_verified_by: information_schema.character_data
                        comments: information_schema.character_data
                sql_parts: table
                    + columns
                        feature_id: information_schema.character_data
                        feature_name: information_schema.character_data
                        is_supported: information_schema.yes_or_no
                        is_verified_by: information_schema.character_data
                        comments: information_schema.character_data
                sql_sizing: table
                    + columns
                        sizing_id: information_schema.cardinal_number
                        sizing_name: information_schema.character_data
                        supported_value: information_schema.cardinal_number
                        comments: information_schema.character_data
                sql_sizing_profiles: table
                    + columns
                        sizing_id: information_schema.cardinal_number
                        sizing_name: information_schema.character_data
                        profile_id: information_schema.character_data
                        required_value: information_schema.cardinal_number
                        comments: information_schema.character_data
            + views
                _pg_foreign_data_wrappers: view
                    + columns
                        oid: oid
                        fdwowner: oid
                        fdwoptions: text[]
                        foreign_data_wrapper_catalog: information_schema.sql_identifier
                        foreign_data_wrapper_name: information_schema.sql_identifier
                        authorization_identifier: information_schema.sql_identifier
                        foreign_data_wrapper_language: information_schema.character_data
                _pg_foreign_servers: view
                    + columns
                        oid: oid
                        srvoptions: text[]
                        foreign_server_catalog: information_schema.sql_identifier
                        foreign_server_name: information_schema.sql_identifier
                        foreign_data_wrapper_catalog: information_schema.sql_identifier
                        foreign_data_wrapper_name: information_schema.sql_identifier
                        foreign_server_type: information_schema.character_data
                        foreign_server_version: information_schema.character_data
                        authorization_identifier: information_schema.sql_identifier
                _pg_foreign_table_columns: view
                    + columns
                        nspname: name
                        relname: name
                        attname: name
                        attfdwoptions: text[]
                _pg_foreign_tables: view
                    + columns
                        foreign_table_catalog: information_schema.sql_identifier
                        foreign_table_schema: information_schema.sql_identifier
                        foreign_table_name: information_schema.sql_identifier
                        ftoptions: text[]
                        foreign_server_catalog: information_schema.sql_identifier
                        foreign_server_name: information_schema.sql_identifier
                        authorization_identifier: information_schema.sql_identifier
                _pg_user_mappings: view
                    + columns
                        oid: oid
                        umoptions: text[]
                        umuser: oid
                        authorization_identifier: information_schema.sql_identifier
                        foreign_server_catalog: information_schema.sql_identifier
                        foreign_server_name: information_schema.sql_identifier
                        srvowner: information_schema.sql_identifier
                administrable_role_authorizations: view
                    + columns
                        grantee: information_schema.sql_identifier
                        role_name: information_schema.sql_identifier
                        is_grantable: information_schema.yes_or_no
                applicable_roles: view
                    + columns
                        grantee: information_schema.sql_identifier
                        role_name: information_schema.sql_identifier
                        is_grantable: information_schema.yes_or_no
                attributes: view
                    + columns
                        udt_catalog: information_schema.sql_identifier
                        udt_schema: information_schema.sql_identifier
                        udt_name: information_schema.sql_identifier
                        attribute_name: information_schema.sql_identifier
                        ordinal_position: information_schema.cardinal_number
                        attribute_default: information_schema.character_data
                        is_nullable: information_schema.yes_or_no
                        data_type: information_schema.character_data
                        character_maximum_length: information_schema.cardinal_number
                        character_octet_length: information_schema.cardinal_number
                        character_set_catalog: information_schema.sql_identifier
                        character_set_schema: information_schema.sql_identifier
                        character_set_name: information_schema.sql_identifier
                        collation_catalog: information_schema.sql_identifier
                        collation_schema: information_schema.sql_identifier
                        collation_name: information_schema.sql_identifier
                        numeric_precision: information_schema.cardinal_number
                        numeric_precision_radix: information_schema.cardinal_number
                        numeric_scale: information_schema.cardinal_number
                        datetime_precision: information_schema.cardinal_number
                        interval_type: information_schema.character_data
                        interval_precision: information_schema.cardinal_number
                        attribute_udt_catalog: information_schema.sql_identifier
                        attribute_udt_schema: information_schema.sql_identifier
                        attribute_udt_name: information_schema.sql_identifier
                        scope_catalog: information_schema.sql_identifier
                        scope_schema: information_schema.sql_identifier
                        scope_name: information_schema.sql_identifier
                        maximum_cardinality: information_schema.cardinal_number
                        dtd_identifier: information_schema.sql_identifier
                        is_derived_reference_attribute: information_schema.yes_or_no
                character_sets: view
                    + columns
                        character_set_catalog: information_schema.sql_identifier
                        character_set_schema: information_schema.sql_identifier
                        character_set_name: information_schema.sql_identifier
                        character_repertoire: information_schema.sql_identifier
                        form_of_use: information_schema.sql_identifier
                        default_collate_catalog: information_schema.sql_identifier
                        default_collate_schema: information_schema.sql_identifier
                        default_collate_name: information_schema.sql_identifier
                check_constraint_routine_usage: view
                    + columns
                        constraint_catalog: information_schema.sql_identifier
                        constraint_schema: information_schema.sql_identifier
                        constraint_name: information_schema.sql_identifier
                        specific_catalog: information_schema.sql_identifier
                        specific_schema: information_schema.sql_identifier
                        specific_name: information_schema.sql_identifier
                check_constraints: view
                    + columns
                        constraint_catalog: information_schema.sql_identifier
                        constraint_schema: information_schema.sql_identifier
                        constraint_name: information_schema.sql_identifier
                        check_clause: information_schema.character_data
                collation_character_set_applicability: view
                    + columns
                        collation_catalog: information_schema.sql_identifier
                        collation_schema: information_schema.sql_identifier
                        collation_name: information_schema.sql_identifier
                        character_set_catalog: information_schema.sql_identifier
                        character_set_schema: information_schema.sql_identifier
                        character_set_name: information_schema.sql_identifier
                collations: view
                    + columns
                        collation_catalog: information_schema.sql_identifier
                        collation_schema: information_schema.sql_identifier
                        collation_name: information_schema.sql_identifier
                        pad_attribute: information_schema.character_data
                column_column_usage: view
                    + columns
                        table_catalog: information_schema.sql_identifier
                        table_schema: information_schema.sql_identifier
                        table_name: information_schema.sql_identifier
                        column_name: information_schema.sql_identifier
                        dependent_column: information_schema.sql_identifier
                column_domain_usage: view
                    + columns
                        domain_catalog: information_schema.sql_identifier
                        domain_schema: information_schema.sql_identifier
                        domain_name: information_schema.sql_identifier
                        table_catalog: information_schema.sql_identifier
                        table_schema: information_schema.sql_identifier
                        table_name: information_schema.sql_identifier
                        column_name: information_schema.sql_identifier
                column_options: view
                    + columns
                        table_catalog: information_schema.sql_identifier
                        table_schema: information_schema.sql_identifier
                        table_name: information_schema.sql_identifier
                        column_name: information_schema.sql_identifier
                        option_name: information_schema.sql_identifier
                        option_value: information_schema.character_data
                column_privileges: view
                    + columns
                        grantor: information_schema.sql_identifier
                        grantee: information_schema.sql_identifier
                        table_catalog: information_schema.sql_identifier
                        table_schema: information_schema.sql_identifier
                        table_name: information_schema.sql_identifier
                        column_name: information_schema.sql_identifier
                        privilege_type: information_schema.character_data
                        is_grantable: information_schema.yes_or_no
                column_udt_usage: view
                    + columns
                        udt_catalog: information_schema.sql_identifier
                        udt_schema: information_schema.sql_identifier
                        udt_name: information_schema.sql_identifier
                        table_catalog: information_schema.sql_identifier
                        table_schema: information_schema.sql_identifier
                        table_name: information_schema.sql_identifier
                        column_name: information_schema.sql_identifier
                columns: view
                    + columns
                        table_catalog: information_schema.sql_identifier
                        table_schema: information_schema.sql_identifier
                        table_name: information_schema.sql_identifier
                        column_name: information_schema.sql_identifier
                        ordinal_position: information_schema.cardinal_number
                        column_default: information_schema.character_data
                        is_nullable: information_schema.yes_or_no
                        data_type: information_schema.character_data
                        character_maximum_length: information_schema.cardinal_number
                        character_octet_length: information_schema.cardinal_number
                        numeric_precision: information_schema.cardinal_number
                        numeric_precision_radix: information_schema.cardinal_number
                        numeric_scale: information_schema.cardinal_number
                        datetime_precision: information_schema.cardinal_number
                        interval_type: information_schema.character_data
                        interval_precision: information_schema.cardinal_number
                        character_set_catalog: information_schema.sql_identifier
                        character_set_schema: information_schema.sql_identifier
                        character_set_name: information_schema.sql_identifier
                        collation_catalog: information_schema.sql_identifier
                        collation_schema: information_schema.sql_identifier
                        collation_name: information_schema.sql_identifier
                        domain_catalog: information_schema.sql_identifier
                        domain_schema: information_schema.sql_identifier
                        domain_name: information_schema.sql_identifier
                        udt_catalog: information_schema.sql_identifier
                        udt_schema: information_schema.sql_identifier
                        udt_name: information_schema.sql_identifier
                        scope_catalog: information_schema.sql_identifier
                        scope_schema: information_schema.sql_identifier
                        scope_name: information_schema.sql_identifier
                        maximum_cardinality: information_schema.cardinal_number
                        dtd_identifier: information_schema.sql_identifier
                        is_self_referencing: information_schema.yes_or_no
                        is_identity: information_schema.yes_or_no
                        identity_generation: information_schema.character_data
                        identity_start: information_schema.character_data
                        identity_increment: information_schema.character_data
                        identity_maximum: information_schema.character_data
                        identity_minimum: information_schema.character_data
                        identity_cycle: information_schema.yes_or_no
                        is_generated: information_schema.character_data
                        generation_expression: information_schema.character_data
                        is_updatable: information_schema.yes_or_no
                constraint_column_usage: view
                    + columns
                        table_catalog: information_schema.sql_identifier
                        table_schema: information_schema.sql_identifier
                        table_name: information_schema.sql_identifier
                        column_name: information_schema.sql_identifier
                        constraint_catalog: information_schema.sql_identifier
                        constraint_schema: information_schema.sql_identifier
                        constraint_name: information_schema.sql_identifier
                constraint_table_usage: view
                    + columns
                        table_catalog: information_schema.sql_identifier
                        table_schema: information_schema.sql_identifier
                        table_name: information_schema.sql_identifier
                        constraint_catalog: information_schema.sql_identifier
                        constraint_schema: information_schema.sql_identifier
                        constraint_name: information_schema.sql_identifier
                data_type_privileges: view
                    + columns
                        object_catalog: information_schema.sql_identifier
                        object_schema: information_schema.sql_identifier
                        object_name: information_schema.sql_identifier
                        object_type: information_schema.character_data
                        dtd_identifier: information_schema.sql_identifier
                domain_constraints: view
                    + columns
                        constraint_catalog: information_schema.sql_identifier
                        constraint_schema: information_schema.sql_identifier
                        constraint_name: information_schema.sql_identifier
                        domain_catalog: information_schema.sql_identifier
                        domain_schema: information_schema.sql_identifier
                        domain_name: information_schema.sql_identifier
                        is_deferrable: information_schema.yes_or_no
                        initially_deferred: information_schema.yes_or_no
                domain_udt_usage: view
                    + columns
                        udt_catalog: information_schema.sql_identifier
                        udt_schema: information_schema.sql_identifier
                        udt_name: information_schema.sql_identifier
                        domain_catalog: information_schema.sql_identifier
                        domain_schema: information_schema.sql_identifier
                        domain_name: information_schema.sql_identifier
                domains: view
                    + columns
                        domain_catalog: information_schema.sql_identifier
                        domain_schema: information_schema.sql_identifier
                        domain_name: information_schema.sql_identifier
                        data_type: information_schema.character_data
                        character_maximum_length: information_schema.cardinal_number
                        character_octet_length: information_schema.cardinal_number
                        character_set_catalog: information_schema.sql_identifier
                        character_set_schema: information_schema.sql_identifier
                        character_set_name: information_schema.sql_identifier
                        collation_catalog: information_schema.sql_identifier
                        collation_schema: information_schema.sql_identifier
                        collation_name: information_schema.sql_identifier
                        numeric_precision: information_schema.cardinal_number
                        numeric_precision_radix: information_schema.cardinal_number
                        numeric_scale: information_schema.cardinal_number
                        datetime_precision: information_schema.cardinal_number
                        interval_type: information_schema.character_data
                        interval_precision: information_schema.cardinal_number
                        domain_default: information_schema.character_data
                        udt_catalog: information_schema.sql_identifier
                        udt_schema: information_schema.sql_identifier
                        udt_name: information_schema.sql_identifier
                        scope_catalog: information_schema.sql_identifier
                        scope_schema: information_schema.sql_identifier
                        scope_name: information_schema.sql_identifier
                        maximum_cardinality: information_schema.cardinal_number
                        dtd_identifier: information_schema.sql_identifier
                element_types: view
                    + columns
                        object_catalog: information_schema.sql_identifier
                        object_schema: information_schema.sql_identifier
                        object_name: information_schema.sql_identifier
                        object_type: information_schema.character_data
                        collection_type_identifier: information_schema.sql_identifier
                        data_type: information_schema.character_data
                        character_maximum_length: information_schema.cardinal_number
                        character_octet_length: information_schema.cardinal_number
                        character_set_catalog: information_schema.sql_identifier
                        character_set_schema: information_schema.sql_identifier
                        character_set_name: information_schema.sql_identifier
                        collation_catalog: information_schema.sql_identifier
                        collation_schema: information_schema.sql_identifier
                        collation_name: information_schema.sql_identifier
                        numeric_precision: information_schema.cardinal_number
                        numeric_precision_radix: information_schema.cardinal_number
                        numeric_scale: information_schema.cardinal_number
                        datetime_precision: information_schema.cardinal_number
                        interval_type: information_schema.character_data
                        interval_precision: information_schema.cardinal_number
                        domain_default: information_schema.character_data
                        udt_catalog: information_schema.sql_identifier
                        udt_schema: information_schema.sql_identifier
                        udt_name: information_schema.sql_identifier
                        scope_catalog: information_schema.sql_identifier
                        scope_schema: information_schema.sql_identifier
                        scope_name: information_schema.sql_identifier
                        maximum_cardinality: information_schema.cardinal_number
                        dtd_identifier: information_schema.sql_identifier
                enabled_roles: view
                    + columns
                        role_name: information_schema.sql_identifier
                foreign_data_wrapper_options: view
                    + columns
                        foreign_data_wrapper_catalog: information_schema.sql_identifier
                        foreign_data_wrapper_name: information_schema.sql_identifier
                        option_name: information_schema.sql_identifier
                        option_value: information_schema.character_data
                foreign_data_wrappers: view
                    + columns
                        foreign_data_wrapper_catalog: information_schema.sql_identifier
                        foreign_data_wrapper_name: information_schema.sql_identifier
                        authorization_identifier: information_schema.sql_identifier
                        library_name: information_schema.character_data
                        foreign_data_wrapper_language: information_schema.character_data
                foreign_server_options: view
                    + columns
                        foreign_server_catalog: information_schema.sql_identifier
                        foreign_server_name: information_schema.sql_identifier
                        option_name: information_schema.sql_identifier
                        option_value: information_schema.character_data
                foreign_servers: view
                    + columns
                        foreign_server_catalog: information_schema.sql_identifier
                        foreign_server_name: information_schema.sql_identifier
                        foreign_data_wrapper_catalog: information_schema.sql_identifier
                        foreign_data_wrapper_name: information_schema.sql_identifier
                        foreign_server_type: information_schema.character_data
                        foreign_server_version: information_schema.character_data
                        authorization_identifier: information_schema.sql_identifier
                foreign_table_options: view
                    + columns
                        foreign_table_catalog: information_schema.sql_identifier
                        foreign_table_schema: information_schema.sql_identifier
                        foreign_table_name: information_schema.sql_identifier
                        option_name: information_schema.sql_identifier
                        option_value: information_schema.character_data
                foreign_tables: view
                    + columns
                        foreign_table_catalog: information_schema.sql_identifier
                        foreign_table_schema: information_schema.sql_identifier
                        foreign_table_name: information_schema.sql_identifier
                        foreign_server_catalog: information_schema.sql_identifier
                        foreign_server_name: information_schema.sql_identifier
                information_schema_catalog_name: view
                    + columns
                        catalog_name: information_schema.sql_identifier
                key_column_usage: view
                    + columns
                        constraint_catalog: information_schema.sql_identifier
                        constraint_schema: information_schema.sql_identifier
                        constraint_name: information_schema.sql_identifier
                        table_catalog: information_schema.sql_identifier
                        table_schema: information_schema.sql_identifier
                        table_name: information_schema.sql_identifier
                        column_name: information_schema.sql_identifier
                        ordinal_position: information_schema.cardinal_number
                        position_in_unique_constraint: information_schema.cardinal_number
                parameters: view
                    + columns
                        specific_catalog: information_schema.sql_identifier
                        specific_schema: information_schema.sql_identifier
                        specific_name: information_schema.sql_identifier
                        ordinal_position: information_schema.cardinal_number
                        parameter_mode: information_schema.character_data
                        is_result: information_schema.yes_or_no
                        as_locator: information_schema.yes_or_no
                        parameter_name: information_schema.sql_identifier
                        data_type: information_schema.character_data
                        character_maximum_length: information_schema.cardinal_number
                        character_octet_length: information_schema.cardinal_number
                        character_set_catalog: information_schema.sql_identifier
                        character_set_schema: information_schema.sql_identifier
                        character_set_name: information_schema.sql_identifier
                        collation_catalog: information_schema.sql_identifier
                        collation_schema: information_schema.sql_identifier
                        collation_name: information_schema.sql_identifier
                        numeric_precision: information_schema.cardinal_number
                        numeric_precision_radix: information_schema.cardinal_number
                        numeric_scale: information_schema.cardinal_number
                        datetime_precision: information_schema.cardinal_number
                        interval_type: information_schema.character_data
                        interval_precision: information_schema.cardinal_number
                        udt_catalog: information_schema.sql_identifier
                        udt_schema: information_schema.sql_identifier
                        udt_name: information_schema.sql_identifier
                        scope_catalog: information_schema.sql_identifier
                        scope_schema: information_schema.sql_identifier
                        scope_name: information_schema.sql_identifier
                        maximum_cardinality: information_schema.cardinal_number
                        dtd_identifier: information_schema.sql_identifier
                        parameter_default: information_schema.character_data
                referential_constraints: view
                    + columns
                        constraint_catalog: information_schema.sql_identifier
                        constraint_schema: information_schema.sql_identifier
                        constraint_name: information_schema.sql_identifier
                        unique_constraint_catalog: information_schema.sql_identifier
                        unique_constraint_schema: information_schema.sql_identifier
                        unique_constraint_name: information_schema.sql_identifier
                        match_option: information_schema.character_data
                        update_rule: information_schema.character_data
                        delete_rule: information_schema.character_data
                role_column_grants: view
                    + columns
                        grantor: information_schema.sql_identifier
                        grantee: information_schema.sql_identifier
                        table_catalog: information_schema.sql_identifier
                        table_schema: information_schema.sql_identifier
                        table_name: information_schema.sql_identifier
                        column_name: information_schema.sql_identifier
                        privilege_type: information_schema.character_data
                        is_grantable: information_schema.yes_or_no
                role_routine_grants: view
                    + columns
                        grantor: information_schema.sql_identifier
                        grantee: information_schema.sql_identifier
                        specific_catalog: information_schema.sql_identifier
                        specific_schema: information_schema.sql_identifier
                        specific_name: information_schema.sql_identifier
                        routine_catalog: information_schema.sql_identifier
                        routine_schema: information_schema.sql_identifier
                        routine_name: information_schema.sql_identifier
                        privilege_type: information_schema.character_data
                        is_grantable: information_schema.yes_or_no
                role_table_grants: view
                    + columns
                        grantor: information_schema.sql_identifier
                        grantee: information_schema.sql_identifier
                        table_catalog: information_schema.sql_identifier
                        table_schema: information_schema.sql_identifier
                        table_name: information_schema.sql_identifier
                        privilege_type: information_schema.character_data
                        is_grantable: information_schema.yes_or_no
                        with_hierarchy: information_schema.yes_or_no
                role_udt_grants: view
                    + columns
                        grantor: information_schema.sql_identifier
                        grantee: information_schema.sql_identifier
                        udt_catalog: information_schema.sql_identifier
                        udt_schema: information_schema.sql_identifier
                        udt_name: information_schema.sql_identifier
                        privilege_type: information_schema.character_data
                        is_grantable: information_schema.yes_or_no
                role_usage_grants: view
                    + columns
                        grantor: information_schema.sql_identifier
                        grantee: information_schema.sql_identifier
                        object_catalog: information_schema.sql_identifier
                        object_schema: information_schema.sql_identifier
                        object_name: information_schema.sql_identifier
                        object_type: information_schema.character_data
                        privilege_type: information_schema.character_data
                        is_grantable: information_schema.yes_or_no
                routine_privileges: view
                    + columns
                        grantor: information_schema.sql_identifier
                        grantee: information_schema.sql_identifier
                        specific_catalog: information_schema.sql_identifier
                        specific_schema: information_schema.sql_identifier
                        specific_name: information_schema.sql_identifier
                        routine_catalog: information_schema.sql_identifier
                        routine_schema: information_schema.sql_identifier
                        routine_name: information_schema.sql_identifier
                        privilege_type: information_schema.character_data
                        is_grantable: information_schema.yes_or_no
                routines: view
                    + columns
                        specific_catalog: information_schema.sql_identifier
                        specific_schema: information_schema.sql_identifier
                        specific_name: information_schema.sql_identifier
                        routine_catalog: information_schema.sql_identifier
                        routine_schema: information_schema.sql_identifier
                        routine_name: information_schema.sql_identifier
                        routine_type: information_schema.character_data
                        module_catalog: information_schema.sql_identifier
                        module_schema: information_schema.sql_identifier
                        module_name: information_schema.sql_identifier
                        udt_catalog: information_schema.sql_identifier
                        udt_schema: information_schema.sql_identifier
                        udt_name: information_schema.sql_identifier
                        data_type: information_schema.character_data
                        character_maximum_length: information_schema.cardinal_number
                        character_octet_length: information_schema.cardinal_number
                        character_set_catalog: information_schema.sql_identifier
                        character_set_schema: information_schema.sql_identifier
                        character_set_name: information_schema.sql_identifier
                        collation_catalog: information_schema.sql_identifier
                        collation_schema: information_schema.sql_identifier
                        collation_name: information_schema.sql_identifier
                        numeric_precision: information_schema.cardinal_number
                        numeric_precision_radix: information_schema.cardinal_number
                        numeric_scale: information_schema.cardinal_number
                        datetime_precision: information_schema.cardinal_number
                        interval_type: information_schema.character_data
                        interval_precision: information_schema.cardinal_number
                        type_udt_catalog: information_schema.sql_identifier
                        type_udt_schema: information_schema.sql_identifier
                        type_udt_name: information_schema.sql_identifier
                        scope_catalog: information_schema.sql_identifier
                        scope_schema: information_schema.sql_identifier
                        scope_name: information_schema.sql_identifier
                        maximum_cardinality: information_schema.cardinal_number
                        dtd_identifier: information_schema.sql_identifier
                        routine_body: information_schema.character_data
                        routine_definition: information_schema.character_data
                        external_name: information_schema.character_data
                        external_language: information_schema.character_data
                        parameter_style: information_schema.character_data
                        is_deterministic: information_schema.yes_or_no
                        sql_data_access: information_schema.character_data
                        is_null_call: information_schema.yes_or_no
                        sql_path: information_schema.character_data
                        schema_level_routine: information_schema.yes_or_no
                        max_dynamic_result_sets: information_schema.cardinal_number
                        is_user_defined_cast: information_schema.yes_or_no
                        is_implicitly_invocable: information_schema.yes_or_no
                        security_type: information_schema.character_data
                        to_sql_specific_catalog: information_schema.sql_identifier
                        to_sql_specific_schema: information_schema.sql_identifier
                        to_sql_specific_name: information_schema.sql_identifier
                        as_locator: information_schema.yes_or_no
                        created: information_schema.time_stamp
                        last_altered: information_schema.time_stamp
                        new_savepoint_level: information_schema.yes_or_no
                        is_udt_dependent: information_schema.yes_or_no
                        result_cast_from_data_type: information_schema.character_data
                        result_cast_as_locator: information_schema.yes_or_no
                        result_cast_char_max_length: information_schema.cardinal_number
                        result_cast_char_octet_length: information_schema.cardinal_number
                        result_cast_char_set_catalog: information_schema.sql_identifier
                        result_cast_char_set_schema: information_schema.sql_identifier
                        result_cast_char_set_name: information_schema.sql_identifier
                        result_cast_collation_catalog: information_schema.sql_identifier
                        result_cast_collation_schema: information_schema.sql_identifier
                        result_cast_collation_name: information_schema.sql_identifier
                        result_cast_numeric_precision: information_schema.cardinal_number
                        result_cast_numeric_precision_radix: information_schema.cardinal_number
                        result_cast_numeric_scale: information_schema.cardinal_number
                        result_cast_datetime_precision: information_schema.cardinal_number
                        result_cast_interval_type: information_schema.character_data
                        result_cast_interval_precision: information_schema.cardinal_number
                        result_cast_type_udt_catalog: information_schema.sql_identifier
                        result_cast_type_udt_schema: information_schema.sql_identifier
                        result_cast_type_udt_name: information_schema.sql_identifier
                        result_cast_scope_catalog: information_schema.sql_identifier
                        result_cast_scope_schema: information_schema.sql_identifier
                        result_cast_scope_name: information_schema.sql_identifier
                        result_cast_maximum_cardinality: information_schema.cardinal_number
                        result_cast_dtd_identifier: information_schema.sql_identifier
                schemata: view
                    + columns
                        catalog_name: information_schema.sql_identifier
                        schema_name: information_schema.sql_identifier
                        schema_owner: information_schema.sql_identifier
                        default_character_set_catalog: information_schema.sql_identifier
                        default_character_set_schema: information_schema.sql_identifier
                        default_character_set_name: information_schema.sql_identifier
                        sql_path: information_schema.character_data
                sequences: view
                    + columns
                        sequence_catalog: information_schema.sql_identifier
                        sequence_schema: information_schema.sql_identifier
                        sequence_name: information_schema.sql_identifier
                        data_type: information_schema.character_data
                        numeric_precision: information_schema.cardinal_number
                        numeric_precision_radix: information_schema.cardinal_number
                        numeric_scale: information_schema.cardinal_number
                        start_value: information_schema.character_data
                        minimum_value: information_schema.character_data
                        maximum_value: information_schema.character_data
                        increment: information_schema.character_data
                        cycle_option: information_schema.yes_or_no
                table_constraints: view
                    + columns
                        constraint_catalog: information_schema.sql_identifier
                        constraint_schema: information_schema.sql_identifier
                        constraint_name: information_schema.sql_identifier
                        table_catalog: information_schema.sql_identifier
                        table_schema: information_schema.sql_identifier
                        table_name: information_schema.sql_identifier
                        constraint_type: information_schema.character_data
                        is_deferrable: information_schema.yes_or_no
                        initially_deferred: information_schema.yes_or_no
                        enforced: information_schema.yes_or_no
                table_privileges: view
                    + columns
                        grantor: information_schema.sql_identifier
                        grantee: information_schema.sql_identifier
                        table_catalog: information_schema.sql_identifier
                        table_schema: information_schema.sql_identifier
                        table_name: information_schema.sql_identifier
                        privilege_type: information_schema.character_data
                        is_grantable: information_schema.yes_or_no
                        with_hierarchy: information_schema.yes_or_no
                tables: view
                    + columns
                        table_catalog: information_schema.sql_identifier
                        table_schema: information_schema.sql_identifier
                        table_name: information_schema.sql_identifier
                        table_type: information_schema.character_data
                        self_referencing_column_name: information_schema.sql_identifier
                        reference_generation: information_schema.character_data
                        user_defined_type_catalog: information_schema.sql_identifier
                        user_defined_type_schema: information_schema.sql_identifier
                        user_defined_type_name: information_schema.sql_identifier
                        is_insertable_into: information_schema.yes_or_no
                        is_typed: information_schema.yes_or_no
                        commit_action: information_schema.character_data
                transforms: view
                    + columns
                        udt_catalog: information_schema.sql_identifier
                        udt_schema: information_schema.sql_identifier
                        udt_name: information_schema.sql_identifier
                        specific_catalog: information_schema.sql_identifier
                        specific_schema: information_schema.sql_identifier
                        specific_name: information_schema.sql_identifier
                        group_name: information_schema.sql_identifier
                        transform_type: information_schema.character_data
                triggered_update_columns: view
                    + columns
                        trigger_catalog: information_schema.sql_identifier
                        trigger_schema: information_schema.sql_identifier
                        trigger_name: information_schema.sql_identifier
                        event_object_catalog: information_schema.sql_identifier
                        event_object_schema: information_schema.sql_identifier
                        event_object_table: information_schema.sql_identifier
                        event_object_column: information_schema.sql_identifier
                triggers: view
                    + columns
                        trigger_catalog: information_schema.sql_identifier
                        trigger_schema: information_schema.sql_identifier
                        trigger_name: information_schema.sql_identifier
                        event_manipulation: information_schema.character_data
                        event_object_catalog: information_schema.sql_identifier
                        event_object_schema: information_schema.sql_identifier
                        event_object_table: information_schema.sql_identifier
                        action_order: information_schema.cardinal_number
                        action_condition: information_schema.character_data
                        action_statement: information_schema.character_data
                        action_orientation: information_schema.character_data
                        action_timing: information_schema.character_data
                        action_reference_old_table: information_schema.sql_identifier
                        action_reference_new_table: information_schema.sql_identifier
                        action_reference_old_row: information_schema.sql_identifier
                        action_reference_new_row: information_schema.sql_identifier
                        created: information_schema.time_stamp
                udt_privileges: view
                    + columns
                        grantor: information_schema.sql_identifier
                        grantee: information_schema.sql_identifier
                        udt_catalog: information_schema.sql_identifier
                        udt_schema: information_schema.sql_identifier
                        udt_name: information_schema.sql_identifier
                        privilege_type: information_schema.character_data
                        is_grantable: information_schema.yes_or_no
                usage_privileges: view
                    + columns
                        grantor: information_schema.sql_identifier
                        grantee: information_schema.sql_identifier
                        object_catalog: information_schema.sql_identifier
                        object_schema: information_schema.sql_identifier
                        object_name: information_schema.sql_identifier
                        object_type: information_schema.character_data
                        privilege_type: information_schema.character_data
                        is_grantable: information_schema.yes_or_no
                user_defined_types: view
                    + columns
                        user_defined_type_catalog: information_schema.sql_identifier
                        user_defined_type_schema: information_schema.sql_identifier
                        user_defined_type_name: information_schema.sql_identifier
                        user_defined_type_category: information_schema.character_data
                        is_instantiable: information_schema.yes_or_no
                        is_final: information_schema.yes_or_no
                        ordering_form: information_schema.character_data
                        ordering_category: information_schema.character_data
                        ordering_routine_catalog: information_schema.sql_identifier
                        ordering_routine_schema: information_schema.sql_identifier
                        ordering_routine_name: information_schema.sql_identifier
                        reference_type: information_schema.character_data
                        data_type: information_schema.character_data
                        character_maximum_length: information_schema.cardinal_number
                        character_octet_length: information_schema.cardinal_number
                        character_set_catalog: information_schema.sql_identifier
                        character_set_schema: information_schema.sql_identifier
                        character_set_name: information_schema.sql_identifier
                        collation_catalog: information_schema.sql_identifier
                        collation_schema: information_schema.sql_identifier
                        collation_name: information_schema.sql_identifier
                        numeric_precision: information_schema.cardinal_number
                        numeric_precision_radix: information_schema.cardinal_number
                        numeric_scale: information_schema.cardinal_number
                        datetime_precision: information_schema.cardinal_number
                        interval_type: information_schema.character_data
                        interval_precision: information_schema.cardinal_number
                        source_dtd_identifier: information_schema.sql_identifier
                        ref_dtd_identifier: information_schema.sql_identifier
                user_mapping_options: view
                    + columns
                        authorization_identifier: information_schema.sql_identifier
                        foreign_server_catalog: information_schema.sql_identifier
                        foreign_server_name: information_schema.sql_identifier
                        option_name: information_schema.sql_identifier
                        option_value: information_schema.character_data
                user_mappings: view
                    + columns
                        authorization_identifier: information_schema.sql_identifier
                        foreign_server_catalog: information_schema.sql_identifier
                        foreign_server_name: information_schema.sql_identifier
                view_column_usage: view
                    + columns
                        view_catalog: information_schema.sql_identifier
                        view_schema: information_schema.sql_identifier
                        view_name: information_schema.sql_identifier
                        table_catalog: information_schema.sql_identifier
                        table_schema: information_schema.sql_identifier
                        table_name: information_schema.sql_identifier
                        column_name: information_schema.sql_identifier
                view_routine_usage: view
                    + columns
                        table_catalog: information_schema.sql_identifier
                        table_schema: information_schema.sql_identifier
                        table_name: information_schema.sql_identifier
                        specific_catalog: information_schema.sql_identifier
                        specific_schema: information_schema.sql_identifier
                        specific_name: information_schema.sql_identifier
                view_table_usage: view
                    + columns
                        view_catalog: information_schema.sql_identifier
                        view_schema: information_schema.sql_identifier
                        view_name: information_schema.sql_identifier
                        table_catalog: information_schema.sql_identifier
                        table_schema: information_schema.sql_identifier
                        table_name: information_schema.sql_identifier
                views: view
                    + columns
                        table_catalog: information_schema.sql_identifier
                        table_schema: information_schema.sql_identifier
                        table_name: information_schema.sql_identifier
                        view_definition: information_schema.character_data
                        check_option: information_schema.character_data
                        is_updatable: information_schema.yes_or_no
                        is_insertable_into: information_schema.yes_or_no
                        is_trigger_updatable: information_schema.yes_or_no
                        is_trigger_deletable: information_schema.yes_or_no
                        is_trigger_insertable_into: information_schema.yes_or_no
            + routines
                _pg_char_max_length(oid,integer): function attributes: strict, parallel safe
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = sql
                    + arguments
                        #1: return integer
                        typid: in oid
                        typmod: in integer
                _pg_char_octet_length(oid,integer): function attributes: strict, parallel safe
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = sql
                    + arguments
                        #1: return integer
                        typid: in oid
                        typmod: in integer
                _pg_datetime_precision(oid,integer): function attributes: strict, parallel safe
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = sql
                    + arguments
                        #1: return integer
                        typid: in oid
                        typmod: in integer
                _pg_expandarray(anyarray): function attributes: strict, parallel safe
                    . properties
                        returns_set +
                        volatility_kind = IMMUTABLE
                    . references
                        language = sql
                    + arguments
                        #1: return setof record
                        #2: in anyarray
                        x: out anyelement
                        n: out integer
                _pg_index_position(oid,smallint): function attributes: strict
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = sql
                    + arguments
                        #1: return integer
                        #2: in oid
                        #3: in smallint
                _pg_interval_type(oid,integer): function attributes: strict, parallel safe
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = sql
                    + arguments
                        #1: return text
                        typid: in oid
                        mod: in integer
                _pg_keysequal(smallint[],smallint[]): function attributes: parallel safe
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = sql
                    + arguments
                        #1: return boolean
                        #2: in smallint[]
                        #3: in smallint[]
                _pg_numeric_precision(oid,integer): function attributes: strict, parallel safe
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = sql
                    + arguments
                        #1: return integer
                        typid: in oid
                        typmod: in integer
                _pg_numeric_precision_radix(oid,integer): function attributes: strict, parallel safe
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = sql
                    + arguments
                        #1: return integer
                        typid: in oid
                        typmod: in integer
                _pg_numeric_scale(oid,integer): function attributes: strict, parallel safe
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = sql
                    + arguments
                        #1: return integer
                        typid: in oid
                        typmod: in integer
                _pg_truetypid(pg_attribute,pg_type): function attributes: strict, parallel safe
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = sql
                    + arguments
                        #1: return oid
                        #2: in pg_attribute
                        #3: in pg_type
                _pg_truetypmod(pg_attribute,pg_type): function attributes: strict, parallel safe
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = sql
                    + arguments
                        #1: return integer
                        #2: in pg_attribute
                        #3: in pg_type
        pg_catalog: schema
            --  system catalog schema
            + object-types
                aclitem: base type (user defined) of -
                    --  access control list
                bit: base type (bit string) of -
                    --  fixed-length bit string
                bool: base type (boolean) of -
                    --  boolean, 'true'/'false'
                box: base type (geometric) of -
                    --  geometric box '(lower left,upper right)'
                bpchar: base type (string) of -
                    --  char(length), blank-padded string, fixed storage length
                bytea: base type (user defined) of -
                    --  variable-length string, binary values escaped
                char: base type (string) of -
                    --  single character
                cid: base type (user defined) of -
                    --  command identifier type, sequence in transaction id
                cidr: base type (network) of -
                    --  network IP address/netmask, network address
                circle: base type (geometric) of -
                    --  geometric circle '(center,radius)'
                date: base type (date time) of -
                    --  date
                float4: base type (numeric) of -
                    --  single-precision floating point number, 4-byte storage
                float8: base type (numeric) of -
                    --  double-precision floating point number, 8-byte storage
                gtsvector: base type (user defined) of -
                    --  GiST index internal text representation for text search
                inet: base type (network) of -
                    --  IP address/netmask, host address, netmask optional
                int2: base type (numeric) of -
                    --  -32 thousand to 32 thousand, 2-byte storage
                int4: base type (numeric) of -
                    --  -2 billion to 2 billion integer, 4-byte storage
                int8: base type (numeric) of -
                    --  ~18 digit integer, 8-byte storage
                interval: base type (time span) of -
                    --  @ <number> <units>, time interval
                json: base type (user defined) of -
                    --  JSON stored as text
                jsonb: base type (user defined) of -
                    --  Binary JSON
                jsonpath: base type (user defined) of -
                    --  JSON path
                line: base type (geometric) of -
                    --  geometric line
                lseg: base type (geometric) of -
                    --  geometric line segment '(pt1,pt2)'
                macaddr: base type (user defined) of -
                    --  XX:XX:XX:XX:XX:XX, MAC address
                macaddr8: base type (user defined) of -
                    --  XX:XX:XX:XX:XX:XX:XX:XX, MAC address
                money: base type (numeric) of -
                    --  monetary amounts, $d,ddd.cc
                name: base type (string) of -
                    --  63-byte type for storing system identifiers
                numeric: base type (numeric) of -
                    --  numeric(precision, decimal), arbitrary precision number
                oid: base type (numeric) of -
                    --  object identifier(oid), maximum 4 billion
                path: base type (geometric) of -
                    --  geometric path '(pt1,...)'
                pg_dependencies: base type (string) of -
                    --  multivariate dependencies
                pg_lsn: base type (user defined) of -
                    --  PostgreSQL LSN datatype
                pg_mcv_list: base type (string) of -
                    --  multivariate MCV list
                pg_ndistinct: base type (string) of -
                    --  multivariate ndistinct coefficients
                pg_node_tree: base type (string) of -
                    --  string representing an internal node tree
                point: base type (geometric) of -
                    --  geometric point '(x, y)'
                polygon: base type (geometric) of -
                    --  geometric polygon '(pt1,...)'
                refcursor: base type (user defined) of -
                    --  reference to cursor (portal name)
                regclass: base type (numeric) of -
                    --  registered class
                regconfig: base type (numeric) of -
                    --  registered text search configuration
                regdictionary: base type (numeric) of -
                    --  registered text search dictionary
                regnamespace: base type (numeric) of -
                    --  registered namespace
                regoper: base type (numeric) of -
                    --  registered operator
                regoperator: base type (numeric) of -
                    --  registered operator (with args)
                regproc: base type (numeric) of -
                    --  registered procedure
                regprocedure: base type (numeric) of -
                    --  registered procedure (with args)
                regrole: base type (numeric) of -
                    --  registered role
                regtype: base type (numeric) of -
                    --  registered type
                text: base type (string) of -
                    --  variable-length string, no limit specified
                tid: base type (user defined) of -
                    --  (block, offset), physical location of tuple
                time: base type (date time) of -
                    --  time of day
                timestamp: base type (date time) of -
                    --  date and time
                timestamptz: base type (date time) of -
                    --  date and time with time zone
                timetz: base type (date time) of -
                    --  time of day with time zone
                tsquery: base type (user defined) of -
                    --  query representation for text search
                tsvector: base type (user defined) of -
                    --  text representation for text search
                txid_snapshot: base type (user defined) of -
                    --  txid snapshot
                uuid: base type (user defined) of -
                    --  UUID datatype
                varbit: base type (bit string) of -
                    --  variable-length bit string
                varchar: base type (string) of -
                    --  varchar(length), non-blank-padded string, variable storage length
                xid: base type (user defined) of -
                    --  transaction id
                xml: base type (user defined) of -
                    --  XML content
            + tables
                pg_aggregate: table
                    + columns
                        aggfnoid: regproc NN
                        aggkind: "char" NN
                        aggnumdirectargs: smallint NN
                        aggtransfn: regproc NN
                        aggfinalfn: regproc NN
                        aggcombinefn: regproc NN
                        aggserialfn: regproc NN
                        aggdeserialfn: regproc NN
                        aggmtransfn: regproc NN
                        aggminvtransfn: regproc NN
                        aggmfinalfn: regproc NN
                        aggfinalextra: boolean NN
                        aggmfinalextra: boolean NN
                        aggfinalmodify: "char" NN
                        aggmfinalmodify: "char" NN
                        aggsortop: oid NN
                        aggtranstype: oid NN
                        aggtransspace: integer NN
                        aggmtranstype: oid NN
                        aggmtransspace: integer NN
                        agginitval: text
                        aggminitval: text
                    + indices
                        pg_aggregate_fnoid_index: unique (aggfnoid)
                pg_am: table
                    + columns
                        oid: oid NN
                        amname: name NN
                        amhandler: regproc NN
                        amtype: "char" NN
                    + indices
                        pg_am_oid_index: unique (oid)
                        pg_am_name_index: unique (amname collate C)
                pg_amop: table
                    + columns
                        oid: oid NN
                        amopfamily: oid NN
                        amoplefttype: oid NN
                        amoprighttype: oid NN
                        amopstrategy: smallint NN
                        amoppurpose: "char" NN
                        amopopr: oid NN
                        amopmethod: oid NN
                        amopsortfamily: oid NN
                    + indices
                        pg_amop_oid_index: unique (oid)
                        pg_amop_fam_strat_index: unique (amopfamily, amoplefttype, amoprighttype, amopstrategy)
                        pg_amop_opr_fam_index: unique (amopopr, amoppurpose, amopfamily)
                pg_amproc: table
                    + columns
                        oid: oid NN
                        amprocfamily: oid NN
                        amproclefttype: oid NN
                        amprocrighttype: oid NN
                        amprocnum: smallint NN
                        amproc: regproc NN
                    + indices
                        pg_amproc_oid_index: unique (oid)
                        pg_amproc_fam_proc_index: unique (amprocfamily, amproclefttype, amprocrighttype, amprocnum)
                pg_attrdef: table
                    + columns
                        oid: oid NN
                        adrelid: oid NN
                        adnum: smallint NN
                        adbin: pg_node_tree NN
                    + indices
                        pg_attrdef_oid_index: unique (oid)
                        pg_attrdef_adrelid_adnum_index: unique (adrelid, adnum)
                pg_attribute: table
                    + columns
                        attrelid: oid NN
                        attname: name NN
                        atttypid: oid NN
                        attstattarget: integer NN
                        attlen: smallint NN
                        attnum: smallint NN
                        attndims: integer NN
                        attcacheoff: integer NN
                        atttypmod: integer NN
                        attbyval: boolean NN
                        attstorage: "char" NN
                        attalign: "char" NN
                        attnotnull: boolean NN
                        atthasdef: boolean NN
                        atthasmissing: boolean NN
                        attidentity: "char" NN
                        attgenerated: "char" NN
                        attisdropped: boolean NN
                        attislocal: boolean NN
                        attinhcount: integer NN
                        attcollation: oid NN
                        attacl: aclitem[]
                        attoptions: text[]
                        attfdwoptions: text[]
                        attmissingval: anyarray
                    + indices
                        pg_attribute_relid_attnam_index: unique (attrelid, attname collate C)
                        pg_attribute_relid_attnum_index: unique (attrelid, attnum)
                pg_auth_members: table
                    . references
                        tablespace = pg_global
                    + columns
                        roleid: oid NN
                        member: oid NN
                        grantor: oid NN
                        admin_option: boolean NN
                    + indices
                        pg_auth_members_role_member_index: unique (roleid, member)
                            . references
                                tablespace = pg_global
                        pg_auth_members_member_role_index: unique (member, roleid)
                            . references
                                tablespace = pg_global
                pg_authid: table
                    . references
                        tablespace = pg_global
                    + columns
                        oid: oid NN
                        rolname: name NN
                        rolsuper: boolean NN
                        rolinherit: boolean NN
                        rolcreaterole: boolean NN
                        rolcreatedb: boolean NN
                        rolcanlogin: boolean NN
                        rolreplication: boolean NN
                        rolbypassrls: boolean NN
                        rolconnlimit: integer NN
                        rolpassword: text
                        rolvaliduntil: timestamp with time zone
                    + indices
                        pg_authid_oid_index: unique (oid)
                            . references
                                tablespace = pg_global
                        pg_authid_rolname_index: unique (rolname collate C)
                            . references
                                tablespace = pg_global
                pg_cast: table
                    + columns
                        oid: oid NN
                        castsource: oid NN
                        casttarget: oid NN
                        castfunc: oid NN
                        castcontext: "char" NN
                        castmethod: "char" NN
                    + indices
                        pg_cast_oid_index: unique (oid)
                        pg_cast_source_target_index: unique (castsource, casttarget)
                pg_class: table
                    + columns
                        oid: oid NN
                        relname: name NN
                        relnamespace: oid NN
                        reltype: oid NN
                        reloftype: oid NN
                        relowner: oid NN
                        relam: oid NN
                        relfilenode: oid NN
                        reltablespace: oid NN
                        relpages: integer NN
                        reltuples: real NN
                        relallvisible: integer NN
                        reltoastrelid: oid NN
                        relhasindex: boolean NN
                        relisshared: boolean NN
                        relpersistence: "char" NN
                        relkind: "char" NN
                        relnatts: smallint NN
                        relchecks: smallint NN
                        relhasrules: boolean NN
                        relhastriggers: boolean NN
                        relhassubclass: boolean NN
                        relrowsecurity: boolean NN
                        relforcerowsecurity: boolean NN
                        relispopulated: boolean NN
                        relreplident: "char" NN
                        relispartition: boolean NN
                        relrewrite: oid NN
                        relfrozenxid: xid NN
                        relminmxid: xid NN
                        relacl: aclitem[]
                        reloptions: text[]
                        relpartbound: pg_node_tree
                    + indices
                        pg_class_oid_index: unique (oid)
                        pg_class_relname_nsp_index: unique (relname collate C, relnamespace)
                        pg_class_tblspc_relfilenode_index: index (reltablespace, relfilenode)
                pg_collation: table
                    + columns
                        oid: oid NN
                        collname: name NN
                        collnamespace: oid NN
                        collowner: oid NN
                        collprovider: "char" NN
                        collisdeterministic: boolean NN
                        collencoding: integer NN
                        collcollate: name NN
                        collctype: name NN
                        collversion: text
                    + indices
                        pg_collation_oid_index: unique (oid)
                        pg_collation_name_enc_nsp_index: unique (collname collate C, collencoding, collnamespace)
                pg_constraint: table
                    + columns
                        oid: oid NN
                        conname: name NN
                        connamespace: oid NN
                        contype: "char" NN
                        condeferrable: boolean NN
                        condeferred: boolean NN
                        convalidated: boolean NN
                        conrelid: oid NN
                        contypid: oid NN
                        conindid: oid NN
                        conparentid: oid NN
                        confrelid: oid NN
                        confupdtype: "char" NN
                        confdeltype: "char" NN
                        confmatchtype: "char" NN
                        conislocal: boolean NN
                        coninhcount: integer NN
                        connoinherit: boolean NN
                        conkey: smallint[]
                        confkey: smallint[]
                        conpfeqop: oid[]
                        conppeqop: oid[]
                        conffeqop: oid[]
                        conexclop: oid[]
                        conbin: pg_node_tree
                    + indices
                        pg_constraint_oid_index: unique (oid)
                        pg_constraint_conrelid_contypid_conname_index: unique (conrelid, contypid, conname collate C)
                        pg_constraint_conname_nsp_index: index (conname collate C, connamespace)
                        pg_constraint_contypid_index: index (contypid)
                        pg_constraint_conparentid_index: index (conparentid)
                pg_conversion: table
                    + columns
                        oid: oid NN
                        conname: name NN
                        connamespace: oid NN
                        conowner: oid NN
                        conforencoding: integer NN
                        contoencoding: integer NN
                        conproc: regproc NN
                        condefault: boolean NN
                    + indices
                        pg_conversion_oid_index: unique (oid)
                        pg_conversion_name_nsp_index: unique (conname collate C, connamespace)
                        pg_conversion_default_index: unique (connamespace, conforencoding, contoencoding, oid)
                pg_database: table
                    . references
                        tablespace = pg_global
                    + columns
                        oid: oid NN
                        datname: name NN
                        datdba: oid NN
                        encoding: integer NN
                        datcollate: name NN
                        datctype: name NN
                        datistemplate: boolean NN
                        datallowconn: boolean NN
                        datconnlimit: integer NN
                        datlastsysoid: oid NN
                        datfrozenxid: xid NN
                        datminmxid: xid NN
                        dattablespace: oid NN
                        datacl: aclitem[]
                    + indices
                        pg_database_oid_index: unique (oid)
                            . references
                                tablespace = pg_global
                        pg_database_datname_index: unique (datname collate C)
                            . references
                                tablespace = pg_global
                pg_db_role_setting: table
                    . references
                        tablespace = pg_global
                    + columns
                        setdatabase: oid NN
                        setrole: oid NN
                        setconfig: text[]
                    + indices
                        pg_db_role_setting_databaseid_rol_index: unique (setdatabase, setrole)
                            . references
                                tablespace = pg_global
                pg_default_acl: table
                    + columns
                        oid: oid NN
                        defaclrole: oid NN
                        defaclnamespace: oid NN
                        defaclobjtype: "char" NN
                        defaclacl: aclitem[] NN
                    + indices
                        pg_default_acl_oid_index: unique (oid)
                        pg_default_acl_role_nsp_obj_index: unique (defaclrole, defaclnamespace, defaclobjtype)
                pg_depend: table
                    + columns
                        classid: oid NN
                        objid: oid NN
                        objsubid: integer NN
                        refclassid: oid NN
                        refobjid: oid NN
                        refobjsubid: integer NN
                        deptype: "char" NN
                    + indices
                        pg_depend_depender_index: index (classid, objid, objsubid)
                        pg_depend_reference_index: index (refclassid, refobjid, refobjsubid)
                pg_description: table
                    + columns
                        objoid: oid NN
                        classoid: oid NN
                        objsubid: integer NN
                        description: text NN
                    + indices
                        pg_description_o_c_o_index: unique (objoid, classoid, objsubid)
                pg_enum: table
                    + columns
                        oid: oid NN
                        enumtypid: oid NN
                        enumsortorder: real NN
                        enumlabel: name NN
                    + indices
                        pg_enum_oid_index: unique (oid)
                        pg_enum_typid_sortorder_index: unique (enumtypid, enumsortorder)
                        pg_enum_typid_label_index: unique (enumtypid, enumlabel collate C)
                pg_event_trigger: table
                    + columns
                        oid: oid NN
                        evtname: name NN
                        evtevent: name NN
                        evtowner: oid NN
                        evtfoid: oid NN
                        evtenabled: "char" NN
                        evttags: text[]
                    + indices
                        pg_event_trigger_oid_index: unique (oid)
                        pg_event_trigger_evtname_index: unique (evtname collate C)
                pg_extension: table
                    + columns
                        oid: oid NN
                        extname: name NN
                        extowner: oid NN
                        extnamespace: oid NN
                        extrelocatable: boolean NN
                        extversion: text NN
                        extconfig: oid[]
                        extcondition: text[]
                    + indices
                        pg_extension_oid_index: unique (oid)
                        pg_extension_name_index: unique (extname collate C)
                pg_foreign_data_wrapper: table
                    + columns
                        oid: oid NN
                        fdwname: name NN
                        fdwowner: oid NN
                        fdwhandler: oid NN
                        fdwvalidator: oid NN
                        fdwacl: aclitem[]
                        fdwoptions: text[]
                    + indices
                        pg_foreign_data_wrapper_oid_index: unique (oid)
                        pg_foreign_data_wrapper_name_index: unique (fdwname collate C)
                pg_foreign_server: table
                    + columns
                        oid: oid NN
                        srvname: name NN
                        srvowner: oid NN
                        srvfdw: oid NN
                        srvtype: text
                        srvversion: text
                        srvacl: aclitem[]
                        srvoptions: text[]
                    + indices
                        pg_foreign_server_oid_index: unique (oid)
                        pg_foreign_server_name_index: unique (srvname collate C)
                pg_foreign_table: table
                    + columns
                        ftrelid: oid NN
                        ftserver: oid NN
                        ftoptions: text[]
                    + indices
                        pg_foreign_table_relid_index: unique (ftrelid)
                pg_index: table
                    + columns
                        indexrelid: oid NN
                        indrelid: oid NN
                        indnatts: smallint NN
                        indnkeyatts: smallint NN
                        indisunique: boolean NN
                        indisprimary: boolean NN
                        indisexclusion: boolean NN
                        indimmediate: boolean NN
                        indisclustered: boolean NN
                        indisvalid: boolean NN
                        indcheckxmin: boolean NN
                        indisready: boolean NN
                        indislive: boolean NN
                        indisreplident: boolean NN
                        indkey: int2vector NN
                        indcollation: oidvector NN
                        indclass: oidvector NN
                        indoption: int2vector NN
                        indexprs: pg_node_tree
                        indpred: pg_node_tree
                    + indices
                        pg_index_indexrelid_index: unique (indexrelid)
                        pg_index_indrelid_index: index (indrelid)
                pg_inherits: table
                    + columns
                        inhrelid: oid NN
                        inhparent: oid NN
                        inhseqno: integer NN
                    + indices
                        pg_inherits_relid_seqno_index: unique (inhrelid, inhseqno)
                        pg_inherits_parent_index: index (inhparent)
                pg_init_privs: table
                    + columns
                        objoid: oid NN
                        classoid: oid NN
                        objsubid: integer NN
                        privtype: "char" NN
                        initprivs: aclitem[] NN
                    + indices
                        pg_init_privs_o_c_o_index: unique (objoid, classoid, objsubid)
                pg_language: table
                    + columns
                        oid: oid NN
                        lanname: name NN
                        lanowner: oid NN
                        lanispl: boolean NN
                        lanpltrusted: boolean NN
                        lanplcallfoid: oid NN
                        laninline: oid NN
                        lanvalidator: oid NN
                        lanacl: aclitem[]
                    + indices
                        pg_language_oid_index: unique (oid)
                        pg_language_name_index: unique (lanname collate C)
                pg_largeobject: table
                    + columns
                        loid: oid NN
                        pageno: integer NN
                        data: bytea NN
                    + indices
                        pg_largeobject_loid_pn_index: unique (loid, pageno)
                pg_largeobject_metadata: table
                    + columns
                        oid: oid NN
                        lomowner: oid NN
                        lomacl: aclitem[]
                    + indices
                        pg_largeobject_metadata_oid_index: unique (oid)
                pg_namespace: table
                    + columns
                        oid: oid NN
                        nspname: name NN
                        nspowner: oid NN
                        nspacl: aclitem[]
                    + indices
                        pg_namespace_oid_index: unique (oid)
                        pg_namespace_nspname_index: unique (nspname collate C)
                pg_opclass: table
                    + columns
                        oid: oid NN
                        opcmethod: oid NN
                        opcname: name NN
                        opcnamespace: oid NN
                        opcowner: oid NN
                        opcfamily: oid NN
                        opcintype: oid NN
                        opcdefault: boolean NN
                        opckeytype: oid NN
                    + indices
                        pg_opclass_oid_index: unique (oid)
                        pg_opclass_am_name_nsp_index: unique (opcmethod, opcname collate C, opcnamespace)
                pg_operator: table
                    + columns
                        oid: oid NN
                        oprname: name NN
                        oprnamespace: oid NN
                        oprowner: oid NN
                        oprkind: "char" NN
                        oprcanmerge: boolean NN
                        oprcanhash: boolean NN
                        oprleft: oid NN
                        oprright: oid NN
                        oprresult: oid NN
                        oprcom: oid NN
                        oprnegate: oid NN
                        oprcode: regproc NN
                        oprrest: regproc NN
                        oprjoin: regproc NN
                    + indices
                        pg_operator_oid_index: unique (oid)
                        pg_operator_oprname_l_r_n_index: unique (oprname collate C, oprleft, oprright, oprnamespace)
                pg_opfamily: table
                    + columns
                        oid: oid NN
                        opfmethod: oid NN
                        opfname: name NN
                        opfnamespace: oid NN
                        opfowner: oid NN
                    + indices
                        pg_opfamily_oid_index: unique (oid)
                        pg_opfamily_am_name_nsp_index: unique (opfmethod, opfname collate C, opfnamespace)
                pg_partitioned_table: table
                    + columns
                        partrelid: oid NN
                        partstrat: "char" NN
                        partnatts: smallint NN
                        partdefid: oid NN
                        partattrs: int2vector NN
                        partclass: oidvector NN
                        partcollation: oidvector NN
                        partexprs: pg_node_tree
                    + indices
                        pg_partitioned_table_partrelid_index: unique (partrelid)
                pg_pltemplate: table
                    . references
                        tablespace = pg_global
                    + columns
                        tmplname: name NN
                        tmpltrusted: boolean NN
                        tmpldbacreate: boolean NN
                        tmplhandler: text NN
                        tmplinline: text
                        tmplvalidator: text
                        tmpllibrary: text NN
                        tmplacl: aclitem[]
                    + indices
                        pg_pltemplate_name_index: unique (tmplname collate C)
                            . references
                                tablespace = pg_global
                pg_policy: table
                    + columns
                        oid: oid NN
                        polname: name NN
                        polrelid: oid NN
                        polcmd: "char" NN
                        polpermissive: boolean NN
                        polroles: oid[] NN
                        polqual: pg_node_tree
                        polwithcheck: pg_node_tree
                    + indices
                        pg_policy_oid_index: unique (oid)
                        pg_policy_polrelid_polname_index: unique (polrelid, polname collate C)
                pg_proc: table
                    + columns
                        oid: oid NN
                        proname: name NN
                        pronamespace: oid NN
                        proowner: oid NN
                        prolang: oid NN
                        procost: real NN
                        prorows: real NN
                        provariadic: oid NN
                        prosupport: regproc NN
                        prokind: "char" NN
                        prosecdef: boolean NN
                        proleakproof: boolean NN
                        proisstrict: boolean NN
                        proretset: boolean NN
                        provolatile: "char" NN
                        proparallel: "char" NN
                        pronargs: smallint NN
                        pronargdefaults: smallint NN
                        prorettype: oid NN
                        proargtypes: oidvector NN
                        proallargtypes: oid[]
                        proargmodes: "char"[]
                        proargnames: text[]
                        proargdefaults: pg_node_tree
                        protrftypes: oid[]
                        prosrc: text NN
                        probin: text
                        proconfig: text[]
                        proacl: aclitem[]
                    + indices
                        pg_proc_oid_index: unique (oid)
                        pg_proc_proname_args_nsp_index: unique (proname collate C, proargtypes, pronamespace)
                pg_publication: table
                    + columns
                        oid: oid NN
                        pubname: name NN
                        pubowner: oid NN
                        puballtables: boolean NN
                        pubinsert: boolean NN
                        pubupdate: boolean NN
                        pubdelete: boolean NN
                        pubtruncate: boolean NN
                    + indices
                        pg_publication_oid_index: unique (oid)
                        pg_publication_pubname_index: unique (pubname collate C)
                pg_publication_rel: table
                    + columns
                        oid: oid NN
                        prpubid: oid NN
                        prrelid: oid NN
                    + indices
                        pg_publication_rel_oid_index: unique (oid)
                        pg_publication_rel_prrelid_prpubid_index: unique (prrelid, prpubid)
                pg_range: table
                    + columns
                        rngtypid: oid NN
                        rngsubtype: oid NN
                        rngcollation: oid NN
                        rngsubopc: oid NN
                        rngcanonical: regproc NN
                        rngsubdiff: regproc NN
                    + indices
                        pg_range_rngtypid_index: unique (rngtypid)
                pg_replication_origin: table
                    . references
                        tablespace = pg_global
                    + columns
                        roident: oid NN
                        roname: text NN
                    + indices
                        pg_replication_origin_roiident_index: unique (roident)
                            . references
                                tablespace = pg_global
                        pg_replication_origin_roname_index: unique (roname collate C)
                            . references
                                tablespace = pg_global
                pg_rewrite: table
                    + columns
                        oid: oid NN
                        rulename: name NN
                        ev_class: oid NN
                        ev_type: "char" NN
                        ev_enabled: "char" NN
                        is_instead: boolean NN
                        ev_qual: pg_node_tree NN
                        ev_action: pg_node_tree NN
                    + indices
                        pg_rewrite_oid_index: unique (oid)
                        pg_rewrite_rel_rulename_index: unique (ev_class, rulename collate C)
                pg_seclabel: table
                    + columns
                        objoid: oid NN
                        classoid: oid NN
                        objsubid: integer NN
                        provider: text NN
                        label: text NN
                    + indices
                        pg_seclabel_object_index: unique (objoid, classoid, objsubid, provider collate C)
                pg_sequence: table
                    + columns
                        seqrelid: oid NN
                        seqtypid: oid NN
                        seqstart: bigint NN
                        seqincrement: bigint NN
                        seqmax: bigint NN
                        seqmin: bigint NN
                        seqcache: bigint NN
                        seqcycle: boolean NN
                    + indices
                        pg_sequence_seqrelid_index: unique (seqrelid)
                pg_shdepend: table
                    . references
                        tablespace = pg_global
                    + columns
                        dbid: oid NN
                        classid: oid NN
                        objid: oid NN
                        objsubid: integer NN
                        refclassid: oid NN
                        refobjid: oid NN
                        deptype: "char" NN
                    + indices
                        pg_shdepend_depender_index: index (dbid, classid, objid, objsubid)
                            . references
                                tablespace = pg_global
                        pg_shdepend_reference_index: index (refclassid, refobjid)
                            . references
                                tablespace = pg_global
                pg_shdescription: table
                    . references
                        tablespace = pg_global
                    + columns
                        objoid: oid NN
                        classoid: oid NN
                        description: text NN
                    + indices
                        pg_shdescription_o_c_index: unique (objoid, classoid)
                            . references
                                tablespace = pg_global
                pg_shseclabel: table
                    . references
                        tablespace = pg_global
                    + columns
                        objoid: oid NN
                        classoid: oid NN
                        provider: text NN
                        label: text NN
                    + indices
                        pg_shseclabel_object_index: unique (objoid, classoid, provider collate C)
                            . references
                                tablespace = pg_global
                pg_statistic: table
                    + columns
                        starelid: oid NN
                        staattnum: smallint NN
                        stainherit: boolean NN
                        stanullfrac: real NN
                        stawidth: integer NN
                        stadistinct: real NN
                        stakind1: smallint NN
                        stakind2: smallint NN
                        stakind3: smallint NN
                        stakind4: smallint NN
                        stakind5: smallint NN
                        staop1: oid NN
                        staop2: oid NN
                        staop3: oid NN
                        staop4: oid NN
                        staop5: oid NN
                        stacoll1: oid NN
                        stacoll2: oid NN
                        stacoll3: oid NN
                        stacoll4: oid NN
                        stacoll5: oid NN
                        stanumbers1: real[]
                        stanumbers2: real[]
                        stanumbers3: real[]
                        stanumbers4: real[]
                        stanumbers5: real[]
                        stavalues1: anyarray
                        stavalues2: anyarray
                        stavalues3: anyarray
                        stavalues4: anyarray
                        stavalues5: anyarray
                    + indices
                        pg_statistic_relid_att_inh_index: unique (starelid, staattnum, stainherit)
                pg_statistic_ext: table
                    + columns
                        oid: oid NN
                        stxrelid: oid NN
                        stxname: name NN
                        stxnamespace: oid NN
                        stxowner: oid NN
                        stxkeys: int2vector NN
                        stxkind: "char"[] NN
                    + indices
                        pg_statistic_ext_oid_index: unique (oid)
                        pg_statistic_ext_name_index: unique (stxname collate C, stxnamespace)
                        pg_statistic_ext_relid_index: index (stxrelid)
                pg_statistic_ext_data: table
                    + columns
                        stxoid: oid NN
                        stxdndistinct: pg_ndistinct
                        stxddependencies: pg_dependencies
                        stxdmcv: pg_mcv_list
                    + indices
                        pg_statistic_ext_data_stxoid_index: unique (stxoid)
                pg_subscription: table
                    . references
                        tablespace = pg_global
                    + columns
                        oid: oid NN
                        subdbid: oid NN
                        subname: name NN
                        subowner: oid NN
                        subenabled: boolean NN
                        subconninfo: text NN
                        subslotname: name NN
                        subsynccommit: text NN
                        subpublications: text[] NN
                    + indices
                        pg_subscription_oid_index: unique (oid)
                            . references
                                tablespace = pg_global
                        pg_subscription_subname_index: unique (subdbid, subname collate C)
                            . references
                                tablespace = pg_global
                pg_subscription_rel: table
                    + columns
                        srsubid: oid NN
                        srrelid: oid NN
                        srsubstate: "char" NN
                        srsublsn: pg_lsn NN
                    + indices
                        pg_subscription_rel_srrelid_srsubid_index: unique (srrelid, srsubid)
                pg_tablespace: table
                    . references
                        tablespace = pg_global
                    + columns
                        oid: oid NN
                        spcname: name NN
                        spcowner: oid NN
                        spcacl: aclitem[]
                        spcoptions: text[]
                    + indices
                        pg_tablespace_oid_index: unique (oid)
                            . references
                                tablespace = pg_global
                        pg_tablespace_spcname_index: unique (spcname collate C)
                            . references
                                tablespace = pg_global
                pg_transform: table
                    + columns
                        oid: oid NN
                        trftype: oid NN
                        trflang: oid NN
                        trffromsql: regproc NN
                        trftosql: regproc NN
                    + indices
                        pg_transform_oid_index: unique (oid)
                        pg_transform_type_lang_index: unique (trftype, trflang)
                pg_trigger: table
                    + columns
                        oid: oid NN
                        tgrelid: oid NN
                        tgname: name NN
                        tgfoid: oid NN
                        tgtype: smallint NN
                        tgenabled: "char" NN
                        tgisinternal: boolean NN
                        tgconstrrelid: oid NN
                        tgconstrindid: oid NN
                        tgconstraint: oid NN
                        tgdeferrable: boolean NN
                        tginitdeferred: boolean NN
                        tgnargs: smallint NN
                        tgattr: int2vector NN
                        tgargs: bytea NN
                        tgqual: pg_node_tree
                        tgoldtable: name
                        tgnewtable: name
                    + indices
                        pg_trigger_oid_index: unique (oid)
                        pg_trigger_tgrelid_tgname_index: unique (tgrelid, tgname collate C)
                        pg_trigger_tgconstraint_index: index (tgconstraint)
                pg_ts_config: table
                    + columns
                        oid: oid NN
                        cfgname: name NN
                        cfgnamespace: oid NN
                        cfgowner: oid NN
                        cfgparser: oid NN
                    + indices
                        pg_ts_config_oid_index: unique (oid)
                        pg_ts_config_cfgname_index: unique (cfgname collate C, cfgnamespace)
                pg_ts_config_map: table
                    + columns
                        mapcfg: oid NN
                        maptokentype: integer NN
                        mapseqno: integer NN
                        mapdict: oid NN
                    + indices
                        pg_ts_config_map_index: unique (mapcfg, maptokentype, mapseqno)
                pg_ts_dict: table
                    + columns
                        oid: oid NN
                        dictname: name NN
                        dictnamespace: oid NN
                        dictowner: oid NN
                        dicttemplate: oid NN
                        dictinitoption: text
                    + indices
                        pg_ts_dict_oid_index: unique (oid)
                        pg_ts_dict_dictname_index: unique (dictname collate C, dictnamespace)
                pg_ts_parser: table
                    + columns
                        oid: oid NN
                        prsname: name NN
                        prsnamespace: oid NN
                        prsstart: regproc NN
                        prstoken: regproc NN
                        prsend: regproc NN
                        prsheadline: regproc NN
                        prslextype: regproc NN
                    + indices
                        pg_ts_parser_oid_index: unique (oid)
                        pg_ts_parser_prsname_index: unique (prsname collate C, prsnamespace)
                pg_ts_template: table
                    + columns
                        oid: oid NN
                        tmplname: name NN
                        tmplnamespace: oid NN
                        tmplinit: regproc NN
                        tmpllexize: regproc NN
                    + indices
                        pg_ts_template_oid_index: unique (oid)
                        pg_ts_template_tmplname_index: unique (tmplname collate C, tmplnamespace)
                pg_type: table
                    + columns
                        oid: oid NN
                        typname: name NN
                        typnamespace: oid NN
                        typowner: oid NN
                        typlen: smallint NN
                        typbyval: boolean NN
                        typtype: "char" NN
                        typcategory: "char" NN
                        typispreferred: boolean NN
                        typisdefined: boolean NN
                        typdelim: "char" NN
                        typrelid: oid NN
                        typelem: oid NN
                        typarray: oid NN
                        typinput: regproc NN
                        typoutput: regproc NN
                        typreceive: regproc NN
                        typsend: regproc NN
                        typmodin: regproc NN
                        typmodout: regproc NN
                        typanalyze: regproc NN
                        typalign: "char" NN
                        typstorage: "char" NN
                        typnotnull: boolean NN
                        typbasetype: oid NN
                        typtypmod: integer NN
                        typndims: integer NN
                        typcollation: oid NN
                        typdefaultbin: pg_node_tree
                        typdefault: text
                        typacl: aclitem[]
                    + indices
                        pg_type_oid_index: unique (oid)
                        pg_type_typname_nsp_index: unique (typname collate C, typnamespace)
                pg_user_mapping: table
                    + columns
                        oid: oid NN
                        umuser: oid NN
                        umserver: oid NN
                        umoptions: text[]
                    + indices
                        pg_user_mapping_oid_index: unique (oid)
                        pg_user_mapping_user_server_index: unique (umuser, umserver)
            + views
                pg_available_extension_versions: view
                    + columns
                        name: name
                        version: text
                        installed: boolean
                        superuser: boolean
                        relocatable: boolean
                        schema: name
                        requires: name[]
                        comment: text
                pg_available_extensions: view
                    + columns
                        name: name
                        default_version: text
                        installed_version: text
                        comment: text
                pg_config: view
                    + columns
                        name: text
                        setting: text
                pg_cursors: view
                    + columns
                        name: text
                        statement: text
                        is_holdable: boolean
                        is_binary: boolean
                        is_scrollable: boolean
                        creation_time: timestamp with time zone
                pg_file_settings: view
                    + columns
                        sourcefile: text
                        sourceline: integer
                        seqno: integer
                        name: text
                        setting: text
                        applied: boolean
                        error: text
                pg_group: view
                    + columns
                        groname: name
                        grosysid: oid
                        grolist: oid[]
                pg_hba_file_rules: view
                    + columns
                        line_number: integer
                        type: text
                        database: text[]
                        user_name: text[]
                        address: text
                        netmask: text
                        auth_method: text
                        options: text[]
                        error: text
                pg_indexes: view
                    + columns
                        schemaname: name
                        tablename: name
                        indexname: name
                        tablespace: name
                        indexdef: text
                pg_locks: view
                    + columns
                        locktype: text
                        database: oid
                        relation: oid
                        page: integer
                        tuple: smallint
                        virtualxid: text
                        transactionid: xid
                        classid: oid
                        objid: oid
                        objsubid: smallint
                        virtualtransaction: text
                        pid: integer
                        mode: text
                        granted: boolean
                        fastpath: boolean
                pg_matviews: view
                    + columns
                        schemaname: name
                        matviewname: name
                        matviewowner: name
                        tablespace: name
                        hasindexes: boolean
                        ispopulated: boolean
                        definition: text
                pg_policies: view
                    + columns
                        schemaname: name
                        tablename: name
                        policyname: name
                        permissive: text
                        roles: name[]
                        cmd: text
                        qual: text
                        with_check: text
                pg_prepared_statements: view
                    + columns
                        name: text
                        statement: text
                        prepare_time: timestamp with time zone
                        parameter_types: regtype[]
                        from_sql: boolean
                pg_prepared_xacts: view
                    + columns
                        transaction: xid
                        gid: text
                        prepared: timestamp with time zone
                        owner: name
                        database: name
                pg_publication_tables: view
                    + columns
                        pubname: name
                        schemaname: name
                        tablename: name
                pg_replication_origin_status: view
                    + columns
                        local_id: oid
                        external_id: text
                        remote_lsn: pg_lsn
                        local_lsn: pg_lsn
                pg_replication_slots: view
                    + columns
                        slot_name: name
                        plugin: name
                        slot_type: text
                        datoid: oid
                        database: name
                        temporary: boolean
                        active: boolean
                        active_pid: integer
                        xmin: xid
                        catalog_xmin: xid
                        restart_lsn: pg_lsn
                        confirmed_flush_lsn: pg_lsn
                pg_roles: view
                    + columns
                        rolname: name
                        rolsuper: boolean
                        rolinherit: boolean
                        rolcreaterole: boolean
                        rolcreatedb: boolean
                        rolcanlogin: boolean
                        rolreplication: boolean
                        rolconnlimit: integer
                        rolpassword: text
                        rolvaliduntil: timestamp with time zone
                        rolbypassrls: boolean
                        rolconfig: text[]
                        oid: oid
                pg_rules: view
                    + columns
                        schemaname: name
                        tablename: name
                        rulename: name
                        definition: text
                pg_seclabels: view
                    + columns
                        objoid: oid
                        classoid: oid
                        objsubid: integer
                        objtype: text
                        objnamespace: oid
                        objname: text
                        provider: text
                        label: text
                pg_sequences: view
                    + columns
                        schemaname: name
                        sequencename: name
                        sequenceowner: name
                        data_type: regtype
                        start_value: bigint
                        min_value: bigint
                        max_value: bigint
                        increment_by: bigint
                        cycle: boolean
                        cache_size: bigint
                        last_value: bigint
                pg_settings: view
                    + columns
                        name: text
                        setting: text
                        unit: text
                        category: text
                        short_desc: text
                        extra_desc: text
                        context: text
                        vartype: text
                        source: text
                        min_val: text
                        max_val: text
                        enumvals: text[]
                        boot_val: text
                        reset_val: text
                        sourcefile: text
                        sourceline: integer
                        pending_restart: boolean
                    + rules
                        pg_settings_n: rule instead of update
                        pg_settings_u: rule also update
                pg_shadow: view
                    + columns
                        usename: name
                        usesysid: oid
                        usecreatedb: boolean
                        usesuper: boolean
                        userepl: boolean
                        usebypassrls: boolean
                        passwd: text
                        valuntil: timestamp with time zone
                        useconfig: text[]
                pg_stat_activity: view
                    + columns
                        datid: oid
                        datname: name
                        pid: integer
                        usesysid: oid
                        usename: name
                        application_name: text
                        client_addr: inet
                        client_hostname: text
                        client_port: integer
                        backend_start: timestamp with time zone
                        xact_start: timestamp with time zone
                        query_start: timestamp with time zone
                        state_change: timestamp with time zone
                        wait_event_type: text
                        wait_event: text
                        state: text
                        backend_xid: xid
                        backend_xmin: xid
                        query: text
                        backend_type: text
                pg_stat_all_indexes: view
                    + columns
                        relid: oid
                        indexrelid: oid
                        schemaname: name
                        relname: name
                        indexrelname: name
                        idx_scan: bigint
                        idx_tup_read: bigint
                        idx_tup_fetch: bigint
                pg_stat_all_tables: view
                    + columns
                        relid: oid
                        schemaname: name
                        relname: name
                        seq_scan: bigint
                        seq_tup_read: bigint
                        idx_scan: bigint
                        idx_tup_fetch: bigint
                        n_tup_ins: bigint
                        n_tup_upd: bigint
                        n_tup_del: bigint
                        n_tup_hot_upd: bigint
                        n_live_tup: bigint
                        n_dead_tup: bigint
                        n_mod_since_analyze: bigint
                        last_vacuum: timestamp with time zone
                        last_autovacuum: timestamp with time zone
                        last_analyze: timestamp with time zone
                        last_autoanalyze: timestamp with time zone
                        vacuum_count: bigint
                        autovacuum_count: bigint
                        analyze_count: bigint
                        autoanalyze_count: bigint
                pg_stat_archiver: view
                    + columns
                        archived_count: bigint
                        last_archived_wal: text
                        last_archived_time: timestamp with time zone
                        failed_count: bigint
                        last_failed_wal: text
                        last_failed_time: timestamp with time zone
                        stats_reset: timestamp with time zone
                pg_stat_bgwriter: view
                    + columns
                        checkpoints_timed: bigint
                        checkpoints_req: bigint
                        checkpoint_write_time: double precision
                        checkpoint_sync_time: double precision
                        buffers_checkpoint: bigint
                        buffers_clean: bigint
                        maxwritten_clean: bigint
                        buffers_backend: bigint
                        buffers_backend_fsync: bigint
                        buffers_alloc: bigint
                        stats_reset: timestamp with time zone
                pg_stat_database: view
                    + columns
                        datid: oid
                        datname: name
                        numbackends: integer
                        xact_commit: bigint
                        xact_rollback: bigint
                        blks_read: bigint
                        blks_hit: bigint
                        tup_returned: bigint
                        tup_fetched: bigint
                        tup_inserted: bigint
                        tup_updated: bigint
                        tup_deleted: bigint
                        conflicts: bigint
                        temp_files: bigint
                        temp_bytes: bigint
                        deadlocks: bigint
                        checksum_failures: bigint
                        checksum_last_failure: timestamp with time zone
                        blk_read_time: double precision
                        blk_write_time: double precision
                        stats_reset: timestamp with time zone
                pg_stat_database_conflicts: view
                    + columns
                        datid: oid
                        datname: name
                        confl_tablespace: bigint
                        confl_lock: bigint
                        confl_snapshot: bigint
                        confl_bufferpin: bigint
                        confl_deadlock: bigint
                pg_stat_gssapi: view
                    + columns
                        pid: integer
                        gss_authenticated: boolean
                        principal: text
                        encrypted: boolean
                pg_stat_progress_cluster: view
                    + columns
                        pid: integer
                        datid: oid
                        datname: name
                        relid: oid
                        command: text
                        phase: text
                        cluster_index_relid: oid
                        heap_tuples_scanned: bigint
                        heap_tuples_written: bigint
                        heap_blks_total: bigint
                        heap_blks_scanned: bigint
                        index_rebuild_count: bigint
                pg_stat_progress_create_index: view
                    + columns
                        pid: integer
                        datid: oid
                        datname: name
                        relid: oid
                        index_relid: oid
                        command: text
                        phase: text
                        lockers_total: bigint
                        lockers_done: bigint
                        current_locker_pid: bigint
                        blocks_total: bigint
                        blocks_done: bigint
                        tuples_total: bigint
                        tuples_done: bigint
                        partitions_total: bigint
                        partitions_done: bigint
                pg_stat_progress_vacuum: view
                    + columns
                        pid: integer
                        datid: oid
                        datname: name
                        relid: oid
                        phase: text
                        heap_blks_total: bigint
                        heap_blks_scanned: bigint
                        heap_blks_vacuumed: bigint
                        index_vacuum_count: bigint
                        max_dead_tuples: bigint
                        num_dead_tuples: bigint
                pg_stat_replication: view
                    + columns
                        pid: integer
                        usesysid: oid
                        usename: name
                        application_name: text
                        client_addr: inet
                        client_hostname: text
                        client_port: integer
                        backend_start: timestamp with time zone
                        backend_xmin: xid
                        state: text
                        sent_lsn: pg_lsn
                        write_lsn: pg_lsn
                        flush_lsn: pg_lsn
                        replay_lsn: pg_lsn
                        write_lag: interval
                        flush_lag: interval
                        replay_lag: interval
                        sync_priority: integer
                        sync_state: text
                        reply_time: timestamp with time zone
                pg_stat_ssl: view
                    + columns
                        pid: integer
                        ssl: boolean
                        version: text
                        cipher: text
                        bits: integer
                        compression: boolean
                        client_dn: text
                        client_serial: numeric
                        issuer_dn: text
                pg_stat_subscription: view
                    + columns
                        subid: oid
                        subname: name
                        pid: integer
                        relid: oid
                        received_lsn: pg_lsn
                        last_msg_send_time: timestamp with time zone
                        last_msg_receipt_time: timestamp with time zone
                        latest_end_lsn: pg_lsn
                        latest_end_time: timestamp with time zone
                pg_stat_sys_indexes: view
                    + columns
                        relid: oid
                        indexrelid: oid
                        schemaname: name
                        relname: name
                        indexrelname: name
                        idx_scan: bigint
                        idx_tup_read: bigint
                        idx_tup_fetch: bigint
                pg_stat_sys_tables: view
                    + columns
                        relid: oid
                        schemaname: name
                        relname: name
                        seq_scan: bigint
                        seq_tup_read: bigint
                        idx_scan: bigint
                        idx_tup_fetch: bigint
                        n_tup_ins: bigint
                        n_tup_upd: bigint
                        n_tup_del: bigint
                        n_tup_hot_upd: bigint
                        n_live_tup: bigint
                        n_dead_tup: bigint
                        n_mod_since_analyze: bigint
                        last_vacuum: timestamp with time zone
                        last_autovacuum: timestamp with time zone
                        last_analyze: timestamp with time zone
                        last_autoanalyze: timestamp with time zone
                        vacuum_count: bigint
                        autovacuum_count: bigint
                        analyze_count: bigint
                        autoanalyze_count: bigint
                pg_stat_user_functions: view
                    + columns
                        funcid: oid
                        schemaname: name
                        funcname: name
                        calls: bigint
                        total_time: double precision
                        self_time: double precision
                pg_stat_user_indexes: view
                    + columns
                        relid: oid
                        indexrelid: oid
                        schemaname: name
                        relname: name
                        indexrelname: name
                        idx_scan: bigint
                        idx_tup_read: bigint
                        idx_tup_fetch: bigint
                pg_stat_user_tables: view
                    + columns
                        relid: oid
                        schemaname: name
                        relname: name
                        seq_scan: bigint
                        seq_tup_read: bigint
                        idx_scan: bigint
                        idx_tup_fetch: bigint
                        n_tup_ins: bigint
                        n_tup_upd: bigint
                        n_tup_del: bigint
                        n_tup_hot_upd: bigint
                        n_live_tup: bigint
                        n_dead_tup: bigint
                        n_mod_since_analyze: bigint
                        last_vacuum: timestamp with time zone
                        last_autovacuum: timestamp with time zone
                        last_analyze: timestamp with time zone
                        last_autoanalyze: timestamp with time zone
                        vacuum_count: bigint
                        autovacuum_count: bigint
                        analyze_count: bigint
                        autoanalyze_count: bigint
                pg_stat_wal_receiver: view
                    + columns
                        pid: integer
                        status: text
                        receive_start_lsn: pg_lsn
                        receive_start_tli: integer
                        received_lsn: pg_lsn
                        received_tli: integer
                        last_msg_send_time: timestamp with time zone
                        last_msg_receipt_time: timestamp with time zone
                        latest_end_lsn: pg_lsn
                        latest_end_time: timestamp with time zone
                        slot_name: text
                        sender_host: text
                        sender_port: integer
                        conninfo: text
                pg_stat_xact_all_tables: view
                    + columns
                        relid: oid
                        schemaname: name
                        relname: name
                        seq_scan: bigint
                        seq_tup_read: bigint
                        idx_scan: bigint
                        idx_tup_fetch: bigint
                        n_tup_ins: bigint
                        n_tup_upd: bigint
                        n_tup_del: bigint
                        n_tup_hot_upd: bigint
                pg_stat_xact_sys_tables: view
                    + columns
                        relid: oid
                        schemaname: name
                        relname: name
                        seq_scan: bigint
                        seq_tup_read: bigint
                        idx_scan: bigint
                        idx_tup_fetch: bigint
                        n_tup_ins: bigint
                        n_tup_upd: bigint
                        n_tup_del: bigint
                        n_tup_hot_upd: bigint
                pg_stat_xact_user_functions: view
                    + columns
                        funcid: oid
                        schemaname: name
                        funcname: name
                        calls: bigint
                        total_time: double precision
                        self_time: double precision
                pg_stat_xact_user_tables: view
                    + columns
                        relid: oid
                        schemaname: name
                        relname: name
                        seq_scan: bigint
                        seq_tup_read: bigint
                        idx_scan: bigint
                        idx_tup_fetch: bigint
                        n_tup_ins: bigint
                        n_tup_upd: bigint
                        n_tup_del: bigint
                        n_tup_hot_upd: bigint
                pg_statio_all_indexes: view
                    + columns
                        relid: oid
                        indexrelid: oid
                        schemaname: name
                        relname: name
                        indexrelname: name
                        idx_blks_read: bigint
                        idx_blks_hit: bigint
                pg_statio_all_sequences: view
                    + columns
                        relid: oid
                        schemaname: name
                        relname: name
                        blks_read: bigint
                        blks_hit: bigint
                pg_statio_all_tables: view
                    + columns
                        relid: oid
                        schemaname: name
                        relname: name
                        heap_blks_read: bigint
                        heap_blks_hit: bigint
                        idx_blks_read: bigint
                        idx_blks_hit: bigint
                        toast_blks_read: bigint
                        toast_blks_hit: bigint
                        tidx_blks_read: bigint
                        tidx_blks_hit: bigint
                pg_statio_sys_indexes: view
                    + columns
                        relid: oid
                        indexrelid: oid
                        schemaname: name
                        relname: name
                        indexrelname: name
                        idx_blks_read: bigint
                        idx_blks_hit: bigint
                pg_statio_sys_sequences: view
                    + columns
                        relid: oid
                        schemaname: name
                        relname: name
                        blks_read: bigint
                        blks_hit: bigint
                pg_statio_sys_tables: view
                    + columns
                        relid: oid
                        schemaname: name
                        relname: name
                        heap_blks_read: bigint
                        heap_blks_hit: bigint
                        idx_blks_read: bigint
                        idx_blks_hit: bigint
                        toast_blks_read: bigint
                        toast_blks_hit: bigint
                        tidx_blks_read: bigint
                        tidx_blks_hit: bigint
                pg_statio_user_indexes: view
                    + columns
                        relid: oid
                        indexrelid: oid
                        schemaname: name
                        relname: name
                        indexrelname: name
                        idx_blks_read: bigint
                        idx_blks_hit: bigint
                pg_statio_user_sequences: view
                    + columns
                        relid: oid
                        schemaname: name
                        relname: name
                        blks_read: bigint
                        blks_hit: bigint
                pg_statio_user_tables: view
                    + columns
                        relid: oid
                        schemaname: name
                        relname: name
                        heap_blks_read: bigint
                        heap_blks_hit: bigint
                        idx_blks_read: bigint
                        idx_blks_hit: bigint
                        toast_blks_read: bigint
                        toast_blks_hit: bigint
                        tidx_blks_read: bigint
                        tidx_blks_hit: bigint
                pg_stats: view
                    + columns
                        schemaname: name
                        tablename: name
                        attname: name
                        inherited: boolean
                        null_frac: real
                        avg_width: integer
                        n_distinct: real
                        most_common_vals: anyarray
                        most_common_freqs: real[]
                        histogram_bounds: anyarray
                        correlation: real
                        most_common_elems: anyarray
                        most_common_elem_freqs: real[]
                        elem_count_histogram: real[]
                pg_stats_ext: view
                    + columns
                        schemaname: name
                        tablename: name
                        statistics_schemaname: name
                        statistics_name: name
                        statistics_owner: name
                        attnames: name[]
                        kinds: "char"[]
                        n_distinct: pg_ndistinct
                        dependencies: pg_dependencies
                        most_common_vals: text[]
                        most_common_val_nulls: boolean[]
                        most_common_freqs: double precision[]
                        most_common_base_freqs: double precision[]
                pg_tables: view
                    + columns
                        schemaname: name
                        tablename: name
                        tableowner: name
                        tablespace: name
                        hasindexes: boolean
                        hasrules: boolean
                        hastriggers: boolean
                        rowsecurity: boolean
                pg_timezone_abbrevs: view
                    + columns
                        abbrev: text
                        utc_offset: interval
                        is_dst: boolean
                pg_timezone_names: view
                    + columns
                        name: text
                        abbrev: text
                        utc_offset: interval
                        is_dst: boolean
                pg_user: view
                    + columns
                        usename: name
                        usesysid: oid
                        usecreatedb: boolean
                        usesuper: boolean
                        userepl: boolean
                        usebypassrls: boolean
                        passwd: text
                        valuntil: timestamp with time zone
                        useconfig: text[]
                pg_user_mappings: view
                    + columns
                        umid: oid
                        srvid: oid
                        srvname: name
                        umuser: oid
                        usename: name
                        umoptions: text[]
                pg_views: view
                    + columns
                        schemaname: name
                        viewname: name
                        viewowner: name
                        definition: text
            + routines
                RI_FKey_cascade_del(): trigger function attributes: strict, cost 1, parallel safe
                    --  referential integrity ON DELETE CASCADE
                    . references
                        language = internal
                    + arguments
                        #1: return trigger
                RI_FKey_cascade_upd(): trigger function attributes: strict, cost 1, parallel safe
                    --  referential integrity ON UPDATE CASCADE
                    . references
                        language = internal
                    + arguments
                        #1: return trigger
                RI_FKey_check_ins(): trigger function attributes: strict, cost 1, parallel safe
                    --  referential integrity FOREIGN KEY ... REFERENCES
                    . references
                        language = internal
                    + arguments
                        #1: return trigger
                RI_FKey_check_upd(): trigger function attributes: strict, cost 1, parallel safe
                    --  referential integrity FOREIGN KEY ... REFERENCES
                    . references
                        language = internal
                    + arguments
                        #1: return trigger
                RI_FKey_noaction_del(): trigger function attributes: strict, cost 1, parallel safe
                    --  referential integrity ON DELETE NO ACTION
                    . references
                        language = internal
                    + arguments
                        #1: return trigger
                RI_FKey_noaction_upd(): trigger function attributes: strict, cost 1, parallel safe
                    --  referential integrity ON UPDATE NO ACTION
                    . references
                        language = internal
                    + arguments
                        #1: return trigger
                RI_FKey_restrict_del(): trigger function attributes: strict, cost 1, parallel safe
                    --  referential integrity ON DELETE RESTRICT
                    . references
                        language = internal
                    + arguments
                        #1: return trigger
                RI_FKey_restrict_upd(): trigger function attributes: strict, cost 1, parallel safe
                    --  referential integrity ON UPDATE RESTRICT
                    . references
                        language = internal
                    + arguments
                        #1: return trigger
                RI_FKey_setdefault_del(): trigger function attributes: strict, cost 1, parallel safe
                    --  referential integrity ON DELETE SET DEFAULT
                    . references
                        language = internal
                    + arguments
                        #1: return trigger
                RI_FKey_setdefault_upd(): trigger function attributes: strict, cost 1, parallel safe
                    --  referential integrity ON UPDATE SET DEFAULT
                    . references
                        language = internal
                    + arguments
                        #1: return trigger
                RI_FKey_setnull_del(): trigger function attributes: strict, cost 1, parallel safe
                    --  referential integrity ON DELETE SET NULL
                    . references
                        language = internal
                    + arguments
                        #1: return trigger
                RI_FKey_setnull_upd(): trigger function attributes: strict, cost 1, parallel safe
                    --  referential integrity ON UPDATE SET NULL
                    . references
                        language = internal
                    + arguments
                        #1: return trigger
                abbrev(cidr): function attributes: strict, cost 1, parallel safe
                    --  abbreviated display of cidr value
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return text
                        #2: in cidr
                abbrev(inet): function attributes: strict, cost 1, parallel safe
                    --  abbreviated display of inet value
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return text
                        #2: in inet
                abs(bigint): function attributes: strict, cost 1, parallel safe
                    --  absolute value
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bigint
                        #2: in bigint
                abs(double precision): function attributes: strict, cost 1, parallel safe
                    --  absolute value
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return double precision
                        #2: in double precision
                abs(integer): function attributes: strict, cost 1, parallel safe
                    --  absolute value
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return integer
                        #2: in integer
                abs(numeric): function attributes: strict, cost 1, parallel safe
                    --  absolute value
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return numeric
                        #2: in numeric
                abs(real): function attributes: strict, cost 1, parallel safe
                    --  absolute value
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return real
                        #2: in real
                abs(smallint): function attributes: strict, cost 1, parallel safe
                    --  absolute value
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return smallint
                        #2: in smallint
                aclcontains(aclitem[],aclitem): function attributes: strict, cost 1, parallel safe
                    --  contains
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in aclitem[]
                        #3: in aclitem
                acldefault("char",oid): function attributes: strict, cost 1, parallel safe
                    --  show hardwired default privileges, primarily for use by the information schema
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return aclitem[]
                        #2: in "char"
                        #3: in oid
                aclexplode(aclitem[]): function attributes: strict, cost 1, parallel safe, rows 10
                    --  convert ACL item array to table, primarily for use by information schema
                    . properties
                        returns_set +
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return setof record
                        acl: in aclitem[]
                        grantor: out oid
                        grantee: out oid
                        privilege_type: out text
                        is_grantable: out boolean
                aclinsert(aclitem[],aclitem): function attributes: strict, cost 1, parallel safe
                    --  add/update ACL item
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return aclitem[]
                        #2: in aclitem[]
                        #3: in aclitem
                aclitemeq(aclitem,aclitem): function attributes: strict, cost 1, parallel safe
                    --  implementation of = operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in aclitem
                        #3: in aclitem
                aclitemin(cstring): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return aclitem
                        #2: in cstring
                aclitemout(aclitem): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return cstring
                        #2: in aclitem
                aclremove(aclitem[],aclitem): function attributes: strict, cost 1, parallel safe
                    --  remove ACL item
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return aclitem[]
                        #2: in aclitem[]
                        #3: in aclitem
                acos(double precision): function attributes: strict, cost 1, parallel safe
                    --  arccosine
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return double precision
                        #2: in double precision
                acosd(double precision): function attributes: strict, cost 1, parallel safe
                    --  arccosine, degrees
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return double precision
                        #2: in double precision
                acosh(double precision): function attributes: strict, cost 1, parallel safe
                    --  inverse hyperbolic cosine
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return double precision
                        #2: in double precision
                age(timestamp with time zone): function attributes: strict, cost 1, parallel safe
                    --  date difference from today preserving months and years
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = sql
                    + arguments
                        #1: return interval
                        #2: in timestamp with time zone
                age(timestamp with time zone,timestamp with time zone): function attributes: strict, cost 1, parallel safe
                    --  date difference preserving months and years
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return interval
                        #2: in timestamp with time zone
                        #3: in timestamp with time zone
                age(timestamp): function attributes: strict, cost 1, parallel safe
                    --  date difference from today preserving months and years
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = sql
                    + arguments
                        #1: return interval
                        #2: in timestamp
                age(timestamp,timestamp): function attributes: strict, cost 1, parallel safe
                    --  date difference preserving months and years
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return interval
                        #2: in timestamp
                        #3: in timestamp
                age(xid): function attributes: strict, cost 1, parallel restricted
                    --  age of a transaction ID, in transactions before current transaction
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return integer
                        #2: in xid
                amvalidate(oid): function attributes: strict, cost 1, parallel safe
                    --  validate an operator class
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in oid
                any_in(cstring): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return "any"
                        #2: in cstring
                any_out("any"): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return cstring
                        #2: in "any"
                anyarray_in(cstring): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return anyarray
                        #2: in cstring
                anyarray_out(anyarray): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return cstring
                        #2: in anyarray
                anyarray_recv(internal): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return anyarray
                        #2: in internal
                anyarray_send(anyarray): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bytea
                        #2: in anyarray
                anyelement_in(cstring): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return anyelement
                        #2: in cstring
                anyelement_out(anyelement): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return cstring
                        #2: in anyelement
                anyenum_in(cstring): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return anyenum
                        #2: in cstring
                anyenum_out(anyenum): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return cstring
                        #2: in anyenum
                anynonarray_in(cstring): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return anynonarray
                        #2: in cstring
                anynonarray_out(anynonarray): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return cstring
                        #2: in anynonarray
                anyrange_in(cstring,oid,integer): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return anyrange
                        #2: in cstring
                        #3: in oid
                        #4: in integer
                anyrange_out(anyrange): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return cstring
                        #2: in anyrange
                anytextcat(anynonarray,text): function attributes: strict, cost 1, parallel safe
                    --  implementation of || operator
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = sql
                    + arguments
                        #1: return text
                        #2: in anynonarray
                        #3: in text
                area(box): function attributes: strict, cost 1, parallel safe
                    --  box area
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return double precision
                        #2: in box
                area(circle): function attributes: strict, cost 1, parallel safe
                    --  area of circle
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return double precision
                        #2: in circle
                area(path): function attributes: strict, cost 1, parallel safe
                    --  area of a closed path
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return double precision
                        #2: in path
                areajoinsel(internal,oid,internal,smallint,internal): function attributes: strict, cost 1, parallel safe
                    --  join selectivity for area-comparison operators
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return double precision
                        #2: in internal
                        #3: in oid
                        #4: in internal
                        #5: in smallint
                        #6: in internal
                areasel(internal,oid,internal,integer): function attributes: strict, cost 1, parallel safe
                    --  restriction selectivity for area-comparison operators
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return double precision
                        #2: in internal
                        #3: in oid
                        #4: in internal
                        #5: in integer
                array_agg_array_finalfn(internal,anyarray): function attributes: cost 1, parallel safe
                    --  aggregate final function
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return anyarray
                        #2: in internal
                        #3: in anyarray
                array_agg_array_transfn(internal,anyarray): function attributes: cost 1, parallel safe
                    --  aggregate transition function
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return internal
                        #2: in internal
                        #3: in anyarray
                array_agg_finalfn(internal,anynonarray): function attributes: cost 1, parallel safe
                    --  aggregate final function
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return anyarray
                        #2: in internal
                        #3: in anynonarray
                array_agg_transfn(internal,anynonarray): function attributes: cost 1, parallel safe
                    --  aggregate transition function
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return internal
                        #2: in internal
                        #3: in anynonarray
                array_append(anyarray,anyelement): function attributes: cost 1, parallel safe
                    --  append element onto end of array
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return anyarray
                        #2: in anyarray
                        #3: in anyelement
                array_cat(anyarray,anyarray): function attributes: cost 1, parallel safe
                    --  implementation of || operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return anyarray
                        #2: in anyarray
                        #3: in anyarray
                array_dims(anyarray): function attributes: strict, cost 1, parallel safe
                    --  array dimensions
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return text
                        #2: in anyarray
                array_eq(anyarray,anyarray): function attributes: strict, cost 1, parallel safe
                    --  implementation of = operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in anyarray
                        #3: in anyarray
                array_fill(anyelement,integer[]): function attributes: cost 1, parallel safe
                    --  array constructor with value
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return anyarray
                        #2: in anyelement
                        #3: in integer[]
                array_fill(anyelement,integer[],integer[]): function attributes: cost 1, parallel safe
                    --  array constructor with value
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return anyarray
                        #2: in anyelement
                        #3: in integer[]
                        #4: in integer[]
                array_ge(anyarray,anyarray): function attributes: strict, cost 1, parallel safe
                    --  implementation of >= operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in anyarray
                        #3: in anyarray
                array_gt(anyarray,anyarray): function attributes: strict, cost 1, parallel safe
                    --  implementation of > operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in anyarray
                        #3: in anyarray
                array_in(cstring,oid,integer): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return anyarray
                        #2: in cstring
                        #3: in oid
                        #4: in integer
                array_larger(anyarray,anyarray): function attributes: strict, cost 1, parallel safe
                    --  larger of two
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return anyarray
                        #2: in anyarray
                        #3: in anyarray
                array_le(anyarray,anyarray): function attributes: strict, cost 1, parallel safe
                    --  implementation of <= operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in anyarray
                        #3: in anyarray
                array_length(anyarray,integer): function attributes: strict, cost 1, parallel safe
                    --  array length
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return integer
                        #2: in anyarray
                        #3: in integer
                array_lower(anyarray,integer): function attributes: strict, cost 1, parallel safe
                    --  array lower dimension
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return integer
                        #2: in anyarray
                        #3: in integer
                array_lt(anyarray,anyarray): function attributes: strict, cost 1, parallel safe
                    --  implementation of < operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in anyarray
                        #3: in anyarray
                array_ndims(anyarray): function attributes: strict, cost 1, parallel safe
                    --  number of array dimensions
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return integer
                        #2: in anyarray
                array_ne(anyarray,anyarray): function attributes: strict, cost 1, parallel safe
                    --  implementation of <> operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in anyarray
                        #3: in anyarray
                array_out(anyarray): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return cstring
                        #2: in anyarray
                array_position(anyarray,anyelement): function attributes: cost 1, parallel safe
                    --  returns an offset of value in array
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return integer
                        #2: in anyarray
                        #3: in anyelement
                array_position(anyarray,anyelement,integer): function attributes: cost 1, parallel safe
                    --  returns an offset of value in array with start index
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return integer
                        #2: in anyarray
                        #3: in anyelement
                        #4: in integer
                array_positions(anyarray,anyelement): function attributes: cost 1, parallel safe
                    --  returns an array of offsets of some value in array
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return integer[]
                        #2: in anyarray
                        #3: in anyelement
                array_prepend(anyelement,anyarray): function attributes: cost 1, parallel safe
                    --  prepend element onto front of array
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return anyarray
                        #2: in anyelement
                        #3: in anyarray
                array_recv(internal,oid,integer): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return anyarray
                        #2: in internal
                        #3: in oid
                        #4: in integer
                array_remove(anyarray,anyelement): function attributes: cost 1, parallel safe
                    --  remove any occurrences of an element from an array
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return anyarray
                        #2: in anyarray
                        #3: in anyelement
                array_replace(anyarray,anyelement,anyelement): function attributes: cost 1, parallel safe
                    --  replace any occurrences of an element in an array
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return anyarray
                        #2: in anyarray
                        #3: in anyelement
                        #4: in anyelement
                array_send(anyarray): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bytea
                        #2: in anyarray
                array_smaller(anyarray,anyarray): function attributes: strict, cost 1, parallel safe
                    --  smaller of two
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return anyarray
                        #2: in anyarray
                        #3: in anyarray
                array_to_json(anyarray): function attributes: strict, cost 1, parallel safe
                    --  map array to json
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return json
                        #2: in anyarray
                array_to_json(anyarray,boolean): function attributes: strict, cost 1, parallel safe
                    --  map array to json with optional pretty printing
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return json
                        #2: in anyarray
                        #3: in boolean
                array_to_string(anyarray,text): function attributes: strict, cost 1, parallel safe
                    --  concatenate array elements, using delimiter, into text
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return text
                        #2: in anyarray
                        #3: in text
                array_to_string(anyarray,text,text): function attributes: cost 1, parallel safe
                    --  concatenate array elements, using delimiter and null string, into text
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return text
                        #2: in anyarray
                        #3: in text
                        #4: in text
                array_to_tsvector(text[]): function attributes: strict, cost 1, parallel safe
                    --  build tsvector from array of lexemes
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return tsvector
                        #2: in text[]
                array_typanalyze(internal): function attributes: strict, cost 1, parallel safe
                    --  array typanalyze
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in internal
                array_unnest_support(internal): function attributes: strict, cost 1, parallel safe
                    --  planner support for array_unnest
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return internal
                        #2: in internal
                array_upper(anyarray,integer): function attributes: strict, cost 1, parallel safe
                    --  array upper dimension
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return integer
                        #2: in anyarray
                        #3: in integer
                arraycontained(anyarray,anyarray): function attributes: strict, cost 1, parallel safe
                    --  implementation of <@ operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in anyarray
                        #3: in anyarray
                arraycontains(anyarray,anyarray): function attributes: strict, cost 1, parallel safe
                    --  implementation of @> operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in anyarray
                        #3: in anyarray
                arraycontjoinsel(internal,oid,internal,smallint,internal): function attributes: strict, cost 1, parallel safe
                    --  join selectivity for array-containment operators
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return double precision
                        #2: in internal
                        #3: in oid
                        #4: in internal
                        #5: in smallint
                        #6: in internal
                arraycontsel(internal,oid,internal,integer): function attributes: strict, cost 1, parallel safe
                    --  restriction selectivity for array-containment operators
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return double precision
                        #2: in internal
                        #3: in oid
                        #4: in internal
                        #5: in integer
                arrayoverlap(anyarray,anyarray): function attributes: strict, cost 1, parallel safe
                    --  implementation of && operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in anyarray
                        #3: in anyarray
                ascii(text): function attributes: strict, cost 1, parallel safe
                    --  convert first char to int4
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return integer
                        #2: in text
                ascii_to_mic(integer,integer,cstring,internal,integer): function attributes: strict, parallel safe
                    --  internal conversion function for SQL_ASCII to MULE_INTERNAL
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = c
                    + arguments
                        #1: return void
                        #2: in integer
                        #3: in integer
                        #4: in cstring
                        #5: in internal
                        #6: in integer
                ascii_to_utf8(integer,integer,cstring,internal,integer): function attributes: strict, parallel safe
                    --  internal conversion function for SQL_ASCII to UTF8
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = c
                    + arguments
                        #1: return void
                        #2: in integer
                        #3: in integer
                        #4: in cstring
                        #5: in internal
                        #6: in integer
                asin(double precision): function attributes: strict, cost 1, parallel safe
                    --  arcsine
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return double precision
                        #2: in double precision
                asind(double precision): function attributes: strict, cost 1, parallel safe
                    --  arcsine, degrees
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return double precision
                        #2: in double precision
                asinh(double precision): function attributes: strict, cost 1, parallel safe
                    --  inverse hyperbolic sine
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return double precision
                        #2: in double precision
                atan(double precision): function attributes: strict, cost 1, parallel safe
                    --  arctangent
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return double precision
                        #2: in double precision
                atan2(double precision,double precision): function attributes: strict, cost 1, parallel safe
                    --  arctangent, two arguments
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return double precision
                        #2: in double precision
                        #3: in double precision
                atan2d(double precision,double precision): function attributes: strict, cost 1, parallel safe
                    --  arctangent, two arguments, degrees
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return double precision
                        #2: in double precision
                        #3: in double precision
                atand(double precision): function attributes: strict, cost 1, parallel safe
                    --  arctangent, degrees
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return double precision
                        #2: in double precision
                atanh(double precision): function attributes: strict, cost 1, parallel safe
                    --  inverse hyperbolic tangent
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return double precision
                        #2: in double precision
                bernoulli(internal): function attributes: strict, cost 1, parallel safe
                    --  BERNOULLI tablesample method handler
                    . references
                        language = internal
                    + arguments
                        #1: return tsm_handler
                        #2: in internal
                big5_to_euc_tw(integer,integer,cstring,internal,integer): function attributes: strict, parallel safe
                    --  internal conversion function for BIG5 to EUC_TW
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = c
                    + arguments
                        #1: return void
                        #2: in integer
                        #3: in integer
                        #4: in cstring
                        #5: in internal
                        #6: in integer
                big5_to_mic(integer,integer,cstring,internal,integer): function attributes: strict, parallel safe
                    --  internal conversion function for BIG5 to MULE_INTERNAL
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = c
                    + arguments
                        #1: return void
                        #2: in integer
                        #3: in integer
                        #4: in cstring
                        #5: in internal
                        #6: in integer
                big5_to_utf8(integer,integer,cstring,internal,integer): function attributes: strict, parallel safe
                    --  internal conversion function for BIG5 to UTF8
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = c
                    + arguments
                        #1: return void
                        #2: in integer
                        #3: in integer
                        #4: in cstring
                        #5: in internal
                        #6: in integer
                binary_upgrade_create_empty_extension(text,text,boolean,text,oid[],text[],text[]): function attributes: cost 1
                    --  for use by pg_upgrade
                    . references
                        language = internal
                    + arguments
                        #1: return void
                        #2: in text
                        #3: in text
                        #4: in boolean
                        #5: in text
                        #6: in oid[]
                        #7: in text[]
                        #8: in text[]
                binary_upgrade_set_missing_value(oid,text,text): function attributes: strict, cost 1
                    --  for use by pg_upgrade
                    . references
                        language = internal
                    + arguments
                        #1: return void
                        #2: in oid
                        #3: in text
                        #4: in text
                binary_upgrade_set_next_array_pg_type_oid(oid): function attributes: strict, cost 1, parallel restricted
                    --  for use by pg_upgrade
                    . references
                        language = internal
                    + arguments
                        #1: return void
                        #2: in oid
                binary_upgrade_set_next_heap_pg_class_oid(oid): function attributes: strict, cost 1, parallel restricted
                    --  for use by pg_upgrade
                    . references
                        language = internal
                    + arguments
                        #1: return void
                        #2: in oid
                binary_upgrade_set_next_index_pg_class_oid(oid): function attributes: strict, cost 1, parallel restricted
                    --  for use by pg_upgrade
                    . references
                        language = internal
                    + arguments
                        #1: return void
                        #2: in oid
                binary_upgrade_set_next_pg_authid_oid(oid): function attributes: strict, cost 1, parallel restricted
                    --  for use by pg_upgrade
                    . references
                        language = internal
                    + arguments
                        #1: return void
                        #2: in oid
                binary_upgrade_set_next_pg_enum_oid(oid): function attributes: strict, cost 1, parallel restricted
                    --  for use by pg_upgrade
                    . references
                        language = internal
                    + arguments
                        #1: return void
                        #2: in oid
                binary_upgrade_set_next_pg_type_oid(oid): function attributes: strict, cost 1, parallel restricted
                    --  for use by pg_upgrade
                    . references
                        language = internal
                    + arguments
                        #1: return void
                        #2: in oid
                binary_upgrade_set_next_toast_pg_class_oid(oid): function attributes: strict, cost 1, parallel restricted
                    --  for use by pg_upgrade
                    . references
                        language = internal
                    + arguments
                        #1: return void
                        #2: in oid
                binary_upgrade_set_next_toast_pg_type_oid(oid): function attributes: strict, cost 1, parallel restricted
                    --  for use by pg_upgrade
                    . references
                        language = internal
                    + arguments
                        #1: return void
                        #2: in oid
                binary_upgrade_set_record_init_privs(boolean): function attributes: strict, cost 1, parallel restricted
                    --  for use by pg_upgrade
                    . references
                        language = internal
                    + arguments
                        #1: return void
                        #2: in boolean
                bit(bigint,integer): function attributes: strict, cost 1, parallel safe
                    --  convert int8 to bitstring
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bit
                        #2: in bigint
                        #3: in integer
                bit(bit,integer,boolean): function attributes: strict, cost 1, parallel safe
                    --  adjust bit() to typmod length
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bit
                        #2: in bit
                        #3: in integer
                        #4: in boolean
                bit(integer,integer): function attributes: strict, cost 1, parallel safe
                    --  convert int4 to bitstring
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bit
                        #2: in integer
                        #3: in integer
                bit_in(cstring,oid,integer): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bit
                        #2: in cstring
                        #3: in oid
                        #4: in integer
                bit_length(bit): function attributes: strict, cost 1, parallel safe
                    --  length in bits
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = sql
                    + arguments
                        #1: return integer
                        #2: in bit
                bit_length(bytea): function attributes: strict, cost 1, parallel safe
                    --  length in bits
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = sql
                    + arguments
                        #1: return integer
                        #2: in bytea
                bit_length(text): function attributes: strict, cost 1, parallel safe
                    --  length in bits
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = sql
                    + arguments
                        #1: return integer
                        #2: in text
                bit_out(bit): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return cstring
                        #2: in bit
                bit_recv(internal,oid,integer): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bit
                        #2: in internal
                        #3: in oid
                        #4: in integer
                bit_send(bit): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bytea
                        #2: in bit
                bitand(bit,bit): function attributes: strict, cost 1, parallel safe
                    --  implementation of & operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bit
                        #2: in bit
                        #3: in bit
                bitcat(bit varying,bit varying): function attributes: strict, cost 1, parallel safe
                    --  implementation of || operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bit varying
                        #2: in bit varying
                        #3: in bit varying
                bitcmp(bit,bit): function attributes: leakproof, strict, cost 1, parallel safe
                    --  less-equal-greater
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return integer
                        #2: in bit
                        #3: in bit
                biteq(bit,bit): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of = operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in bit
                        #3: in bit
                bitge(bit,bit): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of >= operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in bit
                        #3: in bit
                bitgt(bit,bit): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of > operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in bit
                        #3: in bit
                bitle(bit,bit): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of <= operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in bit
                        #3: in bit
                bitlt(bit,bit): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of < operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in bit
                        #3: in bit
                bitne(bit,bit): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of <> operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in bit
                        #3: in bit
                bitnot(bit): function attributes: strict, cost 1, parallel safe
                    --  implementation of ~ operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bit
                        #2: in bit
                bitor(bit,bit): function attributes: strict, cost 1, parallel safe
                    --  implementation of | operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bit
                        #2: in bit
                        #3: in bit
                bitshiftleft(bit,integer): function attributes: strict, cost 1, parallel safe
                    --  implementation of << operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bit
                        #2: in bit
                        #3: in integer
                bitshiftright(bit,integer): function attributes: strict, cost 1, parallel safe
                    --  implementation of >> operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bit
                        #2: in bit
                        #3: in integer
                bittypmodin(cstring[]): function attributes: strict, cost 1, parallel safe
                    --  I/O typmod
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return integer
                        #2: in cstring[]
                bittypmodout(integer): function attributes: strict, cost 1, parallel safe
                    --  I/O typmod
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return cstring
                        #2: in integer
                bitxor(bit,bit): function attributes: strict, cost 1, parallel safe
                    --  implementation of # operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bit
                        #2: in bit
                        #3: in bit
                bool(integer): function attributes: strict, cost 1, parallel safe
                    --  convert int4 to boolean
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in integer
                bool(jsonb): function attributes: strict, cost 1, parallel safe
                    --  convert jsonb to boolean
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in jsonb
                bool_accum(internal,boolean): function attributes: cost 1, parallel safe
                    --  aggregate transition function
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return internal
                        #2: in internal
                        #3: in boolean
                bool_accum_inv(internal,boolean): function attributes: cost 1, parallel safe
                    --  aggregate transition function
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return internal
                        #2: in internal
                        #3: in boolean
                bool_alltrue(internal): function attributes: strict, cost 1, parallel safe
                    --  aggregate final function
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in internal
                bool_anytrue(internal): function attributes: strict, cost 1, parallel safe
                    --  aggregate final function
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in internal
                booland_statefunc(boolean,boolean): function attributes: strict, cost 1, parallel safe
                    --  aggregate transition function
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in boolean
                        #3: in boolean
                booleq(boolean,boolean): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of = operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in boolean
                        #3: in boolean
                boolge(boolean,boolean): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of >= operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in boolean
                        #3: in boolean
                boolgt(boolean,boolean): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of > operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in boolean
                        #3: in boolean
                boolin(cstring): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in cstring
                boolle(boolean,boolean): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of <= operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in boolean
                        #3: in boolean
                boollt(boolean,boolean): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of < operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in boolean
                        #3: in boolean
                boolne(boolean,boolean): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of <> operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in boolean
                        #3: in boolean
                boolor_statefunc(boolean,boolean): function attributes: strict, cost 1, parallel safe
                    --  aggregate transition function
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in boolean
                        #3: in boolean
                boolout(boolean): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return cstring
                        #2: in boolean
                boolrecv(internal): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in internal
                boolsend(boolean): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bytea
                        #2: in boolean
                bound_box(box,box): function attributes: strict, cost 1, parallel safe
                    --  bounding box of two boxes
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return box
                        #2: in box
                        #3: in box
                box(circle): function attributes: strict, cost 1, parallel safe
                    --  convert circle to box
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return box
                        #2: in circle
                box(point): function attributes: strict, cost 1, parallel safe
                    --  convert point to empty box
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return box
                        #2: in point
                box(point,point): function attributes: strict, cost 1, parallel safe
                    --  convert points to box
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return box
                        #2: in point
                        #3: in point
                box(polygon): function attributes: strict, cost 1, parallel safe
                    --  convert polygon to bounding box
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return box
                        #2: in polygon
                box_above(box,box): function attributes: strict, cost 1, parallel safe
                    --  implementation of |>> operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in box
                        #3: in box
                box_above_eq(box,box): function attributes: strict, cost 1, parallel safe
                    --  implementation of >^ operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in box
                        #3: in box
                box_add(box,point): function attributes: strict, cost 1, parallel safe
                    --  implementation of + operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return box
                        #2: in box
                        #3: in point
                box_below(box,box): function attributes: strict, cost 1, parallel safe
                    --  implementation of <<| operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in box
                        #3: in box
                box_below_eq(box,box): function attributes: strict, cost 1, parallel safe
                    --  implementation of <^ operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in box
                        #3: in box
                box_center(box): function attributes: strict, cost 1, parallel safe
                    --  implementation of @@ operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return point
                        #2: in box
                box_contain(box,box): function attributes: strict, cost 1, parallel safe
                    --  implementation of @> operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in box
                        #3: in box
                box_contain_pt(box,point): function attributes: strict, cost 1, parallel safe
                    --  implementation of @> operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in box
                        #3: in point
                box_contained(box,box): function attributes: strict, cost 1, parallel safe
                    --  implementation of <@ operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in box
                        #3: in box
                box_distance(box,box): function attributes: strict, cost 1, parallel safe
                    --  implementation of <-> operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return double precision
                        #2: in box
                        #3: in box
                box_div(box,point): function attributes: strict, cost 1, parallel safe
                    --  implementation of / operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return box
                        #2: in box
                        #3: in point
                box_eq(box,box): function attributes: strict, cost 1, parallel safe
                    --  implementation of = operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in box
                        #3: in box
                box_ge(box,box): function attributes: strict, cost 1, parallel safe
                    --  implementation of >= operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in box
                        #3: in box
                box_gt(box,box): function attributes: strict, cost 1, parallel safe
                    --  implementation of > operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in box
                        #3: in box
                box_in(cstring): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return box
                        #2: in cstring
                box_intersect(box,box): function attributes: strict, cost 1, parallel safe
                    --  implementation of # operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return box
                        #2: in box
                        #3: in box
                box_le(box,box): function attributes: strict, cost 1, parallel safe
                    --  implementation of <= operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in box
                        #3: in box
                box_left(box,box): function attributes: strict, cost 1, parallel safe
                    --  implementation of << operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in box
                        #3: in box
                box_lt(box,box): function attributes: strict, cost 1, parallel safe
                    --  implementation of < operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in box
                        #3: in box
                box_mul(box,point): function attributes: strict, cost 1, parallel safe
                    --  implementation of * operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return box
                        #2: in box
                        #3: in point
                box_out(box): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return cstring
                        #2: in box
                box_overabove(box,box): function attributes: strict, cost 1, parallel safe
                    --  implementation of |&> operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in box
                        #3: in box
                box_overbelow(box,box): function attributes: strict, cost 1, parallel safe
                    --  implementation of &<| operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in box
                        #3: in box
                box_overlap(box,box): function attributes: strict, cost 1, parallel safe
                    --  implementation of && operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in box
                        #3: in box
                box_overleft(box,box): function attributes: strict, cost 1, parallel safe
                    --  implementation of &< operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in box
                        #3: in box
                box_overright(box,box): function attributes: strict, cost 1, parallel safe
                    --  implementation of &> operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in box
                        #3: in box
                box_recv(internal): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return box
                        #2: in internal
                box_right(box,box): function attributes: strict, cost 1, parallel safe
                    --  implementation of >> operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in box
                        #3: in box
                box_same(box,box): function attributes: strict, cost 1, parallel safe
                    --  implementation of ~= operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in box
                        #3: in box
                box_send(box): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bytea
                        #2: in box
                box_sub(box,point): function attributes: strict, cost 1, parallel safe
                    --  implementation of - operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return box
                        #2: in box
                        #3: in point
                bpchar("char"): function attributes: strict, cost 1, parallel safe
                    --  convert char to char(n)
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return char
                        #2: in "char"
                bpchar(char,integer,boolean): function attributes: strict, cost 1, parallel safe
                    --  adjust char() to typmod length
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return char
                        #2: in char
                        #3: in integer
                        #4: in boolean
                bpchar(name): function attributes: strict, cost 1, parallel safe
                    --  convert name to char(n)
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return char
                        #2: in name
                bpchar_larger(char,char): function attributes: leakproof, strict, cost 1, parallel safe
                    --  larger of two
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return char
                        #2: in char
                        #3: in char
                bpchar_pattern_ge(char,char): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of ~>=~ operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in char
                        #3: in char
                bpchar_pattern_gt(char,char): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of ~>~ operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in char
                        #3: in char
                bpchar_pattern_le(char,char): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of ~<=~ operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in char
                        #3: in char
                bpchar_pattern_lt(char,char): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of ~<~ operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in char
                        #3: in char
                bpchar_smaller(char,char): function attributes: leakproof, strict, cost 1, parallel safe
                    --  smaller of two
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return char
                        #2: in char
                        #3: in char
                bpchar_sortsupport(internal): function attributes: strict, cost 1, parallel safe
                    --  sort support
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return void
                        #2: in internal
                bpcharcmp(char,char): function attributes: leakproof, strict, cost 1, parallel safe
                    --  less-equal-greater
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return integer
                        #2: in char
                        #3: in char
                bpchareq(char,char): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of = operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in char
                        #3: in char
                bpcharge(char,char): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of >= operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in char
                        #3: in char
                bpchargt(char,char): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of > operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in char
                        #3: in char
                bpchariclike(char,text): function attributes: strict, cost 1, parallel safe
                    --  implementation of ~~* operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in char
                        #3: in text
                bpcharicnlike(char,text): function attributes: strict, cost 1, parallel safe
                    --  implementation of !~~* operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in char
                        #3: in text
                bpcharicregexeq(char,text): function attributes: strict, cost 1, parallel safe
                    --  implementation of ~* operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in char
                        #3: in text
                bpcharicregexne(char,text): function attributes: strict, cost 1, parallel safe
                    --  implementation of !~* operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in char
                        #3: in text
                bpcharin(cstring,oid,integer): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return char
                        #2: in cstring
                        #3: in oid
                        #4: in integer
                bpcharle(char,char): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of <= operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in char
                        #3: in char
                bpcharlike(char,text): function attributes: strict, cost 1, parallel safe
                    --  implementation of ~~ operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in char
                        #3: in text
                bpcharlt(char,char): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of < operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in char
                        #3: in char
                bpcharne(char,char): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of <> operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in char
                        #3: in char
                bpcharnlike(char,text): function attributes: strict, cost 1, parallel safe
                    --  implementation of !~~ operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in char
                        #3: in text
                bpcharout(char): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return cstring
                        #2: in char
                bpcharrecv(internal,oid,integer): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return char
                        #2: in internal
                        #3: in oid
                        #4: in integer
                bpcharregexeq(char,text): function attributes: strict, cost 1, parallel safe
                    --  implementation of ~ operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in char
                        #3: in text
                bpcharregexne(char,text): function attributes: strict, cost 1, parallel safe
                    --  implementation of !~ operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in char
                        #3: in text
                bpcharsend(char): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bytea
                        #2: in char
                bpchartypmodin(cstring[]): function attributes: strict, cost 1, parallel safe
                    --  I/O typmod
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return integer
                        #2: in cstring[]
                bpchartypmodout(integer): function attributes: strict, cost 1, parallel safe
                    --  I/O typmod
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return cstring
                        #2: in integer
                brin_desummarize_range(regclass,bigint): function attributes: strict, cost 1
                    --  brin: desummarize page range
                    . references
                        language = internal
                    + arguments
                        #1: return void
                        #2: in regclass
                        #3: in bigint
                brin_inclusion_add_value(internal,internal,internal,internal): function attributes: strict, cost 1, parallel safe
                    --  BRIN inclusion support
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in internal
                        #3: in internal
                        #4: in internal
                        #5: in internal
                brin_inclusion_consistent(internal,internal,internal): function attributes: strict, cost 1, parallel safe
                    --  BRIN inclusion support
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in internal
                        #3: in internal
                        #4: in internal
                brin_inclusion_opcinfo(internal): function attributes: strict, cost 1, parallel safe
                    --  BRIN inclusion support
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return internal
                        #2: in internal
                brin_inclusion_union(internal,internal,internal): function attributes: strict, cost 1, parallel safe
                    --  BRIN inclusion support
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in internal
                        #3: in internal
                        #4: in internal
                brin_minmax_add_value(internal,internal,internal,internal): function attributes: strict, cost 1, parallel safe
                    --  BRIN minmax support
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in internal
                        #3: in internal
                        #4: in internal
                        #5: in internal
                brin_minmax_consistent(internal,internal,internal): function attributes: strict, cost 1, parallel safe
                    --  BRIN minmax support
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in internal
                        #3: in internal
                        #4: in internal
                brin_minmax_opcinfo(internal): function attributes: strict, cost 1, parallel safe
                    --  BRIN minmax support
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return internal
                        #2: in internal
                brin_minmax_union(internal,internal,internal): function attributes: strict, cost 1, parallel safe
                    --  BRIN minmax support
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in internal
                        #3: in internal
                        #4: in internal
                brin_summarize_new_values(regclass): function attributes: strict, cost 1
                    --  brin: standalone scan new table pages
                    . references
                        language = internal
                    + arguments
                        #1: return integer
                        #2: in regclass
                brin_summarize_range(regclass,bigint): function attributes: strict, cost 1
                    --  brin: standalone scan new table pages
                    . references
                        language = internal
                    + arguments
                        #1: return integer
                        #2: in regclass
                        #3: in bigint
                brinhandler(internal): function attributes: strict, cost 1, parallel safe
                    --  brin index access method handler
                    . references
                        language = internal
                    + arguments
                        #1: return index_am_handler
                        #2: in internal
                broadcast(inet): function attributes: strict, cost 1, parallel safe
                    --  broadcast address of network
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return inet
                        #2: in inet
                btarraycmp(anyarray,anyarray): function attributes: strict, cost 1, parallel safe
                    --  less-equal-greater
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return integer
                        #2: in anyarray
                        #3: in anyarray
                btboolcmp(boolean,boolean): function attributes: leakproof, strict, cost 1, parallel safe
                    --  less-equal-greater
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return integer
                        #2: in boolean
                        #3: in boolean
                btbpchar_pattern_cmp(char,char): function attributes: leakproof, strict, cost 1, parallel safe
                    --  less-equal-greater
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return integer
                        #2: in char
                        #3: in char
                btbpchar_pattern_sortsupport(internal): function attributes: strict, cost 1, parallel safe
                    --  sort support
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return void
                        #2: in internal
                btcharcmp("char","char"): function attributes: leakproof, strict, cost 1, parallel safe
                    --  less-equal-greater
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return integer
                        #2: in "char"
                        #3: in "char"
                btfloat48cmp(real,double precision): function attributes: leakproof, strict, cost 1, parallel safe
                    --  less-equal-greater
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return integer
                        #2: in real
                        #3: in double precision
                btfloat4cmp(real,real): function attributes: leakproof, strict, cost 1, parallel safe
                    --  less-equal-greater
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return integer
                        #2: in real
                        #3: in real
                btfloat4sortsupport(internal): function attributes: strict, cost 1, parallel safe
                    --  sort support
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return void
                        #2: in internal
                btfloat84cmp(double precision,real): function attributes: leakproof, strict, cost 1, parallel safe
                    --  less-equal-greater
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return integer
                        #2: in double precision
                        #3: in real
                btfloat8cmp(double precision,double precision): function attributes: leakproof, strict, cost 1, parallel safe
                    --  less-equal-greater
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return integer
                        #2: in double precision
                        #3: in double precision
                btfloat8sortsupport(internal): function attributes: strict, cost 1, parallel safe
                    --  sort support
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return void
                        #2: in internal
                bthandler(internal): function attributes: strict, cost 1, parallel safe
                    --  btree index access method handler
                    . references
                        language = internal
                    + arguments
                        #1: return index_am_handler
                        #2: in internal
                btint24cmp(smallint,integer): function attributes: leakproof, strict, cost 1, parallel safe
                    --  less-equal-greater
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return integer
                        #2: in smallint
                        #3: in integer
                btint28cmp(smallint,bigint): function attributes: leakproof, strict, cost 1, parallel safe
                    --  less-equal-greater
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return integer
                        #2: in smallint
                        #3: in bigint
                btint2cmp(smallint,smallint): function attributes: leakproof, strict, cost 1, parallel safe
                    --  less-equal-greater
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return integer
                        #2: in smallint
                        #3: in smallint
                btint2sortsupport(internal): function attributes: strict, cost 1, parallel safe
                    --  sort support
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return void
                        #2: in internal
                btint42cmp(integer,smallint): function attributes: leakproof, strict, cost 1, parallel safe
                    --  less-equal-greater
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return integer
                        #2: in integer
                        #3: in smallint
                btint48cmp(integer,bigint): function attributes: leakproof, strict, cost 1, parallel safe
                    --  less-equal-greater
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return integer
                        #2: in integer
                        #3: in bigint
                btint4cmp(integer,integer): function attributes: leakproof, strict, cost 1, parallel safe
                    --  less-equal-greater
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return integer
                        #2: in integer
                        #3: in integer
                btint4sortsupport(internal): function attributes: strict, cost 1, parallel safe
                    --  sort support
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return void
                        #2: in internal
                btint82cmp(bigint,smallint): function attributes: leakproof, strict, cost 1, parallel safe
                    --  less-equal-greater
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return integer
                        #2: in bigint
                        #3: in smallint
                btint84cmp(bigint,integer): function attributes: leakproof, strict, cost 1, parallel safe
                    --  less-equal-greater
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return integer
                        #2: in bigint
                        #3: in integer
                btint8cmp(bigint,bigint): function attributes: leakproof, strict, cost 1, parallel safe
                    --  less-equal-greater
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return integer
                        #2: in bigint
                        #3: in bigint
                btint8sortsupport(internal): function attributes: strict, cost 1, parallel safe
                    --  sort support
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return void
                        #2: in internal
                btnamecmp(name,name): function attributes: leakproof, strict, cost 1, parallel safe
                    --  less-equal-greater
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return integer
                        #2: in name
                        #3: in name
                btnamesortsupport(internal): function attributes: strict, cost 1, parallel safe
                    --  sort support
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return void
                        #2: in internal
                btnametextcmp(name,text): function attributes: leakproof, strict, cost 1, parallel safe
                    --  less-equal-greater
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return integer
                        #2: in name
                        #3: in text
                btoidcmp(oid,oid): function attributes: leakproof, strict, cost 1, parallel safe
                    --  less-equal-greater
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return integer
                        #2: in oid
                        #3: in oid
                btoidsortsupport(internal): function attributes: strict, cost 1, parallel safe
                    --  sort support
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return void
                        #2: in internal
                btoidvectorcmp(oidvector,oidvector): function attributes: leakproof, strict, cost 1, parallel safe
                    --  less-equal-greater
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return integer
                        #2: in oidvector
                        #3: in oidvector
                btrecordcmp(record,record): function attributes: strict, cost 1, parallel safe
                    --  less-equal-greater
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return integer
                        #2: in record
                        #3: in record
                btrecordimagecmp(record,record): function attributes: strict, cost 1, parallel safe
                    --  less-equal-greater based on byte images
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return integer
                        #2: in record
                        #3: in record
                btrim(bytea,bytea): function attributes: strict, cost 1, parallel safe
                    --  trim both ends of string
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bytea
                        #2: in bytea
                        #3: in bytea
                btrim(text): function attributes: strict, cost 1, parallel safe
                    --  trim spaces from both ends of string
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return text
                        #2: in text
                btrim(text,text): function attributes: strict, cost 1, parallel safe
                    --  trim selected characters from both ends of string
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return text
                        #2: in text
                        #3: in text
                bttext_pattern_cmp(text,text): function attributes: leakproof, strict, cost 1, parallel safe
                    --  less-equal-greater
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return integer
                        #2: in text
                        #3: in text
                bttext_pattern_sortsupport(internal): function attributes: strict, cost 1, parallel safe
                    --  sort support
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return void
                        #2: in internal
                bttextcmp(text,text): function attributes: leakproof, strict, cost 1, parallel safe
                    --  less-equal-greater
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return integer
                        #2: in text
                        #3: in text
                bttextnamecmp(text,name): function attributes: leakproof, strict, cost 1, parallel safe
                    --  less-equal-greater
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return integer
                        #2: in text
                        #3: in name
                bttextsortsupport(internal): function attributes: strict, cost 1, parallel safe
                    --  sort support
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return void
                        #2: in internal
                bttidcmp(tid,tid): function attributes: leakproof, strict, cost 1, parallel safe
                    --  less-equal-greater
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return integer
                        #2: in tid
                        #3: in tid
                bytea_sortsupport(internal): function attributes: strict, cost 1, parallel safe
                    --  sort support
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return void
                        #2: in internal
                bytea_string_agg_finalfn(internal): function attributes: cost 1, parallel safe
                    --  aggregate final function
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bytea
                        #2: in internal
                bytea_string_agg_transfn(internal,bytea,bytea): function attributes: cost 1, parallel safe
                    --  aggregate transition function
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return internal
                        #2: in internal
                        #3: in bytea
                        #4: in bytea
                byteacat(bytea,bytea): function attributes: strict, cost 1, parallel safe
                    --  implementation of || operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bytea
                        #2: in bytea
                        #3: in bytea
                byteacmp(bytea,bytea): function attributes: leakproof, strict, cost 1, parallel safe
                    --  less-equal-greater
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return integer
                        #2: in bytea
                        #3: in bytea
                byteaeq(bytea,bytea): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of = operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in bytea
                        #3: in bytea
                byteage(bytea,bytea): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of >= operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in bytea
                        #3: in bytea
                byteagt(bytea,bytea): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of > operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in bytea
                        #3: in bytea
                byteain(cstring): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bytea
                        #2: in cstring
                byteale(bytea,bytea): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of <= operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in bytea
                        #3: in bytea
                bytealike(bytea,bytea): function attributes: strict, cost 1, parallel safe
                    --  implementation of ~~ operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in bytea
                        #3: in bytea
                bytealt(bytea,bytea): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of < operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in bytea
                        #3: in bytea
                byteane(bytea,bytea): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of <> operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in bytea
                        #3: in bytea
                byteanlike(bytea,bytea): function attributes: strict, cost 1, parallel safe
                    --  implementation of !~~ operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in bytea
                        #3: in bytea
                byteaout(bytea): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return cstring
                        #2: in bytea
                bytearecv(internal): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bytea
                        #2: in internal
                byteasend(bytea): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bytea
                        #2: in bytea
                cardinality(anyarray): function attributes: strict, cost 1, parallel safe
                    --  array cardinality
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return integer
                        #2: in anyarray
                cash_cmp(money,money): function attributes: leakproof, strict, cost 1, parallel safe
                    --  less-equal-greater
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return integer
                        #2: in money
                        #3: in money
                cash_div_cash(money,money): function attributes: strict, cost 1, parallel safe
                    --  implementation of / operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return double precision
                        #2: in money
                        #3: in money
                cash_div_flt4(money,real): function attributes: strict, cost 1, parallel safe
                    --  implementation of / operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return money
                        #2: in money
                        #3: in real
                cash_div_flt8(money,double precision): function attributes: strict, cost 1, parallel safe
                    --  implementation of / operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return money
                        #2: in money
                        #3: in double precision
                cash_div_int2(money,smallint): function attributes: strict, cost 1, parallel safe
                    --  implementation of / operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return money
                        #2: in money
                        #3: in smallint
                cash_div_int4(money,integer): function attributes: strict, cost 1, parallel safe
                    --  implementation of / operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return money
                        #2: in money
                        #3: in integer
                cash_div_int8(money,bigint): function attributes: strict, cost 1, parallel safe
                    --  implementation of / operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return money
                        #2: in money
                        #3: in bigint
                cash_eq(money,money): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of = operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in money
                        #3: in money
                cash_ge(money,money): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of >= operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in money
                        #3: in money
                cash_gt(money,money): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of > operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in money
                        #3: in money
                cash_in(cstring): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return money
                        #2: in cstring
                cash_le(money,money): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of <= operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in money
                        #3: in money
                cash_lt(money,money): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of < operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in money
                        #3: in money
                cash_mi(money,money): function attributes: strict, cost 1, parallel safe
                    --  implementation of - operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return money
                        #2: in money
                        #3: in money
                cash_mul_flt4(money,real): function attributes: strict, cost 1, parallel safe
                    --  implementation of * operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return money
                        #2: in money
                        #3: in real
                cash_mul_flt8(money,double precision): function attributes: strict, cost 1, parallel safe
                    --  implementation of * operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return money
                        #2: in money
                        #3: in double precision
                cash_mul_int2(money,smallint): function attributes: strict, cost 1, parallel safe
                    --  implementation of * operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return money
                        #2: in money
                        #3: in smallint
                cash_mul_int4(money,integer): function attributes: strict, cost 1, parallel safe
                    --  implementation of * operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return money
                        #2: in money
                        #3: in integer
                cash_mul_int8(money,bigint): function attributes: strict, cost 1, parallel safe
                    --  implementation of * operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return money
                        #2: in money
                        #3: in bigint
                cash_ne(money,money): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of <> operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in money
                        #3: in money
                cash_out(money): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return cstring
                        #2: in money
                cash_pl(money,money): function attributes: strict, cost 1, parallel safe
                    --  implementation of + operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return money
                        #2: in money
                        #3: in money
                cash_recv(internal): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return money
                        #2: in internal
                cash_send(money): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bytea
                        #2: in money
                cash_words(money): function attributes: strict, cost 1, parallel safe
                    --  output money amount as words
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return text
                        #2: in money
                cashlarger(money,money): function attributes: strict, cost 1, parallel safe
                    --  larger of two
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return money
                        #2: in money
                        #3: in money
                cashsmaller(money,money): function attributes: strict, cost 1, parallel safe
                    --  smaller of two
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return money
                        #2: in money
                        #3: in money
                cbrt(double precision): function attributes: strict, cost 1, parallel safe
                    --  cube root
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return double precision
                        #2: in double precision
                ceil(double precision): function attributes: strict, cost 1, parallel safe
                    --  nearest integer >= value
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return double precision
                        #2: in double precision
                ceil(numeric): function attributes: strict, cost 1, parallel safe
                    --  nearest integer >= value
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return numeric
                        #2: in numeric
                ceiling(double precision): function attributes: strict, cost 1, parallel safe
                    --  nearest integer >= value
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return double precision
                        #2: in double precision
                ceiling(numeric): function attributes: strict, cost 1, parallel safe
                    --  nearest integer >= value
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return numeric
                        #2: in numeric
                center(box): function attributes: strict, cost 1, parallel safe
                    --  center of
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return point
                        #2: in box
                center(circle): function attributes: strict, cost 1, parallel safe
                    --  center of
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return point
                        #2: in circle
                char(integer): function attributes: strict, cost 1, parallel safe
                    --  convert int4 to char
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return "char"
                        #2: in integer
                char(text): function attributes: strict, cost 1, parallel safe
                    --  convert text to char
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return "char"
                        #2: in text
                char_length(char): function attributes: strict, cost 1, parallel safe
                    --  character length
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return integer
                        #2: in char
                char_length(text): function attributes: strict, cost 1, parallel safe
                    --  character length
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return integer
                        #2: in text
                character_length(char): function attributes: strict, cost 1, parallel safe
                    --  character length
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return integer
                        #2: in char
                character_length(text): function attributes: strict, cost 1, parallel safe
                    --  character length
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return integer
                        #2: in text
                chareq("char","char"): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of = operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in "char"
                        #3: in "char"
                charge("char","char"): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of >= operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in "char"
                        #3: in "char"
                chargt("char","char"): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of > operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in "char"
                        #3: in "char"
                charin(cstring): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return "char"
                        #2: in cstring
                charle("char","char"): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of <= operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in "char"
                        #3: in "char"
                charlt("char","char"): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of < operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in "char"
                        #3: in "char"
                charne("char","char"): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of <> operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in "char"
                        #3: in "char"
                charout("char"): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return cstring
                        #2: in "char"
                charrecv(internal): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return "char"
                        #2: in internal
                charsend("char"): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bytea
                        #2: in "char"
                chr(integer): function attributes: strict, cost 1, parallel safe
                    --  convert int4 to char
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return text
                        #2: in integer
                cideq(cid,cid): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of = operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in cid
                        #3: in cid
                cidin(cstring): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return cid
                        #2: in cstring
                cidout(cid): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return cstring
                        #2: in cid
                cidr(inet): function attributes: strict, cost 1, parallel safe
                    --  convert inet to cidr
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return cidr
                        #2: in inet
                cidr_in(cstring): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return cidr
                        #2: in cstring
                cidr_out(cidr): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return cstring
                        #2: in cidr
                cidr_recv(internal): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return cidr
                        #2: in internal
                cidr_send(cidr): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bytea
                        #2: in cidr
                cidrecv(internal): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return cid
                        #2: in internal
                cidsend(cid): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bytea
                        #2: in cid
                circle(box): function attributes: strict, cost 1, parallel safe
                    --  convert box to circle
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return circle
                        #2: in box
                circle(point,double precision): function attributes: strict, cost 1, parallel safe
                    --  convert point and radius to circle
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return circle
                        #2: in point
                        #3: in double precision
                circle(polygon): function attributes: strict, cost 1, parallel safe
                    --  convert polygon to circle
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return circle
                        #2: in polygon
                circle_above(circle,circle): function attributes: strict, cost 1, parallel safe
                    --  implementation of |>> operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in circle
                        #3: in circle
                circle_add_pt(circle,point): function attributes: strict, cost 1, parallel safe
                    --  implementation of + operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return circle
                        #2: in circle
                        #3: in point
                circle_below(circle,circle): function attributes: strict, cost 1, parallel safe
                    --  implementation of <<| operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in circle
                        #3: in circle
                circle_center(circle): function attributes: strict, cost 1, parallel safe
                    --  implementation of @@ operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return point
                        #2: in circle
                circle_contain(circle,circle): function attributes: strict, cost 1, parallel safe
                    --  implementation of @> operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in circle
                        #3: in circle
                circle_contain_pt(circle,point): function attributes: strict, cost 1, parallel safe
                    --  implementation of @> operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in circle
                        #3: in point
                circle_contained(circle,circle): function attributes: strict, cost 1, parallel safe
                    --  implementation of <@ operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in circle
                        #3: in circle
                circle_distance(circle,circle): function attributes: strict, cost 1, parallel safe
                    --  implementation of <-> operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return double precision
                        #2: in circle
                        #3: in circle
                circle_div_pt(circle,point): function attributes: strict, cost 1, parallel safe
                    --  implementation of / operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return circle
                        #2: in circle
                        #3: in point
                circle_eq(circle,circle): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of = operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in circle
                        #3: in circle
                circle_ge(circle,circle): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of >= operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in circle
                        #3: in circle
                circle_gt(circle,circle): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of > operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in circle
                        #3: in circle
                circle_in(cstring): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return circle
                        #2: in cstring
                circle_le(circle,circle): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of <= operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in circle
                        #3: in circle
                circle_left(circle,circle): function attributes: strict, cost 1, parallel safe
                    --  implementation of << operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in circle
                        #3: in circle
                circle_lt(circle,circle): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of < operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in circle
                        #3: in circle
                circle_mul_pt(circle,point): function attributes: strict, cost 1, parallel safe
                    --  implementation of * operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return circle
                        #2: in circle
                        #3: in point
                circle_ne(circle,circle): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of <> operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in circle
                        #3: in circle
                circle_out(circle): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return cstring
                        #2: in circle
                circle_overabove(circle,circle): function attributes: strict, cost 1, parallel safe
                    --  implementation of |&> operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in circle
                        #3: in circle
                circle_overbelow(circle,circle): function attributes: strict, cost 1, parallel safe
                    --  implementation of &<| operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in circle
                        #3: in circle
                circle_overlap(circle,circle): function attributes: strict, cost 1, parallel safe
                    --  implementation of && operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in circle
                        #3: in circle
                circle_overleft(circle,circle): function attributes: strict, cost 1, parallel safe
                    --  implementation of &< operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in circle
                        #3: in circle
                circle_overright(circle,circle): function attributes: strict, cost 1, parallel safe
                    --  implementation of &> operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in circle
                        #3: in circle
                circle_recv(internal): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return circle
                        #2: in internal
                circle_right(circle,circle): function attributes: strict, cost 1, parallel safe
                    --  implementation of >> operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in circle
                        #3: in circle
                circle_same(circle,circle): function attributes: strict, cost 1, parallel safe
                    --  implementation of ~= operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in circle
                        #3: in circle
                circle_send(circle): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bytea
                        #2: in circle
                circle_sub_pt(circle,point): function attributes: strict, cost 1, parallel safe
                    --  implementation of - operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return circle
                        #2: in circle
                        #3: in point
                clock_timestamp(): function attributes: strict, cost 1, parallel safe
                    --  current clock time
                    . references
                        language = internal
                    + arguments
                        #1: return timestamp with time zone
                close_lb(line,box): function attributes: strict, cost 1, parallel safe
                    --  implementation of ## operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return point
                        #2: in line
                        #3: in box
                close_ls(line,lseg): function attributes: strict, cost 1, parallel safe
                    --  implementation of ## operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return point
                        #2: in line
                        #3: in lseg
                close_lseg(lseg,lseg): function attributes: strict, cost 1, parallel safe
                    --  implementation of ## operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return point
                        #2: in lseg
                        #3: in lseg
                close_pb(point,box): function attributes: strict, cost 1, parallel safe
                    --  implementation of ## operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return point
                        #2: in point
                        #3: in box
                close_pl(point,line): function attributes: strict, cost 1, parallel safe
                    --  implementation of ## operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return point
                        #2: in point
                        #3: in line
                close_ps(point,lseg): function attributes: strict, cost 1, parallel safe
                    --  implementation of ## operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return point
                        #2: in point
                        #3: in lseg
                close_sb(lseg,box): function attributes: strict, cost 1, parallel safe
                    --  implementation of ## operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return point
                        #2: in lseg
                        #3: in box
                close_sl(lseg,line): function attributes: strict, cost 1, parallel safe
                    --  implementation of ## operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return point
                        #2: in lseg
                        #3: in line
                col_description(oid,integer): function attributes: strict, parallel safe
                    --  get description for table column
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = sql
                    + arguments
                        #1: return text
                        #2: in oid
                        #3: in integer
                concat("any"): function attributes: cost 1, parallel safe
                    --  concatenate values
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return text
                        #2: in "any"
                            . properties
                                variadic +
                concat_ws(text,"any"): function attributes: cost 1, parallel safe
                    --  concatenate values with separators
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return text
                        #2: in text
                        #3: in "any"
                            . properties
                                variadic +
                contjoinsel(internal,oid,internal,smallint,internal): function attributes: strict, cost 1, parallel safe
                    --  join selectivity for containment comparison operators
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return double precision
                        #2: in internal
                        #3: in oid
                        #4: in internal
                        #5: in smallint
                        #6: in internal
                contsel(internal,oid,internal,integer): function attributes: strict, cost 1, parallel safe
                    --  restriction selectivity for containment comparison operators
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return double precision
                        #2: in internal
                        #3: in oid
                        #4: in internal
                        #5: in integer
                convert(bytea,name,name): function attributes: strict, cost 1, parallel safe
                    --  convert string with specified encoding names
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bytea
                        #2: in bytea
                        #3: in name
                        #4: in name
                convert_from(bytea,name): function attributes: strict, cost 1, parallel safe
                    --  convert string with specified source encoding name
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return text
                        #2: in bytea
                        #3: in name
                convert_to(text,name): function attributes: strict, cost 1, parallel safe
                    --  convert string with specified destination encoding name
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bytea
                        #2: in text
                        #3: in name
                cos(double precision): function attributes: strict, cost 1, parallel safe
                    --  cosine
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return double precision
                        #2: in double precision
                cosd(double precision): function attributes: strict, cost 1, parallel safe
                    --  cosine, degrees
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return double precision
                        #2: in double precision
                cosh(double precision): function attributes: strict, cost 1, parallel safe
                    --  hyperbolic cosine
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return double precision
                        #2: in double precision
                cot(double precision): function attributes: strict, cost 1, parallel safe
                    --  cotangent
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return double precision
                        #2: in double precision
                cotd(double precision): function attributes: strict, cost 1, parallel safe
                    --  cotangent, degrees
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return double precision
                        #2: in double precision
                cstring_in(cstring): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return cstring
                        #2: in cstring
                cstring_out(cstring): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return cstring
                        #2: in cstring
                cstring_recv(internal): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return cstring
                        #2: in internal
                cstring_send(cstring): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bytea
                        #2: in cstring
                cume_dist(): function attributes: cost 1, parallel safe, window
                    --  fractional row number within partition
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return double precision
                cume_dist_final(internal,"any"): function attributes: cost 1, parallel safe
                    --  aggregate final function
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return double precision
                        #2: in internal
                        #3: in "any"
                            . properties
                                variadic +
                current_database(): function attributes: strict, cost 1, parallel safe
                    --  name of the current database
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return name
                current_query(): function attributes: cost 1, parallel restricted
                    --  get the currently executing query
                    . references
                        language = internal
                    + arguments
                        #1: return text
                current_schema(): function attributes: strict, cost 1
                    --  current schema name
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return name
                current_schemas(boolean): function attributes: strict, cost 1
                    --  current schema search list
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return name[]
                        #2: in boolean
                current_setting(text): function attributes: strict, cost 1, parallel safe
                    --  SHOW X as a function
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return text
                        #2: in text
                current_setting(text,boolean): function attributes: strict, cost 1, parallel safe
                    --  SHOW X as a function, optionally no error for missing variable
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return text
                        #2: in text
                        #3: in boolean
                current_user(): function attributes: strict, cost 1, parallel safe
                    --  current user name
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return name
                currtid(oid,tid): function attributes: strict, cost 1
                    --  latest tid of a tuple
                    . references
                        language = internal
                    + arguments
                        #1: return tid
                        #2: in oid
                        #3: in tid
                currtid2(text,tid): function attributes: strict, cost 1
                    --  latest tid of a tuple
                    . references
                        language = internal
                    + arguments
                        #1: return tid
                        #2: in text
                        #3: in tid
                currval(regclass): function attributes: strict, cost 1
                    --  sequence current value
                    . references
                        language = internal
                    + arguments
                        #1: return bigint
                        #2: in regclass
                cursor_to_xml(refcursor,integer,boolean,boolean,text): function attributes: strict
                    --  map rows from cursor to XML
                    . references
                        language = internal
                    + arguments
                        #1: return xml
                        cursor: in refcursor
                        count: in integer
                        nulls: in boolean
                        tableforest: in boolean
                        targetns: in text
                cursor_to_xmlschema(refcursor,boolean,boolean,text): function attributes: strict
                    --  map cursor structure to XML Schema
                    . references
                        language = internal
                    + arguments
                        #1: return xml
                        cursor: in refcursor
                        nulls: in boolean
                        tableforest: in boolean
                        targetns: in text
                database_to_xml(boolean,boolean,text): function attributes: strict, parallel restricted
                    --  map database contents to XML
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return xml
                        nulls: in boolean
                        tableforest: in boolean
                        targetns: in text
                database_to_xml_and_xmlschema(boolean,boolean,text): function attributes: strict, parallel restricted
                    --  map database contents and structure to XML and XML Schema
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return xml
                        nulls: in boolean
                        tableforest: in boolean
                        targetns: in text
                database_to_xmlschema(boolean,boolean,text): function attributes: strict, parallel restricted
                    --  map database structure to XML Schema
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return xml
                        nulls: in boolean
                        tableforest: in boolean
                        targetns: in text
                date(timestamp with time zone): function attributes: strict, cost 1, parallel safe
                    --  convert timestamp with time zone to date
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return date
                        #2: in timestamp with time zone
                date(timestamp): function attributes: strict, cost 1, parallel safe
                    --  convert timestamp to date
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return date
                        #2: in timestamp
                date_cmp(date,date): function attributes: leakproof, strict, cost 1, parallel safe
                    --  less-equal-greater
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return integer
                        #2: in date
                        #3: in date
                date_cmp_timestamp(date,timestamp): function attributes: strict, cost 1, parallel safe
                    --  less-equal-greater
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return integer
                        #2: in date
                        #3: in timestamp
                date_cmp_timestamptz(date,timestamp with time zone): function attributes: strict, cost 1, parallel safe
                    --  less-equal-greater
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return integer
                        #2: in date
                        #3: in timestamp with time zone
                date_eq(date,date): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of = operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in date
                        #3: in date
                date_eq_timestamp(date,timestamp): function attributes: strict, cost 1, parallel safe
                    --  implementation of = operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in date
                        #3: in timestamp
                date_eq_timestamptz(date,timestamp with time zone): function attributes: strict, cost 1, parallel safe
                    --  implementation of = operator
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in date
                        #3: in timestamp with time zone
                date_ge(date,date): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of >= operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in date
                        #3: in date
                date_ge_timestamp(date,timestamp): function attributes: strict, cost 1, parallel safe
                    --  implementation of >= operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in date
                        #3: in timestamp
                date_ge_timestamptz(date,timestamp with time zone): function attributes: strict, cost 1, parallel safe
                    --  implementation of >= operator
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in date
                        #3: in timestamp with time zone
                date_gt(date,date): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of > operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in date
                        #3: in date
                date_gt_timestamp(date,timestamp): function attributes: strict, cost 1, parallel safe
                    --  implementation of > operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in date
                        #3: in timestamp
                date_gt_timestamptz(date,timestamp with time zone): function attributes: strict, cost 1, parallel safe
                    --  implementation of > operator
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in date
                        #3: in timestamp with time zone
                date_in(cstring): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return date
                        #2: in cstring
                date_larger(date,date): function attributes: strict, cost 1, parallel safe
                    --  larger of two
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return date
                        #2: in date
                        #3: in date
                date_le(date,date): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of <= operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in date
                        #3: in date
                date_le_timestamp(date,timestamp): function attributes: strict, cost 1, parallel safe
                    --  implementation of <= operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in date
                        #3: in timestamp
                date_le_timestamptz(date,timestamp with time zone): function attributes: strict, cost 1, parallel safe
                    --  implementation of <= operator
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in date
                        #3: in timestamp with time zone
                date_lt(date,date): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of < operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in date
                        #3: in date
                date_lt_timestamp(date,timestamp): function attributes: strict, cost 1, parallel safe
                    --  implementation of < operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in date
                        #3: in timestamp
                date_lt_timestamptz(date,timestamp with time zone): function attributes: strict, cost 1, parallel safe
                    --  implementation of < operator
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in date
                        #3: in timestamp with time zone
                date_mi(date,date): function attributes: strict, cost 1, parallel safe
                    --  implementation of - operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return integer
                        #2: in date
                        #3: in date
                date_mi_interval(date,interval): function attributes: strict, cost 1, parallel safe
                    --  implementation of - operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return timestamp
                        #2: in date
                        #3: in interval
                date_mii(date,integer): function attributes: strict, cost 1, parallel safe
                    --  implementation of - operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return date
                        #2: in date
                        #3: in integer
                date_ne(date,date): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of <> operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in date
                        #3: in date
                date_ne_timestamp(date,timestamp): function attributes: strict, cost 1, parallel safe
                    --  implementation of <> operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in date
                        #3: in timestamp
                date_ne_timestamptz(date,timestamp with time zone): function attributes: strict, cost 1, parallel safe
                    --  implementation of <> operator
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in date
                        #3: in timestamp with time zone
                date_out(date): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return cstring
                        #2: in date
                date_part(text,date): function attributes: strict, cost 1, parallel safe
                    --  extract field from date
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = sql
                    + arguments
                        #1: return double precision
                        #2: in text
                        #3: in date
                date_part(text,interval): function attributes: strict, cost 1, parallel safe
                    --  extract field from interval
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return double precision
                        #2: in text
                        #3: in interval
                date_part(text,time with time zone): function attributes: strict, cost 1, parallel safe
                    --  extract field from time with time zone
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return double precision
                        #2: in text
                        #3: in time with time zone
                date_part(text,time): function attributes: strict, cost 1, parallel safe
                    --  extract field from time
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return double precision
                        #2: in text
                        #3: in time
                date_part(text,timestamp with time zone): function attributes: strict, cost 1, parallel safe
                    --  extract field from timestamp with time zone
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return double precision
                        #2: in text
                        #3: in timestamp with time zone
                date_part(text,timestamp): function attributes: strict, cost 1, parallel safe
                    --  extract field from timestamp
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return double precision
                        #2: in text
                        #3: in timestamp
                date_pl_interval(date,interval): function attributes: strict, cost 1, parallel safe
                    --  implementation of + operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return timestamp
                        #2: in date
                        #3: in interval
                date_pli(date,integer): function attributes: strict, cost 1, parallel safe
                    --  implementation of + operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return date
                        #2: in date
                        #3: in integer
                date_recv(internal): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return date
                        #2: in internal
                date_send(date): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bytea
                        #2: in date
                date_smaller(date,date): function attributes: strict, cost 1, parallel safe
                    --  smaller of two
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return date
                        #2: in date
                        #3: in date
                date_sortsupport(internal): function attributes: strict, cost 1, parallel safe
                    --  sort support
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return void
                        #2: in internal
                date_trunc(text,interval): function attributes: strict, cost 1, parallel safe
                    --  truncate interval to specified units
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return interval
                        #2: in text
                        #3: in interval
                date_trunc(text,timestamp with time zone): function attributes: strict, cost 1, parallel safe
                    --  truncate timestamp with time zone to specified units
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return timestamp with time zone
                        #2: in text
                        #3: in timestamp with time zone
                date_trunc(text,timestamp with time zone,text): function attributes: strict, cost 1, parallel safe
                    --  truncate timestamp with time zone to specified units in specified time zone
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return timestamp with time zone
                        #2: in text
                        #3: in timestamp with time zone
                        #4: in text
                date_trunc(text,timestamp): function attributes: strict, cost 1, parallel safe
                    --  truncate timestamp to specified units
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return timestamp
                        #2: in text
                        #3: in timestamp
                daterange(date,date): function attributes: cost 1, parallel safe
                    --  daterange constructor
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return daterange
                        #2: in date
                        #3: in date
                daterange(date,date,text): function attributes: cost 1, parallel safe
                    --  daterange constructor
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return daterange
                        #2: in date
                        #3: in date
                        #4: in text
                daterange_canonical(daterange): function attributes: strict, cost 1, parallel safe
                    --  convert a date range to canonical form
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return daterange
                        #2: in daterange
                daterange_subdiff(date,date): function attributes: strict, cost 1, parallel safe
                    --  float8 difference of two date values
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return double precision
                        #2: in date
                        #3: in date
                datetime_pl(date,time): function attributes: strict, cost 1, parallel safe
                    --  implementation of + operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return timestamp
                        #2: in date
                        #3: in time
                datetimetz_pl(date,time with time zone): function attributes: strict, cost 1, parallel safe
                    --  implementation of + operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return timestamp with time zone
                        #2: in date
                        #3: in time with time zone
                dcbrt(double precision): function attributes: strict, cost 1, parallel safe
                    --  implementation of ||/ operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return double precision
                        #2: in double precision
                decode(text,text): function attributes: strict, cost 1, parallel safe
                    --  convert ascii-encoded text string into bytea value
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bytea
                        #2: in text
                        #3: in text
                degrees(double precision): function attributes: strict, cost 1, parallel safe
                    --  radians to degrees
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return double precision
                        #2: in double precision
                dense_rank(): function attributes: cost 1, parallel safe, window
                    --  integer rank without gaps
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bigint
                dense_rank_final(internal,"any"): function attributes: cost 1, parallel safe
                    --  aggregate final function
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bigint
                        #2: in internal
                        #3: in "any"
                            . properties
                                variadic +
                dexp(double precision): function attributes: strict, cost 1, parallel safe
                    --  natural exponential (e^x)
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return double precision
                        #2: in double precision
                diagonal(box): function attributes: strict, cost 1, parallel safe
                    --  box diagonal
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return lseg
                        #2: in box
                diameter(circle): function attributes: strict, cost 1, parallel safe
                    --  diameter of circle
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return double precision
                        #2: in circle
                dispell_init(internal): function attributes: strict, cost 1, parallel safe
                    --  (internal)
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return internal
                        #2: in internal
                dispell_lexize(internal,internal,internal,internal): function attributes: strict, cost 1, parallel safe
                    --  (internal)
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return internal
                        #2: in internal
                        #3: in internal
                        #4: in internal
                        #5: in internal
                dist_cpoint(circle,point): function attributes: strict, cost 1, parallel safe
                    --  implementation of <-> operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return double precision
                        #2: in circle
                        #3: in point
                dist_cpoly(circle,polygon): function attributes: strict, cost 1, parallel safe
                    --  implementation of <-> operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return double precision
                        #2: in circle
                        #3: in polygon
                dist_lb(line,box): function attributes: strict, cost 1, parallel safe
                    --  implementation of <-> operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return double precision
                        #2: in line
                        #3: in box
                dist_pb(point,box): function attributes: strict, cost 1, parallel safe
                    --  implementation of <-> operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return double precision
                        #2: in point
                        #3: in box
                dist_pc(point,circle): function attributes: strict, cost 1, parallel safe
                    --  implementation of <-> operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return double precision
                        #2: in point
                        #3: in circle
                dist_pl(point,line): function attributes: strict, cost 1, parallel safe
                    --  implementation of <-> operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return double precision
                        #2: in point
                        #3: in line
                dist_polyp(polygon,point): function attributes: strict, cost 1, parallel safe
                    --  implementation of <-> operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return double precision
                        #2: in polygon
                        #3: in point
                dist_ppath(point,path): function attributes: strict, cost 1, parallel safe
                    --  implementation of <-> operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return double precision
                        #2: in point
                        #3: in path
                dist_ppoly(point,polygon): function attributes: strict, cost 1, parallel safe
                    --  implementation of <-> operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return double precision
                        #2: in point
                        #3: in polygon
                dist_ps(point,lseg): function attributes: strict, cost 1, parallel safe
                    --  implementation of <-> operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return double precision
                        #2: in point
                        #3: in lseg
                dist_sb(lseg,box): function attributes: strict, cost 1, parallel safe
                    --  implementation of <-> operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return double precision
                        #2: in lseg
                        #3: in box
                dist_sl(lseg,line): function attributes: strict, cost 1, parallel safe
                    --  implementation of <-> operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return double precision
                        #2: in lseg
                        #3: in line
                div(numeric,numeric): function attributes: strict, cost 1, parallel safe
                    --  trunc(x/y)
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return numeric
                        #2: in numeric
                        #3: in numeric
                dlog1(double precision): function attributes: strict, cost 1, parallel safe
                    --  natural logarithm
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return double precision
                        #2: in double precision
                dlog10(double precision): function attributes: strict, cost 1, parallel safe
                    --  base 10 logarithm
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return double precision
                        #2: in double precision
                domain_in(cstring,oid,integer): function attributes: cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return "any"
                        #2: in cstring
                        #3: in oid
                        #4: in integer
                domain_recv(internal,oid,integer): function attributes: cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return "any"
                        #2: in internal
                        #3: in oid
                        #4: in integer
                dpow(double precision,double precision): function attributes: strict, cost 1, parallel safe
                    --  implementation of ^ operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return double precision
                        #2: in double precision
                        #3: in double precision
                dround(double precision): function attributes: strict, cost 1, parallel safe
                    --  round to nearest integer
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return double precision
                        #2: in double precision
                dsimple_init(internal): function attributes: strict, cost 1, parallel safe
                    --  (internal)
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return internal
                        #2: in internal
                dsimple_lexize(internal,internal,internal,internal): function attributes: strict, cost 1, parallel safe
                    --  (internal)
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return internal
                        #2: in internal
                        #3: in internal
                        #4: in internal
                        #5: in internal
                dsnowball_init(internal): function attributes: strict
                    . references
                        language = c
                    + arguments
                        #1: return internal
                        #2: in internal
                dsnowball_lexize(internal,internal,internal,internal): function attributes: strict
                    . references
                        language = c
                    + arguments
                        #1: return internal
                        #2: in internal
                        #3: in internal
                        #4: in internal
                        #5: in internal
                dsqrt(double precision): function attributes: strict, cost 1, parallel safe
                    --  implementation of |/ operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return double precision
                        #2: in double precision
                dsynonym_init(internal): function attributes: strict, cost 1, parallel safe
                    --  (internal)
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return internal
                        #2: in internal
                dsynonym_lexize(internal,internal,internal,internal): function attributes: strict, cost 1, parallel safe
                    --  (internal)
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return internal
                        #2: in internal
                        #3: in internal
                        #4: in internal
                        #5: in internal
                dtrunc(double precision): function attributes: strict, cost 1, parallel safe
                    --  truncate to integer
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return double precision
                        #2: in double precision
                elem_contained_by_range(anyelement,anyrange): function attributes: strict, cost 1, parallel safe
                    --  implementation of <@ operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in anyelement
                        #3: in anyrange
                encode(bytea,text): function attributes: strict, cost 1, parallel safe
                    --  convert bytea value into some ascii-only text string
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return text
                        #2: in bytea
                        #3: in text
                enum_cmp(anyenum,anyenum): function attributes: strict, cost 1, parallel safe
                    --  less-equal-greater
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return integer
                        #2: in anyenum
                        #3: in anyenum
                enum_eq(anyenum,anyenum): function attributes: strict, cost 1, parallel safe
                    --  implementation of = operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in anyenum
                        #3: in anyenum
                enum_first(anyenum): function attributes: cost 1, parallel safe
                    --  first value of the input enum type
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return anyenum
                        #2: in anyenum
                enum_ge(anyenum,anyenum): function attributes: strict, cost 1, parallel safe
                    --  implementation of >= operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in anyenum
                        #3: in anyenum
                enum_gt(anyenum,anyenum): function attributes: strict, cost 1, parallel safe
                    --  implementation of > operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in anyenum
                        #3: in anyenum
                enum_in(cstring,oid): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return anyenum
                        #2: in cstring
                        #3: in oid
                enum_larger(anyenum,anyenum): function attributes: strict, cost 1, parallel safe
                    --  larger of two
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return anyenum
                        #2: in anyenum
                        #3: in anyenum
                enum_last(anyenum): function attributes: cost 1, parallel safe
                    --  last value of the input enum type
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return anyenum
                        #2: in anyenum
                enum_le(anyenum,anyenum): function attributes: strict, cost 1, parallel safe
                    --  implementation of <= operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in anyenum
                        #3: in anyenum
                enum_lt(anyenum,anyenum): function attributes: strict, cost 1, parallel safe
                    --  implementation of < operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in anyenum
                        #3: in anyenum
                enum_ne(anyenum,anyenum): function attributes: strict, cost 1, parallel safe
                    --  implementation of <> operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in anyenum
                        #3: in anyenum
                enum_out(anyenum): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return cstring
                        #2: in anyenum
                enum_range(anyenum): function attributes: cost 1, parallel safe
                    --  range of the given enum type, as an ordered array
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return anyarray
                        #2: in anyenum
                enum_range(anyenum,anyenum): function attributes: cost 1, parallel safe
                    --  range between the two given enum values, as an ordered array
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return anyarray
                        #2: in anyenum
                        #3: in anyenum
                enum_recv(internal,oid): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return anyenum
                        #2: in internal
                        #3: in oid
                enum_send(anyenum): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bytea
                        #2: in anyenum
                enum_smaller(anyenum,anyenum): function attributes: strict, cost 1, parallel safe
                    --  smaller of two
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return anyenum
                        #2: in anyenum
                        #3: in anyenum
                eqjoinsel(internal,oid,internal,smallint,internal): function attributes: strict, cost 1, parallel safe
                    --  join selectivity of = and related operators
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return double precision
                        #2: in internal
                        #3: in oid
                        #4: in internal
                        #5: in smallint
                        #6: in internal
                eqsel(internal,oid,internal,integer): function attributes: strict, cost 1, parallel safe
                    --  restriction selectivity of = and related operators
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return double precision
                        #2: in internal
                        #3: in oid
                        #4: in internal
                        #5: in integer
                euc_cn_to_mic(integer,integer,cstring,internal,integer): function attributes: strict, parallel safe
                    --  internal conversion function for EUC_CN to MULE_INTERNAL
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = c
                    + arguments
                        #1: return void
                        #2: in integer
                        #3: in integer
                        #4: in cstring
                        #5: in internal
                        #6: in integer
                euc_cn_to_utf8(integer,integer,cstring,internal,integer): function attributes: strict, parallel safe
                    --  internal conversion function for EUC_CN to UTF8
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = c
                    + arguments
                        #1: return void
                        #2: in integer
                        #3: in integer
                        #4: in cstring
                        #5: in internal
                        #6: in integer
                euc_jis_2004_to_shift_jis_2004(integer,integer,cstring,internal,integer): function attributes: strict, parallel safe
                    --  internal conversion function for EUC_JIS_2004 to SHIFT_JIS_2004
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = c
                    + arguments
                        #1: return void
                        #2: in integer
                        #3: in integer
                        #4: in cstring
                        #5: in internal
                        #6: in integer
                euc_jis_2004_to_utf8(integer,integer,cstring,internal,integer): function attributes: strict, parallel safe
                    --  internal conversion function for EUC_JIS_2004 to UTF8
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = c
                    + arguments
                        #1: return void
                        #2: in integer
                        #3: in integer
                        #4: in cstring
                        #5: in internal
                        #6: in integer
                euc_jp_to_mic(integer,integer,cstring,internal,integer): function attributes: strict, parallel safe
                    --  internal conversion function for EUC_JP to MULE_INTERNAL
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = c
                    + arguments
                        #1: return void
                        #2: in integer
                        #3: in integer
                        #4: in cstring
                        #5: in internal
                        #6: in integer
                euc_jp_to_sjis(integer,integer,cstring,internal,integer): function attributes: strict, parallel safe
                    --  internal conversion function for EUC_JP to SJIS
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = c
                    + arguments
                        #1: return void
                        #2: in integer
                        #3: in integer
                        #4: in cstring
                        #5: in internal
                        #6: in integer
                euc_jp_to_utf8(integer,integer,cstring,internal,integer): function attributes: strict, parallel safe
                    --  internal conversion function for EUC_JP to UTF8
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = c
                    + arguments
                        #1: return void
                        #2: in integer
                        #3: in integer
                        #4: in cstring
                        #5: in internal
                        #6: in integer
                euc_kr_to_mic(integer,integer,cstring,internal,integer): function attributes: strict, parallel safe
                    --  internal conversion function for EUC_KR to MULE_INTERNAL
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = c
                    + arguments
                        #1: return void
                        #2: in integer
                        #3: in integer
                        #4: in cstring
                        #5: in internal
                        #6: in integer
                euc_kr_to_utf8(integer,integer,cstring,internal,integer): function attributes: strict, parallel safe
                    --  internal conversion function for EUC_KR to UTF8
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = c
                    + arguments
                        #1: return void
                        #2: in integer
                        #3: in integer
                        #4: in cstring
                        #5: in internal
                        #6: in integer
                euc_tw_to_big5(integer,integer,cstring,internal,integer): function attributes: strict, parallel safe
                    --  internal conversion function for EUC_TW to BIG5
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = c
                    + arguments
                        #1: return void
                        #2: in integer
                        #3: in integer
                        #4: in cstring
                        #5: in internal
                        #6: in integer
                euc_tw_to_mic(integer,integer,cstring,internal,integer): function attributes: strict, parallel safe
                    --  internal conversion function for EUC_TW to MULE_INTERNAL
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = c
                    + arguments
                        #1: return void
                        #2: in integer
                        #3: in integer
                        #4: in cstring
                        #5: in internal
                        #6: in integer
                euc_tw_to_utf8(integer,integer,cstring,internal,integer): function attributes: strict, parallel safe
                    --  internal conversion function for EUC_TW to UTF8
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = c
                    + arguments
                        #1: return void
                        #2: in integer
                        #3: in integer
                        #4: in cstring
                        #5: in internal
                        #6: in integer
                event_trigger_in(cstring): event trigger function attributes: cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return event_trigger
                        #2: in cstring
                event_trigger_out(event_trigger): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return cstring
                        #2: in event_trigger
                exp(double precision): function attributes: strict, cost 1, parallel safe
                    --  natural exponential (e^x)
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return double precision
                        #2: in double precision
                exp(numeric): function attributes: strict, cost 1, parallel safe
                    --  natural exponential (e^x)
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return numeric
                        #2: in numeric
                factorial(bigint): function attributes: strict, cost 1, parallel safe
                    --  factorial
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return numeric
                        #2: in bigint
                family(inet): function attributes: strict, cost 1, parallel safe
                    --  address family (4 for IPv4, 6 for IPv6)
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return integer
                        #2: in inet
                fdw_handler_in(cstring): function attributes: cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return fdw_handler
                        #2: in cstring
                fdw_handler_out(fdw_handler): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return cstring
                        #2: in fdw_handler
                first_value(anyelement): function attributes: strict, cost 1, parallel safe, window
                    --  fetch the first row value
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return anyelement
                        #2: in anyelement
                float4(bigint): function attributes: strict, cost 1, parallel safe
                    --  convert int8 to float4
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return real
                        #2: in bigint
                float4(double precision): function attributes: strict, cost 1, parallel safe
                    --  convert float8 to float4
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return real
                        #2: in double precision
                float4(integer): function attributes: strict, cost 1, parallel safe
                    --  convert int4 to float4
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return real
                        #2: in integer
                float4(jsonb): function attributes: strict, cost 1, parallel safe
                    --  convert jsonb to float4
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return real
                        #2: in jsonb
                float4(numeric): function attributes: strict, cost 1, parallel safe
                    --  convert numeric to float4
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return real
                        #2: in numeric
                float4(smallint): function attributes: strict, cost 1, parallel safe
                    --  convert int2 to float4
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return real
                        #2: in smallint
                float48div(real,double precision): function attributes: strict, cost 1, parallel safe
                    --  implementation of / operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return double precision
                        #2: in real
                        #3: in double precision
                float48eq(real,double precision): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of = operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in real
                        #3: in double precision
                float48ge(real,double precision): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of >= operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in real
                        #3: in double precision
                float48gt(real,double precision): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of > operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in real
                        #3: in double precision
                float48le(real,double precision): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of <= operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in real
                        #3: in double precision
                float48lt(real,double precision): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of < operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in real
                        #3: in double precision
                float48mi(real,double precision): function attributes: strict, cost 1, parallel safe
                    --  implementation of - operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return double precision
                        #2: in real
                        #3: in double precision
                float48mul(real,double precision): function attributes: strict, cost 1, parallel safe
                    --  implementation of * operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return double precision
                        #2: in real
                        #3: in double precision
                float48ne(real,double precision): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of <> operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in real
                        #3: in double precision
                float48pl(real,double precision): function attributes: strict, cost 1, parallel safe
                    --  implementation of + operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return double precision
                        #2: in real
                        #3: in double precision
                float4_accum(double precision[],real): function attributes: strict, cost 1, parallel safe
                    --  aggregate transition function
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return double precision[]
                        #2: in double precision[]
                        #3: in real
                float4abs(real): function attributes: strict, cost 1, parallel safe
                    --  implementation of @ operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return real
                        #2: in real
                float4div(real,real): function attributes: strict, cost 1, parallel safe
                    --  implementation of / operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return real
                        #2: in real
                        #3: in real
                float4eq(real,real): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of = operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in real
                        #3: in real
                float4ge(real,real): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of >= operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in real
                        #3: in real
                float4gt(real,real): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of > operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in real
                        #3: in real
                float4in(cstring): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return real
                        #2: in cstring
                float4larger(real,real): function attributes: strict, cost 1, parallel safe
                    --  larger of two
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return real
                        #2: in real
                        #3: in real
                float4le(real,real): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of <= operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in real
                        #3: in real
                float4lt(real,real): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of < operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in real
                        #3: in real
                float4mi(real,real): function attributes: strict, cost 1, parallel safe
                    --  implementation of - operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return real
                        #2: in real
                        #3: in real
                float4mul(real,real): function attributes: strict, cost 1, parallel safe
                    --  implementation of * operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return real
                        #2: in real
                        #3: in real
                float4ne(real,real): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of <> operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in real
                        #3: in real
                float4out(real): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return cstring
                        #2: in real
                float4pl(real,real): function attributes: strict, cost 1, parallel safe
                    --  implementation of + operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return real
                        #2: in real
                        #3: in real
                float4recv(internal): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return real
                        #2: in internal
                float4send(real): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bytea
                        #2: in real
                float4smaller(real,real): function attributes: strict, cost 1, parallel safe
                    --  smaller of two
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return real
                        #2: in real
                        #3: in real
                float4um(real): function attributes: strict, cost 1, parallel safe
                    --  implementation of - operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return real
                        #2: in real
                float4up(real): function attributes: strict, cost 1, parallel safe
                    --  implementation of + operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return real
                        #2: in real
                float8(bigint): function attributes: strict, cost 1, parallel safe
                    --  convert int8 to float8
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return double precision
                        #2: in bigint
                float8(integer): function attributes: strict, cost 1, parallel safe
                    --  convert int4 to float8
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return double precision
                        #2: in integer
                float8(jsonb): function attributes: strict, cost 1, parallel safe
                    --  convert jsonb to float8
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return double precision
                        #2: in jsonb
                float8(numeric): function attributes: strict, cost 1, parallel safe
                    --  convert numeric to float8
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return double precision
                        #2: in numeric
                float8(real): function attributes: strict, cost 1, parallel safe
                    --  convert float4 to float8
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return double precision
                        #2: in real
                float8(smallint): function attributes: strict, cost 1, parallel safe
                    --  convert int2 to float8
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return double precision
                        #2: in smallint
                float84div(double precision,real): function attributes: strict, cost 1, parallel safe
                    --  implementation of / operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return double precision
                        #2: in double precision
                        #3: in real
                float84eq(double precision,real): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of = operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in double precision
                        #3: in real
                float84ge(double precision,real): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of >= operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in double precision
                        #3: in real
                float84gt(double precision,real): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of > operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in double precision
                        #3: in real
                float84le(double precision,real): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of <= operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in double precision
                        #3: in real
                float84lt(double precision,real): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of < operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in double precision
                        #3: in real
                float84mi(double precision,real): function attributes: strict, cost 1, parallel safe
                    --  implementation of - operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return double precision
                        #2: in double precision
                        #3: in real
                float84mul(double precision,real): function attributes: strict, cost 1, parallel safe
                    --  implementation of * operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return double precision
                        #2: in double precision
                        #3: in real
                float84ne(double precision,real): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of <> operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in double precision
                        #3: in real
                float84pl(double precision,real): function attributes: strict, cost 1, parallel safe
                    --  implementation of + operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return double precision
                        #2: in double precision
                        #3: in real
                float8_accum(double precision[],double precision): function attributes: strict, cost 1, parallel safe
                    --  aggregate transition function
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return double precision[]
                        #2: in double precision[]
                        #3: in double precision
                float8_avg(double precision[]): function attributes: strict, cost 1, parallel safe
                    --  aggregate final function
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return double precision
                        #2: in double precision[]
                float8_combine(double precision[],double precision[]): function attributes: strict, cost 1, parallel safe
                    --  aggregate combine function
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return double precision[]
                        #2: in double precision[]
                        #3: in double precision[]
                float8_corr(double precision[]): function attributes: strict, cost 1, parallel safe
                    --  aggregate final function
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return double precision
                        #2: in double precision[]
                float8_covar_pop(double precision[]): function attributes: strict, cost 1, parallel safe
                    --  aggregate final function
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return double precision
                        #2: in double precision[]
                float8_covar_samp(double precision[]): function attributes: strict, cost 1, parallel safe
                    --  aggregate final function
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return double precision
                        #2: in double precision[]
                float8_regr_accum(double precision[],double precision,double precision): function attributes: strict, cost 1, parallel safe
                    --  aggregate transition function
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return double precision[]
                        #2: in double precision[]
                        #3: in double precision
                        #4: in double precision
                float8_regr_avgx(double precision[]): function attributes: strict, cost 1, parallel safe
                    --  aggregate final function
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return double precision
                        #2: in double precision[]
                float8_regr_avgy(double precision[]): function attributes: strict, cost 1, parallel safe
                    --  aggregate final function
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return double precision
                        #2: in double precision[]
                float8_regr_combine(double precision[],double precision[]): function attributes: strict, cost 1, parallel safe
                    --  aggregate combine function
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return double precision[]
                        #2: in double precision[]
                        #3: in double precision[]
                float8_regr_intercept(double precision[]): function attributes: strict, cost 1, parallel safe
                    --  aggregate final function
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return double precision
                        #2: in double precision[]
                float8_regr_r2(double precision[]): function attributes: strict, cost 1, parallel safe
                    --  aggregate final function
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return double precision
                        #2: in double precision[]
                float8_regr_slope(double precision[]): function attributes: strict, cost 1, parallel safe
                    --  aggregate final function
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return double precision
                        #2: in double precision[]
                float8_regr_sxx(double precision[]): function attributes: strict, cost 1, parallel safe
                    --  aggregate final function
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return double precision
                        #2: in double precision[]
                float8_regr_sxy(double precision[]): function attributes: strict, cost 1, parallel safe
                    --  aggregate final function
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return double precision
                        #2: in double precision[]
                float8_regr_syy(double precision[]): function attributes: strict, cost 1, parallel safe
                    --  aggregate final function
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return double precision
                        #2: in double precision[]
                float8_stddev_pop(double precision[]): function attributes: strict, cost 1, parallel safe
                    --  aggregate final function
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return double precision
                        #2: in double precision[]
                float8_stddev_samp(double precision[]): function attributes: strict, cost 1, parallel safe
                    --  aggregate final function
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return double precision
                        #2: in double precision[]
                float8_var_pop(double precision[]): function attributes: strict, cost 1, parallel safe
                    --  aggregate final function
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return double precision
                        #2: in double precision[]
                float8_var_samp(double precision[]): function attributes: strict, cost 1, parallel safe
                    --  aggregate final function
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return double precision
                        #2: in double precision[]
                float8abs(double precision): function attributes: strict, cost 1, parallel safe
                    --  implementation of @ operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return double precision
                        #2: in double precision
                float8div(double precision,double precision): function attributes: strict, cost 1, parallel safe
                    --  implementation of / operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return double precision
                        #2: in double precision
                        #3: in double precision
                float8eq(double precision,double precision): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of = operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in double precision
                        #3: in double precision
                float8ge(double precision,double precision): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of >= operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in double precision
                        #3: in double precision
                float8gt(double precision,double precision): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of > operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in double precision
                        #3: in double precision
                float8in(cstring): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return double precision
                        #2: in cstring
                float8larger(double precision,double precision): function attributes: strict, cost 1, parallel safe
                    --  larger of two
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return double precision
                        #2: in double precision
                        #3: in double precision
                float8le(double precision,double precision): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of <= operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in double precision
                        #3: in double precision
                float8lt(double precision,double precision): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of < operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in double precision
                        #3: in double precision
                float8mi(double precision,double precision): function attributes: strict, cost 1, parallel safe
                    --  implementation of - operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return double precision
                        #2: in double precision
                        #3: in double precision
                float8mul(double precision,double precision): function attributes: strict, cost 1, parallel safe
                    --  implementation of * operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return double precision
                        #2: in double precision
                        #3: in double precision
                float8ne(double precision,double precision): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of <> operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in double precision
                        #3: in double precision
                float8out(double precision): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return cstring
                        #2: in double precision
                float8pl(double precision,double precision): function attributes: strict, cost 1, parallel safe
                    --  implementation of + operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return double precision
                        #2: in double precision
                        #3: in double precision
                float8recv(internal): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return double precision
                        #2: in internal
                float8send(double precision): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bytea
                        #2: in double precision
                float8smaller(double precision,double precision): function attributes: strict, cost 1, parallel safe
                    --  smaller of two
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return double precision
                        #2: in double precision
                        #3: in double precision
                float8um(double precision): function attributes: strict, cost 1, parallel safe
                    --  implementation of - operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return double precision
                        #2: in double precision
                float8up(double precision): function attributes: strict, cost 1, parallel safe
                    --  implementation of + operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return double precision
                        #2: in double precision
                floor(double precision): function attributes: strict, cost 1, parallel safe
                    --  nearest integer <= value
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return double precision
                        #2: in double precision
                floor(numeric): function attributes: strict, cost 1, parallel safe
                    --  nearest integer <= value
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return numeric
                        #2: in numeric
                flt4_mul_cash(real,money): function attributes: strict, cost 1, parallel safe
                    --  implementation of * operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return money
                        #2: in real
                        #3: in money
                flt8_mul_cash(double precision,money): function attributes: strict, cost 1, parallel safe
                    --  implementation of * operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return money
                        #2: in double precision
                        #3: in money
                fmgr_c_validator(oid): function attributes: strict, cost 1, parallel safe
                    --  (internal)
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return void
                        #2: in oid
                fmgr_internal_validator(oid): function attributes: strict, cost 1, parallel safe
                    --  (internal)
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return void
                        #2: in oid
                fmgr_sql_validator(oid): function attributes: strict, cost 1, parallel safe
                    --  (internal)
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return void
                        #2: in oid
                format(text): function attributes: cost 1, parallel safe
                    --  format text message
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return text
                        #2: in text
                format(text,"any"): function attributes: cost 1, parallel safe
                    --  format text message
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return text
                        #2: in text
                        #3: in "any"
                            . properties
                                variadic +
                format_type(oid,integer): function attributes: cost 1, parallel safe
                    --  format a type oid and atttypmod to canonical SQL
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return text
                        #2: in oid
                        #3: in integer
                gb18030_to_utf8(integer,integer,cstring,internal,integer): function attributes: strict, parallel safe
                    --  internal conversion function for GB18030 to UTF8
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = c
                    + arguments
                        #1: return void
                        #2: in integer
                        #3: in integer
                        #4: in cstring
                        #5: in internal
                        #6: in integer
                gbk_to_utf8(integer,integer,cstring,internal,integer): function attributes: strict, parallel safe
                    --  internal conversion function for GBK to UTF8
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = c
                    + arguments
                        #1: return void
                        #2: in integer
                        #3: in integer
                        #4: in cstring
                        #5: in internal
                        #6: in integer
                generate_series(bigint,bigint): function attributes: strict, cost 1, parallel safe
                    --  non-persistent series generator
                    . properties
                        returns_set +
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return setof bigint
                        #2: in bigint
                        #3: in bigint
                generate_series(bigint,bigint,bigint): function attributes: strict, cost 1, parallel safe
                    --  non-persistent series generator
                    . properties
                        returns_set +
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return setof bigint
                        #2: in bigint
                        #3: in bigint
                        #4: in bigint
                generate_series(integer,integer): function attributes: strict, cost 1, parallel safe
                    --  non-persistent series generator
                    . properties
                        returns_set +
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return setof integer
                        #2: in integer
                        #3: in integer
                generate_series(integer,integer,integer): function attributes: strict, cost 1, parallel safe
                    --  non-persistent series generator
                    . properties
                        returns_set +
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return setof integer
                        #2: in integer
                        #3: in integer
                        #4: in integer
                generate_series(numeric,numeric): function attributes: strict, cost 1, parallel safe
                    --  non-persistent series generator
                    . properties
                        returns_set +
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return setof numeric
                        #2: in numeric
                        #3: in numeric
                generate_series(numeric,numeric,numeric): function attributes: strict, cost 1, parallel safe
                    --  non-persistent series generator
                    . properties
                        returns_set +
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return setof numeric
                        #2: in numeric
                        #3: in numeric
                        #4: in numeric
                generate_series(timestamp with time zone,timestamp with time zone,interval): function attributes: strict, cost 1, parallel safe
                    --  non-persistent series generator
                    . properties
                        returns_set +
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return setof timestamp with time zone
                        #2: in timestamp with time zone
                        #3: in timestamp with time zone
                        #4: in interval
                generate_series(timestamp,timestamp,interval): function attributes: strict, cost 1, parallel safe
                    --  non-persistent series generator
                    . properties
                        returns_set +
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return setof timestamp
                        #2: in timestamp
                        #3: in timestamp
                        #4: in interval
                generate_series_int4_support(internal): function attributes: strict, cost 1, parallel safe
                    --  planner support for generate_series
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return internal
                        #2: in internal
                generate_series_int8_support(internal): function attributes: strict, cost 1, parallel safe
                    --  planner support for generate_series
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return internal
                        #2: in internal
                generate_subscripts(anyarray,integer): function attributes: strict, cost 1, parallel safe
                    --  array subscripts generator
                    . properties
                        returns_set +
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return setof integer
                        #2: in anyarray
                        #3: in integer
                generate_subscripts(anyarray,integer,boolean): function attributes: strict, cost 1, parallel safe
                    --  array subscripts generator
                    . properties
                        returns_set +
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return setof integer
                        #2: in anyarray
                        #3: in integer
                        #4: in boolean
                get_bit(bit,integer): function attributes: strict, cost 1, parallel safe
                    --  get bit
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return integer
                        #2: in bit
                        #3: in integer
                get_bit(bytea,integer): function attributes: strict, cost 1, parallel safe
                    --  get bit
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return integer
                        #2: in bytea
                        #3: in integer
                get_byte(bytea,integer): function attributes: strict, cost 1, parallel safe
                    --  get byte
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return integer
                        #2: in bytea
                        #3: in integer
                get_current_ts_config(): function attributes: strict, cost 1, parallel safe
                    --  get current tsearch configuration
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return regconfig
                getdatabaseencoding(): function attributes: strict, cost 1, parallel safe
                    --  encoding name of current database
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return name
                getpgusername(): function attributes: strict, cost 1, parallel safe
                    --  deprecated, use current_user instead
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return name
                gin_clean_pending_list(regclass): function attributes: strict, cost 1
                    --  clean up GIN pending list
                    . references
                        language = internal
                    + arguments
                        #1: return bigint
                        #2: in regclass
                gin_cmp_prefix(text,text,smallint,internal): function attributes: strict, cost 1, parallel safe
                    --  GIN tsvector support
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return integer
                        #2: in text
                        #3: in text
                        #4: in smallint
                        #5: in internal
                gin_cmp_tslexeme(text,text): function attributes: strict, cost 1, parallel safe
                    --  GIN tsvector support
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return integer
                        #2: in text
                        #3: in text
                gin_compare_jsonb(text,text): function attributes: strict, cost 1, parallel safe
                    --  GIN support
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return integer
                        #2: in text
                        #3: in text
                gin_consistent_jsonb(internal,smallint,jsonb,integer,internal,internal,internal,internal): function attributes: strict, cost 1, parallel safe
                    --  GIN support
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in internal
                        #3: in smallint
                        #4: in jsonb
                        #5: in integer
                        #6: in internal
                        #7: in internal
                        #8: in internal
                        #9: in internal
                gin_consistent_jsonb_path(internal,smallint,jsonb,integer,internal,internal,internal,internal): function attributes: strict, cost 1, parallel safe
                    --  GIN support
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in internal
                        #3: in smallint
                        #4: in jsonb
                        #5: in integer
                        #6: in internal
                        #7: in internal
                        #8: in internal
                        #9: in internal
                gin_extract_jsonb(jsonb,internal,internal): function attributes: strict, cost 1, parallel safe
                    --  GIN support
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return internal
                        #2: in jsonb
                        #3: in internal
                        #4: in internal
                gin_extract_jsonb_path(jsonb,internal,internal): function attributes: strict, cost 1, parallel safe
                    --  GIN support
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return internal
                        #2: in jsonb
                        #3: in internal
                        #4: in internal
                gin_extract_jsonb_query(jsonb,internal,smallint,internal,internal,internal,internal): function attributes: strict, cost 1, parallel safe
                    --  GIN support
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return internal
                        #2: in jsonb
                        #3: in internal
                        #4: in smallint
                        #5: in internal
                        #6: in internal
                        #7: in internal
                        #8: in internal
                gin_extract_jsonb_query_path(jsonb,internal,smallint,internal,internal,internal,internal): function attributes: strict, cost 1, parallel safe
                    --  GIN support
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return internal
                        #2: in jsonb
                        #3: in internal
                        #4: in smallint
                        #5: in internal
                        #6: in internal
                        #7: in internal
                        #8: in internal
                gin_extract_tsquery(tsquery,internal,smallint,internal,internal): function attributes: strict, cost 1, parallel safe
                    --  GIN tsvector support (obsolete)
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return internal
                        #2: in tsquery
                        #3: in internal
                        #4: in smallint
                        #5: in internal
                        #6: in internal
                gin_extract_tsquery(tsquery,internal,smallint,internal,internal,internal,internal): function attributes: strict, cost 1, parallel safe
                    --  GIN tsvector support (obsolete)
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return internal
                        #2: in tsquery
                        #3: in internal
                        #4: in smallint
                        #5: in internal
                        #6: in internal
                        #7: in internal
                        #8: in internal
                gin_extract_tsquery(tsvector,internal,smallint,internal,internal,internal,internal): function attributes: strict, cost 1, parallel safe
                    --  GIN tsvector support
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return internal
                        #2: in tsvector
                        #3: in internal
                        #4: in smallint
                        #5: in internal
                        #6: in internal
                        #7: in internal
                        #8: in internal
                gin_extract_tsvector(tsvector,internal): function attributes: strict, cost 1, parallel safe
                    --  GIN tsvector support (obsolete)
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return internal
                        #2: in tsvector
                        #3: in internal
                gin_extract_tsvector(tsvector,internal,internal): function attributes: strict, cost 1, parallel safe
                    --  GIN tsvector support
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return internal
                        #2: in tsvector
                        #3: in internal
                        #4: in internal
                gin_triconsistent_jsonb(internal,smallint,jsonb,integer,internal,internal,internal): function attributes: strict, cost 1, parallel safe
                    --  GIN support
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return "char"
                        #2: in internal
                        #3: in smallint
                        #4: in jsonb
                        #5: in integer
                        #6: in internal
                        #7: in internal
                        #8: in internal
                gin_triconsistent_jsonb_path(internal,smallint,jsonb,integer,internal,internal,internal): function attributes: strict, cost 1, parallel safe
                    --  GIN support
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return "char"
                        #2: in internal
                        #3: in smallint
                        #4: in jsonb
                        #5: in integer
                        #6: in internal
                        #7: in internal
                        #8: in internal
                gin_tsquery_consistent(internal,smallint,tsquery,integer,internal,internal): function attributes: strict, cost 1, parallel safe
                    --  GIN tsvector support (obsolete)
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in internal
                        #3: in smallint
                        #4: in tsquery
                        #5: in integer
                        #6: in internal
                        #7: in internal
                gin_tsquery_consistent(internal,smallint,tsquery,integer,internal,internal,internal,internal): function attributes: strict, cost 1, parallel safe
                    --  GIN tsvector support (obsolete)
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in internal
                        #3: in smallint
                        #4: in tsquery
                        #5: in integer
                        #6: in internal
                        #7: in internal
                        #8: in internal
                        #9: in internal
                gin_tsquery_consistent(internal,smallint,tsvector,integer,internal,internal,internal,internal): function attributes: strict, cost 1, parallel safe
                    --  GIN tsvector support
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in internal
                        #3: in smallint
                        #4: in tsvector
                        #5: in integer
                        #6: in internal
                        #7: in internal
                        #8: in internal
                        #9: in internal
                gin_tsquery_triconsistent(internal,smallint,tsvector,integer,internal,internal,internal): function attributes: strict, cost 1, parallel safe
                    --  GIN tsvector support
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return "char"
                        #2: in internal
                        #3: in smallint
                        #4: in tsvector
                        #5: in integer
                        #6: in internal
                        #7: in internal
                        #8: in internal
                ginarrayconsistent(internal,smallint,anyarray,integer,internal,internal,internal,internal): function attributes: strict, cost 1, parallel safe
                    --  GIN array support
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in internal
                        #3: in smallint
                        #4: in anyarray
                        #5: in integer
                        #6: in internal
                        #7: in internal
                        #8: in internal
                        #9: in internal
                ginarrayextract(anyarray,internal): function attributes: strict, cost 1, parallel safe
                    --  GIN array support (obsolete)
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return internal
                        #2: in anyarray
                        #3: in internal
                ginarrayextract(anyarray,internal,internal): function attributes: strict, cost 1, parallel safe
                    --  GIN array support
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return internal
                        #2: in anyarray
                        #3: in internal
                        #4: in internal
                ginarraytriconsistent(internal,smallint,anyarray,integer,internal,internal,internal): function attributes: strict, cost 1, parallel safe
                    --  GIN array support
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return "char"
                        #2: in internal
                        #3: in smallint
                        #4: in anyarray
                        #5: in integer
                        #6: in internal
                        #7: in internal
                        #8: in internal
                ginhandler(internal): function attributes: strict, cost 1, parallel safe
                    --  gin index access method handler
                    . references
                        language = internal
                    + arguments
                        #1: return index_am_handler
                        #2: in internal
                ginqueryarrayextract(anyarray,internal,smallint,internal,internal,internal,internal): function attributes: strict, cost 1, parallel safe
                    --  GIN array support
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return internal
                        #2: in anyarray
                        #3: in internal
                        #4: in smallint
                        #5: in internal
                        #6: in internal
                        #7: in internal
                        #8: in internal
                gist_box_consistent(internal,box,smallint,oid,internal): function attributes: strict, cost 1, parallel safe
                    --  GiST support
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in internal
                        #3: in box
                        #4: in smallint
                        #5: in oid
                        #6: in internal
                gist_box_penalty(internal,internal,internal): function attributes: strict, cost 1, parallel safe
                    --  GiST support
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return internal
                        #2: in internal
                        #3: in internal
                        #4: in internal
                gist_box_picksplit(internal,internal): function attributes: strict, cost 1, parallel safe
                    --  GiST support
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return internal
                        #2: in internal
                        #3: in internal
                gist_box_same(box,box,internal): function attributes: strict, cost 1, parallel safe
                    --  GiST support
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return internal
                        #2: in box
                        #3: in box
                        #4: in internal
                gist_box_union(internal,internal): function attributes: strict, cost 1, parallel safe
                    --  GiST support
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return box
                        #2: in internal
                        #3: in internal
                gist_circle_compress(internal): function attributes: strict, cost 1, parallel safe
                    --  GiST support
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return internal
                        #2: in internal
                gist_circle_consistent(internal,circle,smallint,oid,internal): function attributes: strict, cost 1, parallel safe
                    --  GiST support
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in internal
                        #3: in circle
                        #4: in smallint
                        #5: in oid
                        #6: in internal
                gist_circle_distance(internal,circle,smallint,oid,internal): function attributes: strict, cost 1, parallel safe
                    --  GiST support
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return double precision
                        #2: in internal
                        #3: in circle
                        #4: in smallint
                        #5: in oid
                        #6: in internal
                gist_point_compress(internal): function attributes: strict, cost 1, parallel safe
                    --  GiST support
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return internal
                        #2: in internal
                gist_point_consistent(internal,point,smallint,oid,internal): function attributes: strict, cost 1, parallel safe
                    --  GiST support
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in internal
                        #3: in point
                        #4: in smallint
                        #5: in oid
                        #6: in internal
                gist_point_distance(internal,point,smallint,oid,internal): function attributes: strict, cost 1, parallel safe
                    --  GiST support
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return double precision
                        #2: in internal
                        #3: in point
                        #4: in smallint
                        #5: in oid
                        #6: in internal
                gist_point_fetch(internal): function attributes: strict, cost 1, parallel safe
                    --  GiST support
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return internal
                        #2: in internal
                gist_poly_compress(internal): function attributes: strict, cost 1, parallel safe
                    --  GiST support
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return internal
                        #2: in internal
                gist_poly_consistent(internal,polygon,smallint,oid,internal): function attributes: strict, cost 1, parallel safe
                    --  GiST support
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in internal
                        #3: in polygon
                        #4: in smallint
                        #5: in oid
                        #6: in internal
                gist_poly_distance(internal,polygon,smallint,oid,internal): function attributes: strict, cost 1, parallel safe
                    --  GiST support
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return double precision
                        #2: in internal
                        #3: in polygon
                        #4: in smallint
                        #5: in oid
                        #6: in internal
                gisthandler(internal): function attributes: strict, cost 1, parallel safe
                    --  gist index access method handler
                    . references
                        language = internal
                    + arguments
                        #1: return index_am_handler
                        #2: in internal
                gtsquery_compress(internal): function attributes: strict, cost 1, parallel safe
                    --  GiST tsquery support
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return internal
                        #2: in internal
                gtsquery_consistent(internal,internal,integer,oid,internal): function attributes: strict, cost 1, parallel safe
                    --  GiST tsquery support (obsolete)
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in internal
                        #3: in internal
                        #4: in integer
                        #5: in oid
                        #6: in internal
                gtsquery_consistent(internal,tsquery,smallint,oid,internal): function attributes: strict, cost 1, parallel safe
                    --  GiST tsquery support
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in internal
                        #3: in tsquery
                        #4: in smallint
                        #5: in oid
                        #6: in internal
                gtsquery_penalty(internal,internal,internal): function attributes: strict, cost 1, parallel safe
                    --  GiST tsquery support
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return internal
                        #2: in internal
                        #3: in internal
                        #4: in internal
                gtsquery_picksplit(internal,internal): function attributes: strict, cost 1, parallel safe
                    --  GiST tsquery support
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return internal
                        #2: in internal
                        #3: in internal
                gtsquery_same(bigint,bigint,internal): function attributes: strict, cost 1, parallel safe
                    --  GiST tsquery support
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return internal
                        #2: in bigint
                        #3: in bigint
                        #4: in internal
                gtsquery_union(internal,internal): function attributes: strict, cost 1, parallel safe
                    --  GiST tsquery support
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bigint
                        #2: in internal
                        #3: in internal
                gtsvector_compress(internal): function attributes: strict, cost 1, parallel safe
                    --  GiST tsvector support
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return internal
                        #2: in internal
                gtsvector_consistent(internal,gtsvector,integer,oid,internal): function attributes: strict, cost 1, parallel safe
                    --  GiST tsvector support (obsolete)
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in internal
                        #3: in gtsvector
                        #4: in integer
                        #5: in oid
                        #6: in internal
                gtsvector_consistent(internal,tsvector,smallint,oid,internal): function attributes: strict, cost 1, parallel safe
                    --  GiST tsvector support
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in internal
                        #3: in tsvector
                        #4: in smallint
                        #5: in oid
                        #6: in internal
                gtsvector_decompress(internal): function attributes: strict, cost 1, parallel safe
                    --  GiST tsvector support
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return internal
                        #2: in internal
                gtsvector_penalty(internal,internal,internal): function attributes: strict, cost 1, parallel safe
                    --  GiST tsvector support
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return internal
                        #2: in internal
                        #3: in internal
                        #4: in internal
                gtsvector_picksplit(internal,internal): function attributes: strict, cost 1, parallel safe
                    --  GiST tsvector support
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return internal
                        #2: in internal
                        #3: in internal
                gtsvector_same(gtsvector,gtsvector,internal): function attributes: strict, cost 1, parallel safe
                    --  GiST tsvector support
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return internal
                        #2: in gtsvector
                        #3: in gtsvector
                        #4: in internal
                gtsvector_union(internal,internal): function attributes: strict, cost 1, parallel safe
                    --  GiST tsvector support
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return gtsvector
                        #2: in internal
                        #3: in internal
                gtsvectorin(cstring): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return gtsvector
                        #2: in cstring
                gtsvectorout(gtsvector): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return cstring
                        #2: in gtsvector
                has_any_column_privilege(name,oid,text): function attributes: strict, cost 10, parallel safe
                    --  user privilege on any column by username, rel oid
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in name
                        #3: in oid
                        #4: in text
                has_any_column_privilege(name,text,text): function attributes: strict, cost 10, parallel safe
                    --  user privilege on any column by username, rel name
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in name
                        #3: in text
                        #4: in text
                has_any_column_privilege(oid,oid,text): function attributes: strict, cost 10, parallel safe
                    --  user privilege on any column by user oid, rel oid
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in oid
                        #3: in oid
                        #4: in text
                has_any_column_privilege(oid,text): function attributes: strict, cost 10, parallel safe
                    --  current user privilege on any column by rel oid
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in oid
                        #3: in text
                has_any_column_privilege(oid,text,text): function attributes: strict, cost 10, parallel safe
                    --  user privilege on any column by user oid, rel name
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in oid
                        #3: in text
                        #4: in text
                has_any_column_privilege(text,text): function attributes: strict, cost 10, parallel safe
                    --  current user privilege on any column by rel name
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in text
                        #3: in text
                has_column_privilege(name,oid,smallint,text): function attributes: strict, cost 1, parallel safe
                    --  user privilege on column by username, rel oid, col attnum
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in name
                        #3: in oid
                        #4: in smallint
                        #5: in text
                has_column_privilege(name,oid,text,text): function attributes: strict, cost 1, parallel safe
                    --  user privilege on column by username, rel oid, col name
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in name
                        #3: in oid
                        #4: in text
                        #5: in text
                has_column_privilege(name,text,smallint,text): function attributes: strict, cost 1, parallel safe
                    --  user privilege on column by username, rel name, col attnum
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in name
                        #3: in text
                        #4: in smallint
                        #5: in text
                has_column_privilege(name,text,text,text): function attributes: strict, cost 1, parallel safe
                    --  user privilege on column by username, rel name, col name
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in name
                        #3: in text
                        #4: in text
                        #5: in text
                has_column_privilege(oid,oid,smallint,text): function attributes: strict, cost 1, parallel safe
                    --  user privilege on column by user oid, rel oid, col attnum
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in oid
                        #3: in oid
                        #4: in smallint
                        #5: in text
                has_column_privilege(oid,oid,text,text): function attributes: strict, cost 1, parallel safe
                    --  user privilege on column by user oid, rel oid, col name
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in oid
                        #3: in oid
                        #4: in text
                        #5: in text
                has_column_privilege(oid,smallint,text): function attributes: strict, cost 1, parallel safe
                    --  current user privilege on column by rel oid, col attnum
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in oid
                        #3: in smallint
                        #4: in text
                has_column_privilege(oid,text,smallint,text): function attributes: strict, cost 1, parallel safe
                    --  user privilege on column by user oid, rel name, col attnum
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in oid
                        #3: in text
                        #4: in smallint
                        #5: in text
                has_column_privilege(oid,text,text): function attributes: strict, cost 1, parallel safe
                    --  current user privilege on column by rel oid, col name
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in oid
                        #3: in text
                        #4: in text
                has_column_privilege(oid,text,text,text): function attributes: strict, cost 1, parallel safe
                    --  user privilege on column by user oid, rel name, col name
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in oid
                        #3: in text
                        #4: in text
                        #5: in text
                has_column_privilege(text,smallint,text): function attributes: strict, cost 1, parallel safe
                    --  current user privilege on column by rel name, col attnum
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in text
                        #3: in smallint
                        #4: in text
                has_column_privilege(text,text,text): function attributes: strict, cost 1, parallel safe
                    --  current user privilege on column by rel name, col name
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in text
                        #3: in text
                        #4: in text
                has_database_privilege(name,oid,text): function attributes: strict, cost 1, parallel safe
                    --  user privilege on database by username, database oid
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in name
                        #3: in oid
                        #4: in text
                has_database_privilege(name,text,text): function attributes: strict, cost 1, parallel safe
                    --  user privilege on database by username, database name
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in name
                        #3: in text
                        #4: in text
                has_database_privilege(oid,oid,text): function attributes: strict, cost 1, parallel safe
                    --  user privilege on database by user oid, database oid
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in oid
                        #3: in oid
                        #4: in text
                has_database_privilege(oid,text): function attributes: strict, cost 1, parallel safe
                    --  current user privilege on database by database oid
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in oid
                        #3: in text
                has_database_privilege(oid,text,text): function attributes: strict, cost 1, parallel safe
                    --  user privilege on database by user oid, database name
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in oid
                        #3: in text
                        #4: in text
                has_database_privilege(text,text): function attributes: strict, cost 1, parallel safe
                    --  current user privilege on database by database name
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in text
                        #3: in text
                has_foreign_data_wrapper_privilege(name,oid,text): function attributes: strict, cost 1, parallel safe
                    --  user privilege on foreign data wrapper by username, foreign data wrapper oid
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in name
                        #3: in oid
                        #4: in text
                has_foreign_data_wrapper_privilege(name,text,text): function attributes: strict, cost 1, parallel safe
                    --  user privilege on foreign data wrapper by username, foreign data wrapper name
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in name
                        #3: in text
                        #4: in text
                has_foreign_data_wrapper_privilege(oid,oid,text): function attributes: strict, cost 1, parallel safe
                    --  user privilege on foreign data wrapper by user oid, foreign data wrapper oid
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in oid
                        #3: in oid
                        #4: in text
                has_foreign_data_wrapper_privilege(oid,text): function attributes: strict, cost 1, parallel safe
                    --  current user privilege on foreign data wrapper by foreign data wrapper oid
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in oid
                        #3: in text
                has_foreign_data_wrapper_privilege(oid,text,text): function attributes: strict, cost 1, parallel safe
                    --  user privilege on foreign data wrapper by user oid, foreign data wrapper name
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in oid
                        #3: in text
                        #4: in text
                has_foreign_data_wrapper_privilege(text,text): function attributes: strict, cost 1, parallel safe
                    --  current user privilege on foreign data wrapper by foreign data wrapper name
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in text
                        #3: in text
                has_function_privilege(name,oid,text): function attributes: strict, cost 1, parallel safe
                    --  user privilege on function by username, function oid
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in name
                        #3: in oid
                        #4: in text
                has_function_privilege(name,text,text): function attributes: strict, cost 1, parallel safe
                    --  user privilege on function by username, function name
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in name
                        #3: in text
                        #4: in text
                has_function_privilege(oid,oid,text): function attributes: strict, cost 1, parallel safe
                    --  user privilege on function by user oid, function oid
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in oid
                        #3: in oid
                        #4: in text
                has_function_privilege(oid,text): function attributes: strict, cost 1, parallel safe
                    --  current user privilege on function by function oid
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in oid
                        #3: in text
                has_function_privilege(oid,text,text): function attributes: strict, cost 1, parallel safe
                    --  user privilege on function by user oid, function name
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in oid
                        #3: in text
                        #4: in text
                has_function_privilege(text,text): function attributes: strict, cost 1, parallel safe
                    --  current user privilege on function by function name
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in text
                        #3: in text
                has_language_privilege(name,oid,text): function attributes: strict, cost 1, parallel safe
                    --  user privilege on language by username, language oid
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in name
                        #3: in oid
                        #4: in text
                has_language_privilege(name,text,text): function attributes: strict, cost 1, parallel safe
                    --  user privilege on language by username, language name
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in name
                        #3: in text
                        #4: in text
                has_language_privilege(oid,oid,text): function attributes: strict, cost 1, parallel safe
                    --  user privilege on language by user oid, language oid
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in oid
                        #3: in oid
                        #4: in text
                has_language_privilege(oid,text): function attributes: strict, cost 1, parallel safe
                    --  current user privilege on language by language oid
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in oid
                        #3: in text
                has_language_privilege(oid,text,text): function attributes: strict, cost 1, parallel safe
                    --  user privilege on language by user oid, language name
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in oid
                        #3: in text
                        #4: in text
                has_language_privilege(text,text): function attributes: strict, cost 1, parallel safe
                    --  current user privilege on language by language name
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in text
                        #3: in text
                has_schema_privilege(name,oid,text): function attributes: strict, cost 1, parallel safe
                    --  user privilege on schema by username, schema oid
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in name
                        #3: in oid
                        #4: in text
                has_schema_privilege(name,text,text): function attributes: strict, cost 1, parallel safe
                    --  user privilege on schema by username, schema name
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in name
                        #3: in text
                        #4: in text
                has_schema_privilege(oid,oid,text): function attributes: strict, cost 1, parallel safe
                    --  user privilege on schema by user oid, schema oid
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in oid
                        #3: in oid
                        #4: in text
                has_schema_privilege(oid,text): function attributes: strict, cost 1, parallel safe
                    --  current user privilege on schema by schema oid
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in oid
                        #3: in text
                has_schema_privilege(oid,text,text): function attributes: strict, cost 1, parallel safe
                    --  user privilege on schema by user oid, schema name
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in oid
                        #3: in text
                        #4: in text
                has_schema_privilege(text,text): function attributes: strict, cost 1, parallel safe
                    --  current user privilege on schema by schema name
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in text
                        #3: in text
                has_sequence_privilege(name,oid,text): function attributes: strict, cost 1, parallel safe
                    --  user privilege on sequence by username, seq oid
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in name
                        #3: in oid
                        #4: in text
                has_sequence_privilege(name,text,text): function attributes: strict, cost 1, parallel safe
                    --  user privilege on sequence by username, seq name
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in name
                        #3: in text
                        #4: in text
                has_sequence_privilege(oid,oid,text): function attributes: strict, cost 1, parallel safe
                    --  user privilege on sequence by user oid, seq oid
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in oid
                        #3: in oid
                        #4: in text
                has_sequence_privilege(oid,text): function attributes: strict, cost 1, parallel safe
                    --  current user privilege on sequence by seq oid
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in oid
                        #3: in text
                has_sequence_privilege(oid,text,text): function attributes: strict, cost 1, parallel safe
                    --  user privilege on sequence by user oid, seq name
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in oid
                        #3: in text
                        #4: in text
                has_sequence_privilege(text,text): function attributes: strict, cost 1, parallel safe
                    --  current user privilege on sequence by seq name
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in text
                        #3: in text
                has_server_privilege(name,oid,text): function attributes: strict, cost 1, parallel safe
                    --  user privilege on server by username, server oid
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in name
                        #3: in oid
                        #4: in text
                has_server_privilege(name,text,text): function attributes: strict, cost 1, parallel safe
                    --  user privilege on server by username, server name
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in name
                        #3: in text
                        #4: in text
                has_server_privilege(oid,oid,text): function attributes: strict, cost 1, parallel safe
                    --  user privilege on server by user oid, server oid
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in oid
                        #3: in oid
                        #4: in text
                has_server_privilege(oid,text): function attributes: strict, cost 1, parallel safe
                    --  current user privilege on server by server oid
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in oid
                        #3: in text
                has_server_privilege(oid,text,text): function attributes: strict, cost 1, parallel safe
                    --  user privilege on server by user oid, server name
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in oid
                        #3: in text
                        #4: in text
                has_server_privilege(text,text): function attributes: strict, cost 1, parallel safe
                    --  current user privilege on server by server name
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in text
                        #3: in text
                has_table_privilege(name,oid,text): function attributes: strict, cost 1, parallel safe
                    --  user privilege on relation by username, rel oid
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in name
                        #3: in oid
                        #4: in text
                has_table_privilege(name,text,text): function attributes: strict, cost 1, parallel safe
                    --  user privilege on relation by username, rel name
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in name
                        #3: in text
                        #4: in text
                has_table_privilege(oid,oid,text): function attributes: strict, cost 1, parallel safe
                    --  user privilege on relation by user oid, rel oid
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in oid
                        #3: in oid
                        #4: in text
                has_table_privilege(oid,text): function attributes: strict, cost 1, parallel safe
                    --  current user privilege on relation by rel oid
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in oid
                        #3: in text
                has_table_privilege(oid,text,text): function attributes: strict, cost 1, parallel safe
                    --  user privilege on relation by user oid, rel name
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in oid
                        #3: in text
                        #4: in text
                has_table_privilege(text,text): function attributes: strict, cost 1, parallel safe
                    --  current user privilege on relation by rel name
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in text
                        #3: in text
                has_tablespace_privilege(name,oid,text): function attributes: strict, cost 1, parallel safe
                    --  user privilege on tablespace by username, tablespace oid
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in name
                        #3: in oid
                        #4: in text
                has_tablespace_privilege(name,text,text): function attributes: strict, cost 1, parallel safe
                    --  user privilege on tablespace by username, tablespace name
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in name
                        #3: in text
                        #4: in text
                has_tablespace_privilege(oid,oid,text): function attributes: strict, cost 1, parallel safe
                    --  user privilege on tablespace by user oid, tablespace oid
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in oid
                        #3: in oid
                        #4: in text
                has_tablespace_privilege(oid,text): function attributes: strict, cost 1, parallel safe
                    --  current user privilege on tablespace by tablespace oid
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in oid
                        #3: in text
                has_tablespace_privilege(oid,text,text): function attributes: strict, cost 1, parallel safe
                    --  user privilege on tablespace by user oid, tablespace name
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in oid
                        #3: in text
                        #4: in text
                has_tablespace_privilege(text,text): function attributes: strict, cost 1, parallel safe
                    --  current user privilege on tablespace by tablespace name
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in text
                        #3: in text
                has_type_privilege(name,oid,text): function attributes: strict, cost 1, parallel safe
                    --  user privilege on type by username, type oid
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in name
                        #3: in oid
                        #4: in text
                has_type_privilege(name,text,text): function attributes: strict, cost 1, parallel safe
                    --  user privilege on type by username, type name
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in name
                        #3: in text
                        #4: in text
                has_type_privilege(oid,oid,text): function attributes: strict, cost 1, parallel safe
                    --  user privilege on type by user oid, type oid
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in oid
                        #3: in oid
                        #4: in text
                has_type_privilege(oid,text): function attributes: strict, cost 1, parallel safe
                    --  current user privilege on type by type oid
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in oid
                        #3: in text
                has_type_privilege(oid,text,text): function attributes: strict, cost 1, parallel safe
                    --  user privilege on type by user oid, type name
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in oid
                        #3: in text
                        #4: in text
                has_type_privilege(text,text): function attributes: strict, cost 1, parallel safe
                    --  current user privilege on type by type name
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in text
                        #3: in text
                hash_aclitem(aclitem): function attributes: strict, cost 1, parallel safe
                    --  hash
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return integer
                        #2: in aclitem
                hash_aclitem_extended(aclitem,bigint): function attributes: strict, cost 1, parallel safe
                    --  hash
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bigint
                        #2: in aclitem
                        #3: in bigint
                hash_array(anyarray): function attributes: strict, cost 1, parallel safe
                    --  hash
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return integer
                        #2: in anyarray
                hash_array_extended(anyarray,bigint): function attributes: strict, cost 1, parallel safe
                    --  hash
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bigint
                        #2: in anyarray
                        #3: in bigint
                hash_numeric(numeric): function attributes: strict, cost 1, parallel safe
                    --  hash
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return integer
                        #2: in numeric
                hash_numeric_extended(numeric,bigint): function attributes: strict, cost 1, parallel safe
                    --  hash
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bigint
                        #2: in numeric
                        #3: in bigint
                hash_range(anyrange): function attributes: strict, cost 1, parallel safe
                    --  hash a range
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return integer
                        #2: in anyrange
                hash_range_extended(anyrange,bigint): function attributes: strict, cost 1, parallel safe
                    --  hash a range
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bigint
                        #2: in anyrange
                        #3: in bigint
                hashbpchar(char): function attributes: strict, cost 1, parallel safe
                    --  hash
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return integer
                        #2: in char
                hashbpcharextended(char,bigint): function attributes: strict, cost 1, parallel safe
                    --  hash
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bigint
                        #2: in char
                        #3: in bigint
                hashchar("char"): function attributes: strict, cost 1, parallel safe
                    --  hash
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return integer
                        #2: in "char"
                hashcharextended("char",bigint): function attributes: strict, cost 1, parallel safe
                    --  hash
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bigint
                        #2: in "char"
                        #3: in bigint
                hashenum(anyenum): function attributes: strict, cost 1, parallel safe
                    --  hash
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return integer
                        #2: in anyenum
                hashenumextended(anyenum,bigint): function attributes: strict, cost 1, parallel safe
                    --  hash
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bigint
                        #2: in anyenum
                        #3: in bigint
                hashfloat4(real): function attributes: strict, cost 1, parallel safe
                    --  hash
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return integer
                        #2: in real
                hashfloat4extended(real,bigint): function attributes: strict, cost 1, parallel safe
                    --  hash
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bigint
                        #2: in real
                        #3: in bigint
                hashfloat8(double precision): function attributes: strict, cost 1, parallel safe
                    --  hash
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return integer
                        #2: in double precision
                hashfloat8extended(double precision,bigint): function attributes: strict, cost 1, parallel safe
                    --  hash
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bigint
                        #2: in double precision
                        #3: in bigint
                hashhandler(internal): function attributes: strict, cost 1, parallel safe
                    --  hash index access method handler
                    . references
                        language = internal
                    + arguments
                        #1: return index_am_handler
                        #2: in internal
                hashinet(inet): function attributes: strict, cost 1, parallel safe
                    --  hash
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return integer
                        #2: in inet
                hashinetextended(inet,bigint): function attributes: strict, cost 1, parallel safe
                    --  hash
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bigint
                        #2: in inet
                        #3: in bigint
                hashint2(smallint): function attributes: strict, cost 1, parallel safe
                    --  hash
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return integer
                        #2: in smallint
                hashint2extended(smallint,bigint): function attributes: strict, cost 1, parallel safe
                    --  hash
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bigint
                        #2: in smallint
                        #3: in bigint
                hashint4(integer): function attributes: strict, cost 1, parallel safe
                    --  hash
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return integer
                        #2: in integer
                hashint4extended(integer,bigint): function attributes: strict, cost 1, parallel safe
                    --  hash
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bigint
                        #2: in integer
                        #3: in bigint
                hashint8(bigint): function attributes: strict, cost 1, parallel safe
                    --  hash
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return integer
                        #2: in bigint
                hashint8extended(bigint,bigint): function attributes: strict, cost 1, parallel safe
                    --  hash
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bigint
                        #2: in bigint
                        #3: in bigint
                hashmacaddr(macaddr): function attributes: strict, cost 1, parallel safe
                    --  hash
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return integer
                        #2: in macaddr
                hashmacaddr8(macaddr8): function attributes: strict, cost 1, parallel safe
                    --  hash
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return integer
                        #2: in macaddr8
                hashmacaddr8extended(macaddr8,bigint): function attributes: strict, cost 1, parallel safe
                    --  hash
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bigint
                        #2: in macaddr8
                        #3: in bigint
                hashmacaddrextended(macaddr,bigint): function attributes: strict, cost 1, parallel safe
                    --  hash
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bigint
                        #2: in macaddr
                        #3: in bigint
                hashname(name): function attributes: strict, cost 1, parallel safe
                    --  hash
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return integer
                        #2: in name
                hashnameextended(name,bigint): function attributes: strict, cost 1, parallel safe
                    --  hash
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bigint
                        #2: in name
                        #3: in bigint
                hashoid(oid): function attributes: strict, cost 1, parallel safe
                    --  hash
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return integer
                        #2: in oid
                hashoidextended(oid,bigint): function attributes: strict, cost 1, parallel safe
                    --  hash
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bigint
                        #2: in oid
                        #3: in bigint
                hashoidvector(oidvector): function attributes: strict, cost 1, parallel safe
                    --  hash
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return integer
                        #2: in oidvector
                hashoidvectorextended(oidvector,bigint): function attributes: strict, cost 1, parallel safe
                    --  hash
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bigint
                        #2: in oidvector
                        #3: in bigint
                hashtext(text): function attributes: strict, cost 1, parallel safe
                    --  hash
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return integer
                        #2: in text
                hashtextextended(text,bigint): function attributes: strict, cost 1, parallel safe
                    --  hash
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bigint
                        #2: in text
                        #3: in bigint
                hashtid(tid): function attributes: strict, cost 1, parallel safe
                    --  hash
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return integer
                        #2: in tid
                hashtidextended(tid,bigint): function attributes: strict, cost 1, parallel safe
                    --  hash
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bigint
                        #2: in tid
                        #3: in bigint
                hashvarlena(internal): function attributes: strict, cost 1, parallel safe
                    --  hash
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return integer
                        #2: in internal
                hashvarlenaextended(internal,bigint): function attributes: strict, cost 1, parallel safe
                    --  hash
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bigint
                        #2: in internal
                        #3: in bigint
                heap_tableam_handler(internal): function attributes: strict, cost 1, parallel safe
                    --  row-oriented heap table access method handler
                    . references
                        language = internal
                    + arguments
                        #1: return table_am_handler
                        #2: in internal
                height(box): function attributes: strict, cost 1, parallel safe
                    --  box height
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return double precision
                        #2: in box
                host(inet): function attributes: strict, cost 1, parallel safe
                    --  show address octets only
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return text
                        #2: in inet
                hostmask(inet): function attributes: strict, cost 1, parallel safe
                    --  hostmask of address
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return inet
                        #2: in inet
                iclikejoinsel(internal,oid,internal,smallint,internal): function attributes: strict, cost 1, parallel safe
                    --  join selectivity of ILIKE
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return double precision
                        #2: in internal
                        #3: in oid
                        #4: in internal
                        #5: in smallint
                        #6: in internal
                iclikesel(internal,oid,internal,integer): function attributes: strict, cost 1, parallel safe
                    --  restriction selectivity of ILIKE
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return double precision
                        #2: in internal
                        #3: in oid
                        #4: in internal
                        #5: in integer
                icnlikejoinsel(internal,oid,internal,smallint,internal): function attributes: strict, cost 1, parallel safe
                    --  join selectivity of NOT ILIKE
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return double precision
                        #2: in internal
                        #3: in oid
                        #4: in internal
                        #5: in smallint
                        #6: in internal
                icnlikesel(internal,oid,internal,integer): function attributes: strict, cost 1, parallel safe
                    --  restriction selectivity of NOT ILIKE
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return double precision
                        #2: in internal
                        #3: in oid
                        #4: in internal
                        #5: in integer
                icregexeqjoinsel(internal,oid,internal,smallint,internal): function attributes: strict, cost 1, parallel safe
                    --  join selectivity of case-insensitive regex match
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return double precision
                        #2: in internal
                        #3: in oid
                        #4: in internal
                        #5: in smallint
                        #6: in internal
                icregexeqsel(internal,oid,internal,integer): function attributes: strict, cost 1, parallel safe
                    --  restriction selectivity of case-insensitive regex match
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return double precision
                        #2: in internal
                        #3: in oid
                        #4: in internal
                        #5: in integer
                icregexnejoinsel(internal,oid,internal,smallint,internal): function attributes: strict, cost 1, parallel safe
                    --  join selectivity of case-insensitive regex non-match
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return double precision
                        #2: in internal
                        #3: in oid
                        #4: in internal
                        #5: in smallint
                        #6: in internal
                icregexnesel(internal,oid,internal,integer): function attributes: strict, cost 1, parallel safe
                    --  restriction selectivity of case-insensitive regex non-match
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return double precision
                        #2: in internal
                        #3: in oid
                        #4: in internal
                        #5: in integer
                in_range(bigint,bigint,bigint,boolean,boolean): function attributes: strict, cost 1, parallel safe
                    --  window RANGE support
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in bigint
                        #3: in bigint
                        #4: in bigint
                        #5: in boolean
                        #6: in boolean
                in_range(date,date,interval,boolean,boolean): function attributes: strict, cost 1, parallel safe
                    --  window RANGE support
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in date
                        #3: in date
                        #4: in interval
                        #5: in boolean
                        #6: in boolean
                in_range(double precision,double precision,double precision,boolean,boolean): function attributes: strict, cost 1, parallel safe
                    --  window RANGE support
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in double precision
                        #3: in double precision
                        #4: in double precision
                        #5: in boolean
                        #6: in boolean
                in_range(integer,integer,bigint,boolean,boolean): function attributes: strict, cost 1, parallel safe
                    --  window RANGE support
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in integer
                        #3: in integer
                        #4: in bigint
                        #5: in boolean
                        #6: in boolean
                in_range(integer,integer,integer,boolean,boolean): function attributes: strict, cost 1, parallel safe
                    --  window RANGE support
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in integer
                        #3: in integer
                        #4: in integer
                        #5: in boolean
                        #6: in boolean
                in_range(integer,integer,smallint,boolean,boolean): function attributes: strict, cost 1, parallel safe
                    --  window RANGE support
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in integer
                        #3: in integer
                        #4: in smallint
                        #5: in boolean
                        #6: in boolean
                in_range(interval,interval,interval,boolean,boolean): function attributes: strict, cost 1, parallel safe
                    --  window RANGE support
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in interval
                        #3: in interval
                        #4: in interval
                        #5: in boolean
                        #6: in boolean
                in_range(numeric,numeric,numeric,boolean,boolean): function attributes: strict, cost 1, parallel safe
                    --  window RANGE support
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in numeric
                        #3: in numeric
                        #4: in numeric
                        #5: in boolean
                        #6: in boolean
                in_range(real,real,double precision,boolean,boolean): function attributes: strict, cost 1, parallel safe
                    --  window RANGE support
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in real
                        #3: in real
                        #4: in double precision
                        #5: in boolean
                        #6: in boolean
                in_range(smallint,smallint,bigint,boolean,boolean): function attributes: strict, cost 1, parallel safe
                    --  window RANGE support
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in smallint
                        #3: in smallint
                        #4: in bigint
                        #5: in boolean
                        #6: in boolean
                in_range(smallint,smallint,integer,boolean,boolean): function attributes: strict, cost 1, parallel safe
                    --  window RANGE support
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in smallint
                        #3: in smallint
                        #4: in integer
                        #5: in boolean
                        #6: in boolean
                in_range(smallint,smallint,smallint,boolean,boolean): function attributes: strict, cost 1, parallel safe
                    --  window RANGE support
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in smallint
                        #3: in smallint
                        #4: in smallint
                        #5: in boolean
                        #6: in boolean
                in_range(time with time zone,time with time zone,interval,boolean,boolean): function attributes: strict, cost 1, parallel safe
                    --  window RANGE support
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in time with time zone
                        #3: in time with time zone
                        #4: in interval
                        #5: in boolean
                        #6: in boolean
                in_range(time,time,interval,boolean,boolean): function attributes: strict, cost 1, parallel safe
                    --  window RANGE support
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in time
                        #3: in time
                        #4: in interval
                        #5: in boolean
                        #6: in boolean
                in_range(timestamp with time zone,timestamp with time zone,interval,boolean,boolean): function attributes: strict, cost 1, parallel safe
                    --  window RANGE support
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in timestamp with time zone
                        #3: in timestamp with time zone
                        #4: in interval
                        #5: in boolean
                        #6: in boolean
                in_range(timestamp,timestamp,interval,boolean,boolean): function attributes: strict, cost 1, parallel safe
                    --  window RANGE support
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in timestamp
                        #3: in timestamp
                        #4: in interval
                        #5: in boolean
                        #6: in boolean
                index_am_handler_in(cstring): function attributes: cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return index_am_handler
                        #2: in cstring
                index_am_handler_out(index_am_handler): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return cstring
                        #2: in index_am_handler
                inet_client_addr(): function attributes: cost 1, parallel restricted
                    --  inet address of the client
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return inet
                inet_client_port(): function attributes: cost 1, parallel restricted
                    --  client's port number for this connection
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return integer
                inet_gist_compress(internal): function attributes: strict, cost 1, parallel safe
                    --  GiST support
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return internal
                        #2: in internal
                inet_gist_consistent(internal,inet,smallint,oid,internal): function attributes: strict, cost 1, parallel safe
                    --  GiST support
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in internal
                        #3: in inet
                        #4: in smallint
                        #5: in oid
                        #6: in internal
                inet_gist_fetch(internal): function attributes: strict, cost 1, parallel safe
                    --  GiST support
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return internal
                        #2: in internal
                inet_gist_penalty(internal,internal,internal): function attributes: strict, cost 1, parallel safe
                    --  GiST support
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return internal
                        #2: in internal
                        #3: in internal
                        #4: in internal
                inet_gist_picksplit(internal,internal): function attributes: strict, cost 1, parallel safe
                    --  GiST support
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return internal
                        #2: in internal
                        #3: in internal
                inet_gist_same(inet,inet,internal): function attributes: strict, cost 1, parallel safe
                    --  GiST support
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return internal
                        #2: in inet
                        #3: in inet
                        #4: in internal
                inet_gist_union(internal,internal): function attributes: strict, cost 1, parallel safe
                    --  GiST support
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return inet
                        #2: in internal
                        #3: in internal
                inet_in(cstring): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return inet
                        #2: in cstring
                inet_merge(inet,inet): function attributes: strict, cost 1, parallel safe
                    --  the smallest network which includes both of the given networks
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return cidr
                        #2: in inet
                        #3: in inet
                inet_out(inet): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return cstring
                        #2: in inet
                inet_recv(internal): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return inet
                        #2: in internal
                inet_same_family(inet,inet): function attributes: strict, cost 1, parallel safe
                    --  are the addresses from the same family?
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in inet
                        #3: in inet
                inet_send(inet): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bytea
                        #2: in inet
                inet_server_addr(): function attributes: cost 1, parallel safe
                    --  inet address of the server
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return inet
                inet_server_port(): function attributes: cost 1, parallel safe
                    --  server's port number for this connection
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return integer
                inet_spg_choose(internal,internal): function attributes: strict, cost 1, parallel safe
                    --  SP-GiST support
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return void
                        #2: in internal
                        #3: in internal
                inet_spg_config(internal,internal): function attributes: strict, cost 1, parallel safe
                    --  SP-GiST support
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return void
                        #2: in internal
                        #3: in internal
                inet_spg_inner_consistent(internal,internal): function attributes: strict, cost 1, parallel safe
                    --  SP-GiST support
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return void
                        #2: in internal
                        #3: in internal
                inet_spg_leaf_consistent(internal,internal): function attributes: strict, cost 1, parallel safe
                    --  SP-GiST support
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in internal
                        #3: in internal
                inet_spg_picksplit(internal,internal): function attributes: strict, cost 1, parallel safe
                    --  SP-GiST support
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return void
                        #2: in internal
                        #3: in internal
                inetand(inet,inet): function attributes: strict, cost 1, parallel safe
                    --  implementation of & operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return inet
                        #2: in inet
                        #3: in inet
                inetmi(inet,inet): function attributes: strict, cost 1, parallel safe
                    --  implementation of - operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bigint
                        #2: in inet
                        #3: in inet
                inetmi_int8(inet,bigint): function attributes: strict, cost 1, parallel safe
                    --  implementation of - operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return inet
                        #2: in inet
                        #3: in bigint
                inetnot(inet): function attributes: strict, cost 1, parallel safe
                    --  implementation of ~ operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return inet
                        #2: in inet
                inetor(inet,inet): function attributes: strict, cost 1, parallel safe
                    --  implementation of | operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return inet
                        #2: in inet
                        #3: in inet
                inetpl(inet,bigint): function attributes: strict, cost 1, parallel safe
                    --  implementation of + operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return inet
                        #2: in inet
                        #3: in bigint
                initcap(text): function attributes: strict, cost 1, parallel safe
                    --  capitalize each word
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return text
                        #2: in text
                int2(bigint): function attributes: strict, cost 1, parallel safe
                    --  convert int8 to int2
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return smallint
                        #2: in bigint
                int2(double precision): function attributes: strict, cost 1, parallel safe
                    --  convert float8 to int2
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return smallint
                        #2: in double precision
                int2(integer): function attributes: strict, cost 1, parallel safe
                    --  convert int4 to int2
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return smallint
                        #2: in integer
                int2(jsonb): function attributes: strict, cost 1, parallel safe
                    --  convert jsonb to int2
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return smallint
                        #2: in jsonb
                int2(numeric): function attributes: strict, cost 1, parallel safe
                    --  convert numeric to int2
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return smallint
                        #2: in numeric
                int2(real): function attributes: strict, cost 1, parallel safe
                    --  convert float4 to int2
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return smallint
                        #2: in real
                int24div(smallint,integer): function attributes: strict, cost 1, parallel safe
                    --  implementation of / operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return integer
                        #2: in smallint
                        #3: in integer
                int24eq(smallint,integer): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of = operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in smallint
                        #3: in integer
                int24ge(smallint,integer): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of >= operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in smallint
                        #3: in integer
                int24gt(smallint,integer): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of > operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in smallint
                        #3: in integer
                int24le(smallint,integer): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of <= operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in smallint
                        #3: in integer
                int24lt(smallint,integer): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of < operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in smallint
                        #3: in integer
                int24mi(smallint,integer): function attributes: strict, cost 1, parallel safe
                    --  implementation of - operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return integer
                        #2: in smallint
                        #3: in integer
                int24mul(smallint,integer): function attributes: strict, cost 1, parallel safe
                    --  implementation of * operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return integer
                        #2: in smallint
                        #3: in integer
                int24ne(smallint,integer): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of <> operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in smallint
                        #3: in integer
                int24pl(smallint,integer): function attributes: strict, cost 1, parallel safe
                    --  implementation of + operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return integer
                        #2: in smallint
                        #3: in integer
                int28div(smallint,bigint): function attributes: strict, cost 1, parallel safe
                    --  implementation of / operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bigint
                        #2: in smallint
                        #3: in bigint
                int28eq(smallint,bigint): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of = operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in smallint
                        #3: in bigint
                int28ge(smallint,bigint): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of >= operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in smallint
                        #3: in bigint
                int28gt(smallint,bigint): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of > operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in smallint
                        #3: in bigint
                int28le(smallint,bigint): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of <= operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in smallint
                        #3: in bigint
                int28lt(smallint,bigint): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of < operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in smallint
                        #3: in bigint
                int28mi(smallint,bigint): function attributes: strict, cost 1, parallel safe
                    --  implementation of - operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bigint
                        #2: in smallint
                        #3: in bigint
                int28mul(smallint,bigint): function attributes: strict, cost 1, parallel safe
                    --  implementation of * operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bigint
                        #2: in smallint
                        #3: in bigint
                int28ne(smallint,bigint): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of <> operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in smallint
                        #3: in bigint
                int28pl(smallint,bigint): function attributes: strict, cost 1, parallel safe
                    --  implementation of + operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bigint
                        #2: in smallint
                        #3: in bigint
                int2_accum(internal,smallint): function attributes: cost 1, parallel safe
                    --  aggregate transition function
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return internal
                        #2: in internal
                        #3: in smallint
                int2_accum_inv(internal,smallint): function attributes: cost 1, parallel safe
                    --  aggregate transition function
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return internal
                        #2: in internal
                        #3: in smallint
                int2_avg_accum(bigint[],smallint): function attributes: strict, cost 1, parallel safe
                    --  aggregate transition function
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bigint[]
                        #2: in bigint[]
                        #3: in smallint
                int2_avg_accum_inv(bigint[],smallint): function attributes: strict, cost 1, parallel safe
                    --  aggregate transition function
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bigint[]
                        #2: in bigint[]
                        #3: in smallint
                int2_mul_cash(smallint,money): function attributes: strict, cost 1, parallel safe
                    --  implementation of * operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return money
                        #2: in smallint
                        #3: in money
                int2_sum(bigint,smallint): function attributes: cost 1, parallel safe
                    --  aggregate transition function
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bigint
                        #2: in bigint
                        #3: in smallint
                int2abs(smallint): function attributes: strict, cost 1, parallel safe
                    --  implementation of @ operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return smallint
                        #2: in smallint
                int2and(smallint,smallint): function attributes: strict, cost 1, parallel safe
                    --  implementation of & operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return smallint
                        #2: in smallint
                        #3: in smallint
                int2div(smallint,smallint): function attributes: strict, cost 1, parallel safe
                    --  implementation of / operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return smallint
                        #2: in smallint
                        #3: in smallint
                int2eq(smallint,smallint): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of = operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in smallint
                        #3: in smallint
                int2ge(smallint,smallint): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of >= operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in smallint
                        #3: in smallint
                int2gt(smallint,smallint): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of > operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in smallint
                        #3: in smallint
                int2in(cstring): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return smallint
                        #2: in cstring
                int2int4_sum(bigint[]): function attributes: strict, cost 1, parallel safe
                    --  aggregate final function
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bigint
                        #2: in bigint[]
                int2larger(smallint,smallint): function attributes: strict, cost 1, parallel safe
                    --  larger of two
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return smallint
                        #2: in smallint
                        #3: in smallint
                int2le(smallint,smallint): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of <= operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in smallint
                        #3: in smallint
                int2lt(smallint,smallint): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of < operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in smallint
                        #3: in smallint
                int2mi(smallint,smallint): function attributes: strict, cost 1, parallel safe
                    --  implementation of - operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return smallint
                        #2: in smallint
                        #3: in smallint
                int2mod(smallint,smallint): function attributes: strict, cost 1, parallel safe
                    --  implementation of % operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return smallint
                        #2: in smallint
                        #3: in smallint
                int2mul(smallint,smallint): function attributes: strict, cost 1, parallel safe
                    --  implementation of * operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return smallint
                        #2: in smallint
                        #3: in smallint
                int2ne(smallint,smallint): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of <> operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in smallint
                        #3: in smallint
                int2not(smallint): function attributes: strict, cost 1, parallel safe
                    --  implementation of ~ operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return smallint
                        #2: in smallint
                int2or(smallint,smallint): function attributes: strict, cost 1, parallel safe
                    --  implementation of | operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return smallint
                        #2: in smallint
                        #3: in smallint
                int2out(smallint): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return cstring
                        #2: in smallint
                int2pl(smallint,smallint): function attributes: strict, cost 1, parallel safe
                    --  implementation of + operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return smallint
                        #2: in smallint
                        #3: in smallint
                int2recv(internal): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return smallint
                        #2: in internal
                int2send(smallint): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bytea
                        #2: in smallint
                int2shl(smallint,integer): function attributes: strict, cost 1, parallel safe
                    --  implementation of << operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return smallint
                        #2: in smallint
                        #3: in integer
                int2shr(smallint,integer): function attributes: strict, cost 1, parallel safe
                    --  implementation of >> operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return smallint
                        #2: in smallint
                        #3: in integer
                int2smaller(smallint,smallint): function attributes: strict, cost 1, parallel safe
                    --  smaller of two
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return smallint
                        #2: in smallint
                        #3: in smallint
                int2um(smallint): function attributes: strict, cost 1, parallel safe
                    --  implementation of - operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return smallint
                        #2: in smallint
                int2up(smallint): function attributes: strict, cost 1, parallel safe
                    --  implementation of + operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return smallint
                        #2: in smallint
                int2vectorin(cstring): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return int2vector
                        #2: in cstring
                int2vectorout(int2vector): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return cstring
                        #2: in int2vector
                int2vectorrecv(internal): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return int2vector
                        #2: in internal
                int2vectorsend(int2vector): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bytea
                        #2: in int2vector
                int2xor(smallint,smallint): function attributes: strict, cost 1, parallel safe
                    --  implementation of # operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return smallint
                        #2: in smallint
                        #3: in smallint
                int4("char"): function attributes: strict, cost 1, parallel safe
                    --  convert char to int4
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return integer
                        #2: in "char"
                int4(bigint): function attributes: strict, cost 1, parallel safe
                    --  convert int8 to int4
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return integer
                        #2: in bigint
                int4(bit): function attributes: strict, cost 1, parallel safe
                    --  convert bitstring to int4
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return integer
                        #2: in bit
                int4(boolean): function attributes: strict, cost 1, parallel safe
                    --  convert boolean to int4
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return integer
                        #2: in boolean
                int4(double precision): function attributes: strict, cost 1, parallel safe
                    --  convert float8 to int4
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return integer
                        #2: in double precision
                int4(jsonb): function attributes: strict, cost 1, parallel safe
                    --  convert jsonb to int4
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return integer
                        #2: in jsonb
                int4(numeric): function attributes: strict, cost 1, parallel safe
                    --  convert numeric to int4
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return integer
                        #2: in numeric
                int4(real): function attributes: strict, cost 1, parallel safe
                    --  convert float4 to int4
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return integer
                        #2: in real
                int4(smallint): function attributes: strict, cost 1, parallel safe
                    --  convert int2 to int4
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return integer
                        #2: in smallint
                int42div(integer,smallint): function attributes: strict, cost 1, parallel safe
                    --  implementation of / operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return integer
                        #2: in integer
                        #3: in smallint
                int42eq(integer,smallint): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of = operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in integer
                        #3: in smallint
                int42ge(integer,smallint): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of >= operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in integer
                        #3: in smallint
                int42gt(integer,smallint): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of > operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in integer
                        #3: in smallint
                int42le(integer,smallint): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of <= operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in integer
                        #3: in smallint
                int42lt(integer,smallint): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of < operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in integer
                        #3: in smallint
                int42mi(integer,smallint): function attributes: strict, cost 1, parallel safe
                    --  implementation of - operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return integer
                        #2: in integer
                        #3: in smallint
                int42mul(integer,smallint): function attributes: strict, cost 1, parallel safe
                    --  implementation of * operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return integer
                        #2: in integer
                        #3: in smallint
                int42ne(integer,smallint): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of <> operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in integer
                        #3: in smallint
                int42pl(integer,smallint): function attributes: strict, cost 1, parallel safe
                    --  implementation of + operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return integer
                        #2: in integer
                        #3: in smallint
                int48div(integer,bigint): function attributes: strict, cost 1, parallel safe
                    --  implementation of / operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bigint
                        #2: in integer
                        #3: in bigint
                int48eq(integer,bigint): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of = operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in integer
                        #3: in bigint
                int48ge(integer,bigint): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of >= operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in integer
                        #3: in bigint
                int48gt(integer,bigint): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of > operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in integer
                        #3: in bigint
                int48le(integer,bigint): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of <= operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in integer
                        #3: in bigint
                int48lt(integer,bigint): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of < operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in integer
                        #3: in bigint
                int48mi(integer,bigint): function attributes: strict, cost 1, parallel safe
                    --  implementation of - operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bigint
                        #2: in integer
                        #3: in bigint
                int48mul(integer,bigint): function attributes: strict, cost 1, parallel safe
                    --  implementation of * operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bigint
                        #2: in integer
                        #3: in bigint
                int48ne(integer,bigint): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of <> operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in integer
                        #3: in bigint
                int48pl(integer,bigint): function attributes: strict, cost 1, parallel safe
                    --  implementation of + operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bigint
                        #2: in integer
                        #3: in bigint
                int4_accum(internal,integer): function attributes: cost 1, parallel safe
                    --  aggregate transition function
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return internal
                        #2: in internal
                        #3: in integer
                int4_accum_inv(internal,integer): function attributes: cost 1, parallel safe
                    --  aggregate transition function
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return internal
                        #2: in internal
                        #3: in integer
                int4_avg_accum(bigint[],integer): function attributes: strict, cost 1, parallel safe
                    --  aggregate transition function
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bigint[]
                        #2: in bigint[]
                        #3: in integer
                int4_avg_accum_inv(bigint[],integer): function attributes: strict, cost 1, parallel safe
                    --  aggregate transition function
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bigint[]
                        #2: in bigint[]
                        #3: in integer
                int4_avg_combine(bigint[],bigint[]): function attributes: strict, cost 1, parallel safe
                    --  aggregate combine function
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bigint[]
                        #2: in bigint[]
                        #3: in bigint[]
                int4_mul_cash(integer,money): function attributes: strict, cost 1, parallel safe
                    --  implementation of * operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return money
                        #2: in integer
                        #3: in money
                int4_sum(bigint,integer): function attributes: cost 1, parallel safe
                    --  aggregate transition function
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bigint
                        #2: in bigint
                        #3: in integer
                int4abs(integer): function attributes: strict, cost 1, parallel safe
                    --  implementation of @ operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return integer
                        #2: in integer
                int4and(integer,integer): function attributes: strict, cost 1, parallel safe
                    --  implementation of & operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return integer
                        #2: in integer
                        #3: in integer
                int4div(integer,integer): function attributes: strict, cost 1, parallel safe
                    --  implementation of / operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return integer
                        #2: in integer
                        #3: in integer
                int4eq(integer,integer): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of = operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in integer
                        #3: in integer
                int4ge(integer,integer): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of >= operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in integer
                        #3: in integer
                int4gt(integer,integer): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of > operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in integer
                        #3: in integer
                int4in(cstring): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return integer
                        #2: in cstring
                int4inc(integer): function attributes: strict, cost 1, parallel safe
                    --  increment
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return integer
                        #2: in integer
                int4larger(integer,integer): function attributes: strict, cost 1, parallel safe
                    --  larger of two
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return integer
                        #2: in integer
                        #3: in integer
                int4le(integer,integer): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of <= operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in integer
                        #3: in integer
                int4lt(integer,integer): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of < operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in integer
                        #3: in integer
                int4mi(integer,integer): function attributes: strict, cost 1, parallel safe
                    --  implementation of - operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return integer
                        #2: in integer
                        #3: in integer
                int4mod(integer,integer): function attributes: strict, cost 1, parallel safe
                    --  implementation of % operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return integer
                        #2: in integer
                        #3: in integer
                int4mul(integer,integer): function attributes: strict, cost 1, parallel safe
                    --  implementation of * operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return integer
                        #2: in integer
                        #3: in integer
                int4ne(integer,integer): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of <> operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in integer
                        #3: in integer
                int4not(integer): function attributes: strict, cost 1, parallel safe
                    --  implementation of ~ operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return integer
                        #2: in integer
                int4or(integer,integer): function attributes: strict, cost 1, parallel safe
                    --  implementation of | operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return integer
                        #2: in integer
                        #3: in integer
                int4out(integer): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return cstring
                        #2: in integer
                int4pl(integer,integer): function attributes: strict, cost 1, parallel safe
                    --  implementation of + operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return integer
                        #2: in integer
                        #3: in integer
                int4range(integer,integer): function attributes: cost 1, parallel safe
                    --  int4range constructor
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return int4range
                        #2: in integer
                        #3: in integer
                int4range(integer,integer,text): function attributes: cost 1, parallel safe
                    --  int4range constructor
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return int4range
                        #2: in integer
                        #3: in integer
                        #4: in text
                int4range_canonical(int4range): function attributes: strict, cost 1, parallel safe
                    --  convert an int4 range to canonical form
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return int4range
                        #2: in int4range
                int4range_subdiff(integer,integer): function attributes: strict, cost 1, parallel safe
                    --  float8 difference of two int4 values
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return double precision
                        #2: in integer
                        #3: in integer
                int4recv(internal): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return integer
                        #2: in internal
                int4send(integer): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bytea
                        #2: in integer
                int4shl(integer,integer): function attributes: strict, cost 1, parallel safe
                    --  implementation of << operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return integer
                        #2: in integer
                        #3: in integer
                int4shr(integer,integer): function attributes: strict, cost 1, parallel safe
                    --  implementation of >> operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return integer
                        #2: in integer
                        #3: in integer
                int4smaller(integer,integer): function attributes: strict, cost 1, parallel safe
                    --  smaller of two
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return integer
                        #2: in integer
                        #3: in integer
                int4um(integer): function attributes: strict, cost 1, parallel safe
                    --  implementation of - operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return integer
                        #2: in integer
                int4up(integer): function attributes: strict, cost 1, parallel safe
                    --  implementation of + operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return integer
                        #2: in integer
                int4xor(integer,integer): function attributes: strict, cost 1, parallel safe
                    --  implementation of # operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return integer
                        #2: in integer
                        #3: in integer
                int8(bit): function attributes: strict, cost 1, parallel safe
                    --  convert bitstring to int8
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bigint
                        #2: in bit
                int8(double precision): function attributes: strict, cost 1, parallel safe
                    --  convert float8 to int8
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bigint
                        #2: in double precision
                int8(integer): function attributes: strict, cost 1, parallel safe
                    --  convert int4 to int8
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bigint
                        #2: in integer
                int8(jsonb): function attributes: strict, cost 1, parallel safe
                    --  convert jsonb to int8
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bigint
                        #2: in jsonb
                int8(numeric): function attributes: strict, cost 1, parallel safe
                    --  convert numeric to int8
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bigint
                        #2: in numeric
                int8(oid): function attributes: strict, cost 1, parallel safe
                    --  convert oid to int8
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bigint
                        #2: in oid
                int8(real): function attributes: strict, cost 1, parallel safe
                    --  convert float4 to int8
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bigint
                        #2: in real
                int8(smallint): function attributes: strict, cost 1, parallel safe
                    --  convert int2 to int8
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bigint
                        #2: in smallint
                int82div(bigint,smallint): function attributes: strict, cost 1, parallel safe
                    --  implementation of / operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bigint
                        #2: in bigint
                        #3: in smallint
                int82eq(bigint,smallint): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of = operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in bigint
                        #3: in smallint
                int82ge(bigint,smallint): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of >= operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in bigint
                        #3: in smallint
                int82gt(bigint,smallint): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of > operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in bigint
                        #3: in smallint
                int82le(bigint,smallint): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of <= operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in bigint
                        #3: in smallint
                int82lt(bigint,smallint): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of < operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in bigint
                        #3: in smallint
                int82mi(bigint,smallint): function attributes: strict, cost 1, parallel safe
                    --  implementation of - operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bigint
                        #2: in bigint
                        #3: in smallint
                int82mul(bigint,smallint): function attributes: strict, cost 1, parallel safe
                    --  implementation of * operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bigint
                        #2: in bigint
                        #3: in smallint
                int82ne(bigint,smallint): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of <> operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in bigint
                        #3: in smallint
                int82pl(bigint,smallint): function attributes: strict, cost 1, parallel safe
                    --  implementation of + operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bigint
                        #2: in bigint
                        #3: in smallint
                int84div(bigint,integer): function attributes: strict, cost 1, parallel safe
                    --  implementation of / operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bigint
                        #2: in bigint
                        #3: in integer
                int84eq(bigint,integer): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of = operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in bigint
                        #3: in integer
                int84ge(bigint,integer): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of >= operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in bigint
                        #3: in integer
                int84gt(bigint,integer): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of > operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in bigint
                        #3: in integer
                int84le(bigint,integer): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of <= operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in bigint
                        #3: in integer
                int84lt(bigint,integer): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of < operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in bigint
                        #3: in integer
                int84mi(bigint,integer): function attributes: strict, cost 1, parallel safe
                    --  implementation of - operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bigint
                        #2: in bigint
                        #3: in integer
                int84mul(bigint,integer): function attributes: strict, cost 1, parallel safe
                    --  implementation of * operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bigint
                        #2: in bigint
                        #3: in integer
                int84ne(bigint,integer): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of <> operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in bigint
                        #3: in integer
                int84pl(bigint,integer): function attributes: strict, cost 1, parallel safe
                    --  implementation of + operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bigint
                        #2: in bigint
                        #3: in integer
                int8_accum(internal,bigint): function attributes: cost 1, parallel safe
                    --  aggregate transition function
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return internal
                        #2: in internal
                        #3: in bigint
                int8_accum_inv(internal,bigint): function attributes: cost 1, parallel safe
                    --  aggregate transition function
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return internal
                        #2: in internal
                        #3: in bigint
                int8_avg(bigint[]): function attributes: strict, cost 1, parallel safe
                    --  aggregate final function
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return numeric
                        #2: in bigint[]
                int8_avg_accum(internal,bigint): function attributes: cost 1, parallel safe
                    --  aggregate transition function
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return internal
                        #2: in internal
                        #3: in bigint
                int8_avg_accum_inv(internal,bigint): function attributes: cost 1, parallel safe
                    --  aggregate transition function
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return internal
                        #2: in internal
                        #3: in bigint
                int8_avg_combine(internal,internal): function attributes: cost 1, parallel safe
                    --  aggregate combine function
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return internal
                        #2: in internal
                        #3: in internal
                int8_avg_deserialize(bytea,internal): function attributes: strict, cost 1, parallel safe
                    --  aggregate deserial function
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return internal
                        #2: in bytea
                        #3: in internal
                int8_avg_serialize(internal): function attributes: strict, cost 1, parallel safe
                    --  aggregate serial function
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bytea
                        #2: in internal
                int8_mul_cash(bigint,money): function attributes: strict, cost 1, parallel safe
                    --  implementation of * operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return money
                        #2: in bigint
                        #3: in money
                int8_sum(numeric,bigint): function attributes: cost 1, parallel safe
                    --  aggregate transition function
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return numeric
                        #2: in numeric
                        #3: in bigint
                int8abs(bigint): function attributes: strict, cost 1, parallel safe
                    --  implementation of @ operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bigint
                        #2: in bigint
                int8and(bigint,bigint): function attributes: strict, cost 1, parallel safe
                    --  implementation of & operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bigint
                        #2: in bigint
                        #3: in bigint
                int8dec(bigint): function attributes: strict, cost 1, parallel safe
                    --  decrement
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bigint
                        #2: in bigint
                int8dec_any(bigint,"any"): function attributes: strict, cost 1, parallel safe
                    --  decrement, ignores second argument
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bigint
                        #2: in bigint
                        #3: in "any"
                int8div(bigint,bigint): function attributes: strict, cost 1, parallel safe
                    --  implementation of / operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bigint
                        #2: in bigint
                        #3: in bigint
                int8eq(bigint,bigint): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of = operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in bigint
                        #3: in bigint
                int8ge(bigint,bigint): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of >= operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in bigint
                        #3: in bigint
                int8gt(bigint,bigint): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of > operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in bigint
                        #3: in bigint
                int8in(cstring): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bigint
                        #2: in cstring
                int8inc(bigint): function attributes: strict, cost 1, parallel safe
                    --  increment
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bigint
                        #2: in bigint
                int8inc_any(bigint,"any"): function attributes: strict, cost 1, parallel safe
                    --  increment, ignores second argument
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bigint
                        #2: in bigint
                        #3: in "any"
                int8inc_float8_float8(bigint,double precision,double precision): function attributes: strict, cost 1, parallel safe
                    --  aggregate transition function
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bigint
                        #2: in bigint
                        #3: in double precision
                        #4: in double precision
                int8larger(bigint,bigint): function attributes: strict, cost 1, parallel safe
                    --  larger of two
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bigint
                        #2: in bigint
                        #3: in bigint
                int8le(bigint,bigint): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of <= operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in bigint
                        #3: in bigint
                int8lt(bigint,bigint): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of < operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in bigint
                        #3: in bigint
                int8mi(bigint,bigint): function attributes: strict, cost 1, parallel safe
                    --  implementation of - operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bigint
                        #2: in bigint
                        #3: in bigint
                int8mod(bigint,bigint): function attributes: strict, cost 1, parallel safe
                    --  implementation of % operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bigint
                        #2: in bigint
                        #3: in bigint
                int8mul(bigint,bigint): function attributes: strict, cost 1, parallel safe
                    --  implementation of * operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bigint
                        #2: in bigint
                        #3: in bigint
                int8ne(bigint,bigint): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of <> operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in bigint
                        #3: in bigint
                int8not(bigint): function attributes: strict, cost 1, parallel safe
                    --  implementation of ~ operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bigint
                        #2: in bigint
                int8or(bigint,bigint): function attributes: strict, cost 1, parallel safe
                    --  implementation of | operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bigint
                        #2: in bigint
                        #3: in bigint
                int8out(bigint): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return cstring
                        #2: in bigint
                int8pl(bigint,bigint): function attributes: strict, cost 1, parallel safe
                    --  implementation of + operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bigint
                        #2: in bigint
                        #3: in bigint
                int8pl_inet(bigint,inet): function attributes: strict, cost 1, parallel safe
                    --  implementation of + operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = sql
                    + arguments
                        #1: return inet
                        #2: in bigint
                        #3: in inet
                int8range(bigint,bigint): function attributes: cost 1, parallel safe
                    --  int8range constructor
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return int8range
                        #2: in bigint
                        #3: in bigint
                int8range(bigint,bigint,text): function attributes: cost 1, parallel safe
                    --  int8range constructor
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return int8range
                        #2: in bigint
                        #3: in bigint
                        #4: in text
                int8range_canonical(int8range): function attributes: strict, cost 1, parallel safe
                    --  convert an int8 range to canonical form
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return int8range
                        #2: in int8range
                int8range_subdiff(bigint,bigint): function attributes: strict, cost 1, parallel safe
                    --  float8 difference of two int8 values
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return double precision
                        #2: in bigint
                        #3: in bigint
                int8recv(internal): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bigint
                        #2: in internal
                int8send(bigint): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bytea
                        #2: in bigint
                int8shl(bigint,integer): function attributes: strict, cost 1, parallel safe
                    --  implementation of << operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bigint
                        #2: in bigint
                        #3: in integer
                int8shr(bigint,integer): function attributes: strict, cost 1, parallel safe
                    --  implementation of >> operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bigint
                        #2: in bigint
                        #3: in integer
                int8smaller(bigint,bigint): function attributes: strict, cost 1, parallel safe
                    --  smaller of two
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bigint
                        #2: in bigint
                        #3: in bigint
                int8um(bigint): function attributes: strict, cost 1, parallel safe
                    --  implementation of - operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bigint
                        #2: in bigint
                int8up(bigint): function attributes: strict, cost 1, parallel safe
                    --  implementation of + operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bigint
                        #2: in bigint
                int8xor(bigint,bigint): function attributes: strict, cost 1, parallel safe
                    --  implementation of # operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bigint
                        #2: in bigint
                        #3: in bigint
                integer_pl_date(integer,date): function attributes: strict, cost 1, parallel safe
                    --  implementation of + operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = sql
                    + arguments
                        #1: return date
                        #2: in integer
                        #3: in date
                inter_lb(line,box): function attributes: strict, cost 1, parallel safe
                    --  implementation of ?# operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in line
                        #3: in box
                inter_sb(lseg,box): function attributes: strict, cost 1, parallel safe
                    --  implementation of ?# operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in lseg
                        #3: in box
                inter_sl(lseg,line): function attributes: strict, cost 1, parallel safe
                    --  implementation of ?# operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in lseg
                        #3: in line
                internal_in(cstring): function attributes: cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return internal
                        #2: in cstring
                internal_out(internal): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return cstring
                        #2: in internal
                interval(interval,integer): function attributes: strict, cost 1, parallel safe
                    --  adjust interval precision
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return interval
                        #2: in interval
                        #3: in integer
                interval(time): function attributes: strict, cost 1, parallel safe
                    --  convert time to interval
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return interval
                        #2: in time
                interval_accum(interval[],interval): function attributes: strict, cost 1, parallel safe
                    --  aggregate transition function
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return interval[]
                        #2: in interval[]
                        #3: in interval
                interval_accum_inv(interval[],interval): function attributes: strict, cost 1, parallel safe
                    --  aggregate transition function
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return interval[]
                        #2: in interval[]
                        #3: in interval
                interval_avg(interval[]): function attributes: strict, cost 1, parallel safe
                    --  aggregate final function
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return interval
                        #2: in interval[]
                interval_cmp(interval,interval): function attributes: leakproof, strict, cost 1, parallel safe
                    --  less-equal-greater
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return integer
                        #2: in interval
                        #3: in interval
                interval_combine(interval[],interval[]): function attributes: strict, cost 1, parallel safe
                    --  aggregate combine function
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return interval[]
                        #2: in interval[]
                        #3: in interval[]
                interval_div(interval,double precision): function attributes: strict, cost 1, parallel safe
                    --  implementation of / operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return interval
                        #2: in interval
                        #3: in double precision
                interval_eq(interval,interval): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of = operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in interval
                        #3: in interval
                interval_ge(interval,interval): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of >= operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in interval
                        #3: in interval
                interval_gt(interval,interval): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of > operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in interval
                        #3: in interval
                interval_hash(interval): function attributes: strict, cost 1, parallel safe
                    --  hash
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return integer
                        #2: in interval
                interval_hash_extended(interval,bigint): function attributes: strict, cost 1, parallel safe
                    --  hash
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bigint
                        #2: in interval
                        #3: in bigint
                interval_in(cstring,oid,integer): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return interval
                        #2: in cstring
                        #3: in oid
                        #4: in integer
                interval_larger(interval,interval): function attributes: strict, cost 1, parallel safe
                    --  larger of two
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return interval
                        #2: in interval
                        #3: in interval
                interval_le(interval,interval): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of <= operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in interval
                        #3: in interval
                interval_lt(interval,interval): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of < operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in interval
                        #3: in interval
                interval_mi(interval,interval): function attributes: strict, cost 1, parallel safe
                    --  implementation of - operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return interval
                        #2: in interval
                        #3: in interval
                interval_mul(interval,double precision): function attributes: strict, cost 1, parallel safe
                    --  implementation of * operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return interval
                        #2: in interval
                        #3: in double precision
                interval_ne(interval,interval): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of <> operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in interval
                        #3: in interval
                interval_out(interval): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return cstring
                        #2: in interval
                interval_pl(interval,interval): function attributes: strict, cost 1, parallel safe
                    --  implementation of + operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return interval
                        #2: in interval
                        #3: in interval
                interval_pl_date(interval,date): function attributes: strict, cost 1, parallel safe
                    --  implementation of + operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = sql
                    + arguments
                        #1: return timestamp
                        #2: in interval
                        #3: in date
                interval_pl_time(interval,time): function attributes: strict, cost 1, parallel safe
                    --  implementation of + operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = sql
                    + arguments
                        #1: return time
                        #2: in interval
                        #3: in time
                interval_pl_timestamp(interval,timestamp): function attributes: strict, cost 1, parallel safe
                    --  implementation of + operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = sql
                    + arguments
                        #1: return timestamp
                        #2: in interval
                        #3: in timestamp
                interval_pl_timestamptz(interval,timestamp with time zone): function attributes: strict, cost 1, parallel safe
                    --  implementation of + operator
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = sql
                    + arguments
                        #1: return timestamp with time zone
                        #2: in interval
                        #3: in timestamp with time zone
                interval_pl_timetz(interval,time with time zone): function attributes: strict, cost 1, parallel safe
                    --  implementation of + operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = sql
                    + arguments
                        #1: return time with time zone
                        #2: in interval
                        #3: in time with time zone
                interval_recv(internal,oid,integer): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return interval
                        #2: in internal
                        #3: in oid
                        #4: in integer
                interval_send(interval): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bytea
                        #2: in interval
                interval_smaller(interval,interval): function attributes: strict, cost 1, parallel safe
                    --  smaller of two
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return interval
                        #2: in interval
                        #3: in interval
                interval_support(internal): function attributes: strict, cost 1, parallel safe
                    --  planner support for interval length coercion
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return internal
                        #2: in internal
                interval_um(interval): function attributes: strict, cost 1, parallel safe
                    --  implementation of - operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return interval
                        #2: in interval
                intervaltypmodin(cstring[]): function attributes: strict, cost 1, parallel safe
                    --  I/O typmod
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return integer
                        #2: in cstring[]
                intervaltypmodout(integer): function attributes: strict, cost 1, parallel safe
                    --  I/O typmod
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return cstring
                        #2: in integer
                isclosed(path): function attributes: strict, cost 1, parallel safe
                    --  path closed?
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in path
                isempty(anyrange): function attributes: strict, cost 1, parallel safe
                    --  is the range empty?
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in anyrange
                isfinite(date): function attributes: strict, cost 1, parallel safe
                    --  finite date?
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in date
                isfinite(interval): function attributes: strict, cost 1, parallel safe
                    --  finite interval?
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in interval
                isfinite(timestamp with time zone): function attributes: strict, cost 1, parallel safe
                    --  finite timestamp?
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in timestamp with time zone
                isfinite(timestamp): function attributes: strict, cost 1, parallel safe
                    --  finite timestamp?
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in timestamp
                ishorizontal(line): function attributes: strict, cost 1, parallel safe
                    --  horizontal
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in line
                ishorizontal(lseg): function attributes: strict, cost 1, parallel safe
                    --  horizontal
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in lseg
                ishorizontal(point,point): function attributes: strict, cost 1, parallel safe
                    --  horizontally aligned
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in point
                        #3: in point
                iso8859_1_to_utf8(integer,integer,cstring,internal,integer): function attributes: strict, parallel safe
                    --  internal conversion function for LATIN1 to UTF8
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = c
                    + arguments
                        #1: return void
                        #2: in integer
                        #3: in integer
                        #4: in cstring
                        #5: in internal
                        #6: in integer
                iso8859_to_utf8(integer,integer,cstring,internal,integer): function attributes: strict, parallel safe
                    --  internal conversion function for ISO-8859 2-16 to UTF8
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = c
                    + arguments
                        #1: return void
                        #2: in integer
                        #3: in integer
                        #4: in cstring
                        #5: in internal
                        #6: in integer
                iso_to_koi8r(integer,integer,cstring,internal,integer): function attributes: strict, parallel safe
                    --  internal conversion function for ISO-8859-5 to KOI8R
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = c
                    + arguments
                        #1: return void
                        #2: in integer
                        #3: in integer
                        #4: in cstring
                        #5: in internal
                        #6: in integer
                iso_to_mic(integer,integer,cstring,internal,integer): function attributes: strict, parallel safe
                    --  internal conversion function for ISO-8859-5 to MULE_INTERNAL
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = c
                    + arguments
                        #1: return void
                        #2: in integer
                        #3: in integer
                        #4: in cstring
                        #5: in internal
                        #6: in integer
                iso_to_win1251(integer,integer,cstring,internal,integer): function attributes: strict, parallel safe
                    --  internal conversion function for ISO-8859-5 to WIN1251
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = c
                    + arguments
                        #1: return void
                        #2: in integer
                        #3: in integer
                        #4: in cstring
                        #5: in internal
                        #6: in integer
                iso_to_win866(integer,integer,cstring,internal,integer): function attributes: strict, parallel safe
                    --  internal conversion function for ISO-8859-5 to WIN866
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = c
                    + arguments
                        #1: return void
                        #2: in integer
                        #3: in integer
                        #4: in cstring
                        #5: in internal
                        #6: in integer
                isopen(path): function attributes: strict, cost 1, parallel safe
                    --  path open?
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in path
                isparallel(line,line): function attributes: strict, cost 1, parallel safe
                    --  parallel
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in line
                        #3: in line
                isparallel(lseg,lseg): function attributes: strict, cost 1, parallel safe
                    --  parallel
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in lseg
                        #3: in lseg
                isperp(line,line): function attributes: strict, cost 1, parallel safe
                    --  perpendicular
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in line
                        #3: in line
                isperp(lseg,lseg): function attributes: strict, cost 1, parallel safe
                    --  perpendicular
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in lseg
                        #3: in lseg
                isvertical(line): function attributes: strict, cost 1, parallel safe
                    --  vertical
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in line
                isvertical(lseg): function attributes: strict, cost 1, parallel safe
                    --  vertical
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in lseg
                isvertical(point,point): function attributes: strict, cost 1, parallel safe
                    --  vertically aligned
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in point
                        #3: in point
                johab_to_utf8(integer,integer,cstring,internal,integer): function attributes: strict, parallel safe
                    --  internal conversion function for JOHAB to UTF8
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = c
                    + arguments
                        #1: return void
                        #2: in integer
                        #3: in integer
                        #4: in cstring
                        #5: in internal
                        #6: in integer
                json_agg_finalfn(internal): function attributes: cost 1, parallel safe
                    --  json aggregate final function
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return json
                        #2: in internal
                json_agg_transfn(internal,anyelement): function attributes: cost 1, parallel safe
                    --  json aggregate transition function
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return internal
                        #2: in internal
                        #3: in anyelement
                json_array_element(json,integer): function attributes: strict, cost 1, parallel safe
                    --  implementation of -> operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return json
                        from_json: in json
                        element_index: in integer
                json_array_element_text(json,integer): function attributes: strict, cost 1, parallel safe
                    --  implementation of ->> operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return text
                        from_json: in json
                        element_index: in integer
                json_array_elements(json): function attributes: strict, cost 1, parallel safe, rows 100
                    --  key value pairs of a json object
                    . properties
                        returns_set +
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return setof json
                        from_json: in json
                        value: out json
                json_array_elements_text(json): function attributes: strict, cost 1, parallel safe, rows 100
                    --  elements of json array
                    . properties
                        returns_set +
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return setof text
                        from_json: in json
                        value: out text
                json_array_length(json): function attributes: strict, cost 1, parallel safe
                    --  length of json array
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return integer
                        #2: in json
                json_build_array("any"): function attributes: cost 1, parallel safe
                    --  build a json array from any inputs
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return json
                        #2: in "any"
                            . properties
                                variadic +
                json_build_array(): function attributes: cost 1, parallel safe
                    --  build an empty json array
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return json
                json_build_object("any"): function attributes: cost 1, parallel safe
                    --  build a json object from pairwise key/value inputs
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return json
                        #2: in "any"
                            . properties
                                variadic +
                json_build_object(): function attributes: cost 1, parallel safe
                    --  build an empty json object
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return json
                json_each(json): function attributes: strict, cost 1, parallel safe, rows 100
                    --  key value pairs of a json object
                    . properties
                        returns_set +
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return setof record
                        from_json: in json
                        key: out text
                        value: out json
                json_each_text(json): function attributes: strict, cost 1, parallel safe, rows 100
                    --  key value pairs of a json object
                    . properties
                        returns_set +
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return setof record
                        from_json: in json
                        key: out text
                        value: out text
                json_extract_path(json,text[]): function attributes: strict, cost 1, parallel safe
                    --  get value from json with path elements
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return json
                        from_json: in json
                        path_elems: in text[]
                            . properties
                                variadic +
                json_extract_path_text(json,text[]): function attributes: strict, cost 1, parallel safe
                    --  get value from json as text with path elements
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return text
                        from_json: in json
                        path_elems: in text[]
                            . properties
                                variadic +
                json_in(cstring): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return json
                        #2: in cstring
                json_object(text[]): function attributes: strict, cost 1, parallel safe
                    --  map text array of key value pairs to json object
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return json
                        #2: in text[]
                json_object(text[],text[]): function attributes: strict, cost 1, parallel safe
                    --  map text arrays of keys and values to json object
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return json
                        #2: in text[]
                        #3: in text[]
                json_object_agg_finalfn(internal): function attributes: cost 1, parallel safe
                    --  json object aggregate final function
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return json
                        #2: in internal
                json_object_agg_transfn(internal,"any","any"): function attributes: cost 1, parallel safe
                    --  json object aggregate transition function
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return internal
                        #2: in internal
                        #3: in "any"
                        #4: in "any"
                json_object_field(json,text): function attributes: strict, cost 1, parallel safe
                    --  implementation of -> operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return json
                        from_json: in json
                        field_name: in text
                json_object_field_text(json,text): function attributes: strict, cost 1, parallel safe
                    --  implementation of ->> operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return text
                        from_json: in json
                        field_name: in text
                json_object_keys(json): function attributes: strict, cost 1, parallel safe, rows 100
                    --  get json object keys
                    . properties
                        returns_set +
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return setof text
                        #2: in json
                json_out(json): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return cstring
                        #2: in json
                json_populate_record(anyelement,json,boolean): function attributes: cost 1, parallel safe
                    --  get record fields from a json object
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return anyelement
                        base: in anyelement
                        from_json: in json
                        use_json_as_text: in boolean default false
                json_populate_recordset(anyelement,json,boolean): function attributes: cost 1, parallel safe, rows 100
                    --  get set of records with fields from a json array of objects
                    . properties
                        returns_set +
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return setof anyelement
                        base: in anyelement
                        from_json: in json
                        use_json_as_text: in boolean default false
                json_recv(internal): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return json
                        #2: in internal
                json_send(json): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bytea
                        #2: in json
                json_strip_nulls(json): function attributes: strict, cost 1, parallel safe
                    --  remove object fields with null values from json
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return json
                        #2: in json
                json_to_record(json): function attributes: strict, cost 1, parallel safe
                    --  get record fields from a json object
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return record
                        #2: in json
                json_to_recordset(json): function attributes: cost 1, parallel safe, rows 100
                    --  get set of records with fields from a json array of objects
                    . properties
                        returns_set +
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return setof record
                        #2: in json
                json_to_tsvector(json,jsonb): function attributes: strict, parallel safe
                    --  transform specified values from json to tsvector
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return tsvector
                        #2: in json
                        #3: in jsonb
                json_to_tsvector(regconfig,json,jsonb): function attributes: strict, parallel safe
                    --  transform specified values from json to tsvector
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return tsvector
                        #2: in regconfig
                        #3: in json
                        #4: in jsonb
                json_typeof(json): function attributes: strict, cost 1, parallel safe
                    --  get the type of a json value
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return text
                        #2: in json
                jsonb_agg_finalfn(internal): function attributes: cost 1, parallel safe
                    --  jsonb aggregate final function
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return jsonb
                        #2: in internal
                jsonb_agg_transfn(internal,anyelement): function attributes: cost 1, parallel safe
                    --  jsonb aggregate transition function
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return internal
                        #2: in internal
                        #3: in anyelement
                jsonb_array_element(jsonb,integer): function attributes: strict, cost 1, parallel safe
                    --  implementation of -> operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return jsonb
                        from_json: in jsonb
                        element_index: in integer
                jsonb_array_element_text(jsonb,integer): function attributes: strict, cost 1, parallel safe
                    --  implementation of ->> operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return text
                        from_json: in jsonb
                        element_index: in integer
                jsonb_array_elements(jsonb): function attributes: strict, cost 1, parallel safe, rows 100
                    --  elements of a jsonb array
                    . properties
                        returns_set +
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return setof jsonb
                        from_json: in jsonb
                        value: out jsonb
                jsonb_array_elements_text(jsonb): function attributes: strict, cost 1, parallel safe, rows 100
                    --  elements of jsonb array
                    . properties
                        returns_set +
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return setof text
                        from_json: in jsonb
                        value: out text
                jsonb_array_length(jsonb): function attributes: strict, cost 1, parallel safe
                    --  length of jsonb array
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return integer
                        #2: in jsonb
                jsonb_build_array("any"): function attributes: cost 1, parallel safe
                    --  build a jsonb array from any inputs
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return jsonb
                        #2: in "any"
                            . properties
                                variadic +
                jsonb_build_array(): function attributes: cost 1, parallel safe
                    --  build an empty jsonb array
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return jsonb
                jsonb_build_object("any"): function attributes: cost 1, parallel safe
                    --  build a jsonb object from pairwise key/value inputs
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return jsonb
                        #2: in "any"
                            . properties
                                variadic +
                jsonb_build_object(): function attributes: cost 1, parallel safe
                    --  build an empty jsonb object
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return jsonb
                jsonb_cmp(jsonb,jsonb): function attributes: strict, cost 1, parallel safe
                    --  less-equal-greater
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return integer
                        #2: in jsonb
                        #3: in jsonb
                jsonb_concat(jsonb,jsonb): function attributes: strict, cost 1, parallel safe
                    --  implementation of || operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return jsonb
                        #2: in jsonb
                        #3: in jsonb
                jsonb_contained(jsonb,jsonb): function attributes: strict, cost 1, parallel safe
                    --  implementation of <@ operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in jsonb
                        #3: in jsonb
                jsonb_contains(jsonb,jsonb): function attributes: strict, cost 1, parallel safe
                    --  implementation of @> operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in jsonb
                        #3: in jsonb
                jsonb_delete(jsonb,integer): function attributes: strict, cost 1, parallel safe
                    --  implementation of - operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return jsonb
                        #2: in jsonb
                        #3: in integer
                jsonb_delete(jsonb,text): function attributes: strict, cost 1, parallel safe
                    --  implementation of - operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return jsonb
                        #2: in jsonb
                        #3: in text
                jsonb_delete(jsonb,text[]): function attributes: strict, cost 1, parallel safe
                    --  implementation of - operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return jsonb
                        from_json: in jsonb
                        path_elems: in text[]
                            . properties
                                variadic +
                jsonb_delete_path(jsonb,text[]): function attributes: strict, cost 1, parallel safe
                    --  implementation of #- operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return jsonb
                        #2: in jsonb
                        #3: in text[]
                jsonb_each(jsonb): function attributes: strict, cost 1, parallel safe, rows 100
                    --  key value pairs of a jsonb object
                    . properties
                        returns_set +
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return setof record
                        from_json: in jsonb
                        key: out text
                        value: out jsonb
                jsonb_each_text(jsonb): function attributes: strict, cost 1, parallel safe, rows 100
                    --  key value pairs of a jsonb object
                    . properties
                        returns_set +
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return setof record
                        from_json: in jsonb
                        key: out text
                        value: out text
                jsonb_eq(jsonb,jsonb): function attributes: strict, cost 1, parallel safe
                    --  implementation of = operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in jsonb
                        #3: in jsonb
                jsonb_exists(jsonb,text): function attributes: strict, cost 1, parallel safe
                    --  implementation of ? operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in jsonb
                        #3: in text
                jsonb_exists_all(jsonb,text[]): function attributes: strict, cost 1, parallel safe
                    --  implementation of ?& operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in jsonb
                        #3: in text[]
                jsonb_exists_any(jsonb,text[]): function attributes: strict, cost 1, parallel safe
                    --  implementation of ?| operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in jsonb
                        #3: in text[]
                jsonb_extract_path(jsonb,text[]): function attributes: strict, cost 1, parallel safe
                    --  get value from jsonb with path elements
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return jsonb
                        from_json: in jsonb
                        path_elems: in text[]
                            . properties
                                variadic +
                jsonb_extract_path_text(jsonb,text[]): function attributes: strict, cost 1, parallel safe
                    --  get value from jsonb as text with path elements
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return text
                        from_json: in jsonb
                        path_elems: in text[]
                            . properties
                                variadic +
                jsonb_ge(jsonb,jsonb): function attributes: strict, cost 1, parallel safe
                    --  implementation of >= operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in jsonb
                        #3: in jsonb
                jsonb_gt(jsonb,jsonb): function attributes: strict, cost 1, parallel safe
                    --  implementation of > operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in jsonb
                        #3: in jsonb
                jsonb_hash(jsonb): function attributes: strict, cost 1, parallel safe
                    --  hash
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return integer
                        #2: in jsonb
                jsonb_hash_extended(jsonb,bigint): function attributes: strict, cost 1, parallel safe
                    --  hash
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bigint
                        #2: in jsonb
                        #3: in bigint
                jsonb_in(cstring): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return jsonb
                        #2: in cstring
                jsonb_insert(jsonb,text[],jsonb,boolean): function attributes: strict, cost 1, parallel safe
                    --  Insert value into a jsonb
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return jsonb
                        jsonb_in: in jsonb
                        path: in text[]
                        replacement: in jsonb
                        insert_after: in boolean default false
                jsonb_le(jsonb,jsonb): function attributes: strict, cost 1, parallel safe
                    --  implementation of <= operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in jsonb
                        #3: in jsonb
                jsonb_lt(jsonb,jsonb): function attributes: strict, cost 1, parallel safe
                    --  implementation of < operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in jsonb
                        #3: in jsonb
                jsonb_ne(jsonb,jsonb): function attributes: strict, cost 1, parallel safe
                    --  implementation of <> operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in jsonb
                        #3: in jsonb
                jsonb_object(text[]): function attributes: strict, cost 1, parallel safe
                    --  map text array of key value pairs to jsonb object
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return jsonb
                        #2: in text[]
                jsonb_object(text[],text[]): function attributes: strict, cost 1, parallel safe
                    --  map text array of key value pairs to jsonb object
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return jsonb
                        #2: in text[]
                        #3: in text[]
                jsonb_object_agg_finalfn(internal): function attributes: cost 1, parallel safe
                    --  jsonb object aggregate final function
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return jsonb
                        #2: in internal
                jsonb_object_agg_transfn(internal,"any","any"): function attributes: cost 1, parallel safe
                    --  jsonb object aggregate transition function
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return internal
                        #2: in internal
                        #3: in "any"
                        #4: in "any"
                jsonb_object_field(jsonb,text): function attributes: strict, cost 1, parallel safe
                    --  implementation of -> operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return jsonb
                        from_json: in jsonb
                        field_name: in text
                jsonb_object_field_text(jsonb,text): function attributes: strict, cost 1, parallel safe
                    --  implementation of ->> operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return text
                        from_json: in jsonb
                        field_name: in text
                jsonb_object_keys(jsonb): function attributes: strict, cost 1, parallel safe, rows 100
                    --  get jsonb object keys
                    . properties
                        returns_set +
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return setof text
                        #2: in jsonb
                jsonb_out(jsonb): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return cstring
                        #2: in jsonb
                jsonb_path_exists(jsonb,jsonpath,jsonb,boolean): function attributes: strict, cost 1, parallel safe
                    --  jsonpath exists test
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        target: in jsonb
                        path: in jsonpath
                        vars: in jsonb default '{}'::jsonb
                        silent: in boolean default false
                jsonb_path_exists_opr(jsonb,jsonpath): function attributes: strict, cost 1, parallel safe
                    --  implementation of @? operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in jsonb
                        #3: in jsonpath
                jsonb_path_match(jsonb,jsonpath,jsonb,boolean): function attributes: strict, cost 1, parallel safe
                    --  jsonpath match
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        target: in jsonb
                        path: in jsonpath
                        vars: in jsonb default '{}'::jsonb
                        silent: in boolean default false
                jsonb_path_match_opr(jsonb,jsonpath): function attributes: strict, cost 1, parallel safe
                    --  implementation of @@ operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in jsonb
                        #3: in jsonpath
                jsonb_path_query(jsonb,jsonpath,jsonb,boolean): function attributes: strict, cost 1, parallel safe
                    --  jsonpath query
                    . properties
                        returns_set +
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return setof jsonb
                        target: in jsonb
                        path: in jsonpath
                        vars: in jsonb default '{}'::jsonb
                        silent: in boolean default false
                jsonb_path_query_array(jsonb,jsonpath,jsonb,boolean): function attributes: strict, cost 1, parallel safe
                    --  jsonpath query wrapped into array
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return jsonb
                        target: in jsonb
                        path: in jsonpath
                        vars: in jsonb default '{}'::jsonb
                        silent: in boolean default false
                jsonb_path_query_first(jsonb,jsonpath,jsonb,boolean): function attributes: strict, cost 1, parallel safe
                    --  jsonpath query first item
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return jsonb
                        target: in jsonb
                        path: in jsonpath
                        vars: in jsonb default '{}'::jsonb
                        silent: in boolean default false
                jsonb_populate_record(anyelement,jsonb): function attributes: cost 1, parallel safe
                    --  get record fields from a jsonb object
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return anyelement
                        #2: in anyelement
                        #3: in jsonb
                jsonb_populate_recordset(anyelement,jsonb): function attributes: cost 1, parallel safe, rows 100
                    --  get set of records with fields from a jsonb array of objects
                    . properties
                        returns_set +
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return setof anyelement
                        #2: in anyelement
                        #3: in jsonb
                jsonb_pretty(jsonb): function attributes: strict, cost 1, parallel safe
                    --  Indented text from jsonb
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return text
                        #2: in jsonb
                jsonb_recv(internal): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return jsonb
                        #2: in internal
                jsonb_send(jsonb): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bytea
                        #2: in jsonb
                jsonb_set(jsonb,text[],jsonb,boolean): function attributes: strict, cost 1, parallel safe
                    --  Set part of a jsonb
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return jsonb
                        jsonb_in: in jsonb
                        path: in text[]
                        replacement: in jsonb
                        create_if_missing: in boolean default true
                jsonb_strip_nulls(jsonb): function attributes: strict, cost 1, parallel safe
                    --  remove object fields with null values from jsonb
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return jsonb
                        #2: in jsonb
                jsonb_to_record(jsonb): function attributes: strict, cost 1, parallel safe
                    --  get record fields from a jsonb object
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return record
                        #2: in jsonb
                jsonb_to_recordset(jsonb): function attributes: cost 1, parallel safe, rows 100
                    --  get set of records with fields from a jsonb array of objects
                    . properties
                        returns_set +
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return setof record
                        #2: in jsonb
                jsonb_to_tsvector(jsonb,jsonb): function attributes: strict, parallel safe
                    --  transform specified values from jsonb to tsvector
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return tsvector
                        #2: in jsonb
                        #3: in jsonb
                jsonb_to_tsvector(regconfig,jsonb,jsonb): function attributes: strict, parallel safe
                    --  transform specified values from jsonb to tsvector
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return tsvector
                        #2: in regconfig
                        #3: in jsonb
                        #4: in jsonb
                jsonb_typeof(jsonb): function attributes: strict, cost 1, parallel safe
                    --  get the type of a jsonb value
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return text
                        #2: in jsonb
                jsonpath_in(cstring): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return jsonpath
                        #2: in cstring
                jsonpath_out(jsonpath): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return cstring
                        #2: in jsonpath
                jsonpath_recv(internal): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return jsonpath
                        #2: in internal
                jsonpath_send(jsonpath): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bytea
                        #2: in jsonpath
                justify_days(interval): function attributes: strict, cost 1, parallel safe
                    --  promote groups of 30 days to numbers of months
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return interval
                        #2: in interval
                justify_hours(interval): function attributes: strict, cost 1, parallel safe
                    --  promote groups of 24 hours to numbers of days
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return interval
                        #2: in interval
                justify_interval(interval): function attributes: strict, cost 1, parallel safe
                    --  promote groups of 24 hours to numbers of days and promote groups of 30 days to numbers of months
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return interval
                        #2: in interval
                koi8r_to_iso(integer,integer,cstring,internal,integer): function attributes: strict, parallel safe
                    --  internal conversion function for KOI8R to ISO-8859-5
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = c
                    + arguments
                        #1: return void
                        #2: in integer
                        #3: in integer
                        #4: in cstring
                        #5: in internal
                        #6: in integer
                koi8r_to_mic(integer,integer,cstring,internal,integer): function attributes: strict, parallel safe
                    --  internal conversion function for KOI8R to MULE_INTERNAL
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = c
                    + arguments
                        #1: return void
                        #2: in integer
                        #3: in integer
                        #4: in cstring
                        #5: in internal
                        #6: in integer
                koi8r_to_utf8(integer,integer,cstring,internal,integer): function attributes: strict, parallel safe
                    --  internal conversion function for KOI8R to UTF8
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = c
                    + arguments
                        #1: return void
                        #2: in integer
                        #3: in integer
                        #4: in cstring
                        #5: in internal
                        #6: in integer
                koi8r_to_win1251(integer,integer,cstring,internal,integer): function attributes: strict, parallel safe
                    --  internal conversion function for KOI8R to WIN1251
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = c
                    + arguments
                        #1: return void
                        #2: in integer
                        #3: in integer
                        #4: in cstring
                        #5: in internal
                        #6: in integer
                koi8r_to_win866(integer,integer,cstring,internal,integer): function attributes: strict, parallel safe
                    --  internal conversion function for KOI8R to WIN866
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = c
                    + arguments
                        #1: return void
                        #2: in integer
                        #3: in integer
                        #4: in cstring
                        #5: in internal
                        #6: in integer
                koi8u_to_utf8(integer,integer,cstring,internal,integer): function attributes: strict, parallel safe
                    --  internal conversion function for KOI8U to UTF8
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = c
                    + arguments
                        #1: return void
                        #2: in integer
                        #3: in integer
                        #4: in cstring
                        #5: in internal
                        #6: in integer
                lag(anyelement): function attributes: strict, cost 1, parallel safe, window
                    --  fetch the preceding row value
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return anyelement
                        #2: in anyelement
                lag(anyelement,integer): function attributes: strict, cost 1, parallel safe, window
                    --  fetch the Nth preceding row value
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return anyelement
                        #2: in anyelement
                        #3: in integer
                lag(anyelement,integer,anyelement): function attributes: strict, cost 1, parallel safe, window
                    --  fetch the Nth preceding row value with default
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return anyelement
                        #2: in anyelement
                        #3: in integer
                        #4: in anyelement
                language_handler_in(cstring): function attributes: cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return language_handler
                        #2: in cstring
                language_handler_out(language_handler): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return cstring
                        #2: in language_handler
                last_value(anyelement): function attributes: strict, cost 1, parallel safe, window
                    --  fetch the last row value
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return anyelement
                        #2: in anyelement
                lastval(): function attributes: strict, cost 1
                    --  current value from last used sequence
                    . references
                        language = internal
                    + arguments
                        #1: return bigint
                latin1_to_mic(integer,integer,cstring,internal,integer): function attributes: strict, parallel safe
                    --  internal conversion function for LATIN1 to MULE_INTERNAL
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = c
                    + arguments
                        #1: return void
                        #2: in integer
                        #3: in integer
                        #4: in cstring
                        #5: in internal
                        #6: in integer
                latin2_to_mic(integer,integer,cstring,internal,integer): function attributes: strict, parallel safe
                    --  internal conversion function for LATIN2 to MULE_INTERNAL
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = c
                    + arguments
                        #1: return void
                        #2: in integer
                        #3: in integer
                        #4: in cstring
                        #5: in internal
                        #6: in integer
                latin2_to_win1250(integer,integer,cstring,internal,integer): function attributes: strict, parallel safe
                    --  internal conversion function for LATIN2 to WIN1250
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = c
                    + arguments
                        #1: return void
                        #2: in integer
                        #3: in integer
                        #4: in cstring
                        #5: in internal
                        #6: in integer
                latin3_to_mic(integer,integer,cstring,internal,integer): function attributes: strict, parallel safe
                    --  internal conversion function for LATIN3 to MULE_INTERNAL
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = c
                    + arguments
                        #1: return void
                        #2: in integer
                        #3: in integer
                        #4: in cstring
                        #5: in internal
                        #6: in integer
                latin4_to_mic(integer,integer,cstring,internal,integer): function attributes: strict, parallel safe
                    --  internal conversion function for LATIN4 to MULE_INTERNAL
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = c
                    + arguments
                        #1: return void
                        #2: in integer
                        #3: in integer
                        #4: in cstring
                        #5: in internal
                        #6: in integer
                lead(anyelement): function attributes: strict, cost 1, parallel safe, window
                    --  fetch the following row value
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return anyelement
                        #2: in anyelement
                lead(anyelement,integer): function attributes: strict, cost 1, parallel safe, window
                    --  fetch the Nth following row value
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return anyelement
                        #2: in anyelement
                        #3: in integer
                lead(anyelement,integer,anyelement): function attributes: strict, cost 1, parallel safe, window
                    --  fetch the Nth following row value with default
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return anyelement
                        #2: in anyelement
                        #3: in integer
                        #4: in anyelement
                left(text,integer): function attributes: strict, cost 1, parallel safe
                    --  extract the first n characters
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return text
                        #2: in text
                        #3: in integer
                length(bit): function attributes: strict, cost 1, parallel safe
                    --  bitstring length
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return integer
                        #2: in bit
                length(bytea): function attributes: strict, cost 1, parallel safe
                    --  octet length
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return integer
                        #2: in bytea
                length(bytea,name): function attributes: strict, cost 1, parallel safe
                    --  length of string in specified encoding
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return integer
                        #2: in bytea
                        #3: in name
                length(char): function attributes: strict, cost 1, parallel safe
                    --  character length
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return integer
                        #2: in char
                length(lseg): function attributes: strict, cost 1, parallel safe
                    --  distance between endpoints
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return double precision
                        #2: in lseg
                length(path): function attributes: strict, cost 1, parallel safe
                    --  sum of path segments
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return double precision
                        #2: in path
                length(text): function attributes: strict, cost 1, parallel safe
                    --  length
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return integer
                        #2: in text
                length(tsvector): function attributes: strict, cost 1, parallel safe
                    --  number of lexemes
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return integer
                        #2: in tsvector
                like(bytea,bytea): function attributes: strict, cost 1, parallel safe
                    --  matches LIKE expression
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in bytea
                        #3: in bytea
                like(name,text): function attributes: strict, cost 1, parallel safe
                    --  matches LIKE expression
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in name
                        #3: in text
                like(text,text): function attributes: strict, cost 1, parallel safe
                    --  matches LIKE expression
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in text
                        #3: in text
                like_escape(bytea,bytea): function attributes: strict, cost 1, parallel safe
                    --  convert LIKE pattern to use backslash escapes
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bytea
                        #2: in bytea
                        #3: in bytea
                like_escape(text,text): function attributes: strict, cost 1, parallel safe
                    --  convert LIKE pattern to use backslash escapes
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return text
                        #2: in text
                        #3: in text
                likejoinsel(internal,oid,internal,smallint,internal): function attributes: strict, cost 1, parallel safe
                    --  join selectivity of LIKE
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return double precision
                        #2: in internal
                        #3: in oid
                        #4: in internal
                        #5: in smallint
                        #6: in internal
                likesel(internal,oid,internal,integer): function attributes: strict, cost 1, parallel safe
                    --  restriction selectivity of LIKE
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return double precision
                        #2: in internal
                        #3: in oid
                        #4: in internal
                        #5: in integer
                line(point,point): function attributes: strict, cost 1, parallel safe
                    --  construct line from points
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return line
                        #2: in point
                        #3: in point
                line_distance(line,line): function attributes: strict, cost 1, parallel safe
                    --  implementation of <-> operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return double precision
                        #2: in line
                        #3: in line
                line_eq(line,line): function attributes: strict, cost 1, parallel safe
                    --  implementation of = operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in line
                        #3: in line
                line_horizontal(line): function attributes: strict, cost 1, parallel safe
                    --  implementation of ?- operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in line
                line_in(cstring): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return line
                        #2: in cstring
                line_interpt(line,line): function attributes: strict, cost 1, parallel safe
                    --  implementation of # operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return point
                        #2: in line
                        #3: in line
                line_intersect(line,line): function attributes: strict, cost 1, parallel safe
                    --  implementation of ?# operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in line
                        #3: in line
                line_out(line): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return cstring
                        #2: in line
                line_parallel(line,line): function attributes: strict, cost 1, parallel safe
                    --  implementation of ?|| operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in line
                        #3: in line
                line_perp(line,line): function attributes: strict, cost 1, parallel safe
                    --  implementation of ?-| operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in line
                        #3: in line
                line_recv(internal): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return line
                        #2: in internal
                line_send(line): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bytea
                        #2: in line
                line_vertical(line): function attributes: strict, cost 1, parallel safe
                    --  implementation of ?| operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in line
                ln(double precision): function attributes: strict, cost 1, parallel safe
                    --  natural logarithm
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return double precision
                        #2: in double precision
                ln(numeric): function attributes: strict, cost 1, parallel safe
                    --  natural logarithm
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return numeric
                        #2: in numeric
                lo_close(integer): function attributes: strict, cost 1
                    --  large object close
                    . references
                        language = internal
                    + arguments
                        #1: return integer
                        #2: in integer
                lo_creat(integer): function attributes: strict, cost 1
                    --  large object create
                    . references
                        language = internal
                    + arguments
                        #1: return oid
                        #2: in integer
                lo_create(oid): function attributes: strict, cost 1
                    --  large object create
                    . references
                        language = internal
                    + arguments
                        #1: return oid
                        #2: in oid
                lo_export(oid,text): function attributes: strict, cost 1
                    --  large object export
                    . references
                        language = internal
                    + arguments
                        #1: return integer
                        #2: in oid
                        #3: in text
                lo_from_bytea(oid,bytea): function attributes: strict, cost 1
                    --  create new large object with given content
                    . references
                        language = internal
                    + arguments
                        #1: return oid
                        #2: in oid
                        #3: in bytea
                lo_get(oid): function attributes: strict, cost 1
                    --  read entire large object
                    . references
                        language = internal
                    + arguments
                        #1: return bytea
                        #2: in oid
                lo_get(oid,bigint,integer): function attributes: strict, cost 1
                    --  read large object from offset for length
                    . references
                        language = internal
                    + arguments
                        #1: return bytea
                        #2: in oid
                        #3: in bigint
                        #4: in integer
                lo_import(text): function attributes: strict, cost 1
                    --  large object import
                    . references
                        language = internal
                    + arguments
                        #1: return oid
                        #2: in text
                lo_import(text,oid): function attributes: strict, cost 1
                    --  large object import
                    . references
                        language = internal
                    + arguments
                        #1: return oid
                        #2: in text
                        #3: in oid
                lo_lseek(integer,integer,integer): function attributes: strict, cost 1
                    --  large object seek
                    . references
                        language = internal
                    + arguments
                        #1: return integer
                        #2: in integer
                        #3: in integer
                        #4: in integer
                lo_lseek64(integer,bigint,integer): function attributes: strict, cost 1
                    --  large object seek (64 bit)
                    . references
                        language = internal
                    + arguments
                        #1: return bigint
                        #2: in integer
                        #3: in bigint
                        #4: in integer
                lo_open(oid,integer): function attributes: strict, cost 1
                    --  large object open
                    . references
                        language = internal
                    + arguments
                        #1: return integer
                        #2: in oid
                        #3: in integer
                lo_put(oid,bigint,bytea): function attributes: strict, cost 1
                    --  write data at offset
                    . references
                        language = internal
                    + arguments
                        #1: return void
                        #2: in oid
                        #3: in bigint
                        #4: in bytea
                lo_tell(integer): function attributes: strict, cost 1
                    --  large object position
                    . references
                        language = internal
                    + arguments
                        #1: return integer
                        #2: in integer
                lo_tell64(integer): function attributes: strict, cost 1
                    --  large object position (64 bit)
                    . references
                        language = internal
                    + arguments
                        #1: return bigint
                        #2: in integer
                lo_truncate(integer,integer): function attributes: strict, cost 1
                    --  truncate large object
                    . references
                        language = internal
                    + arguments
                        #1: return integer
                        #2: in integer
                        #3: in integer
                lo_truncate64(integer,bigint): function attributes: strict, cost 1
                    --  truncate large object (64 bit)
                    . references
                        language = internal
                    + arguments
                        #1: return integer
                        #2: in integer
                        #3: in bigint
                lo_unlink(oid): function attributes: strict, cost 1
                    --  large object unlink (delete)
                    . references
                        language = internal
                    + arguments
                        #1: return integer
                        #2: in oid
                log(double precision): function attributes: strict, cost 1, parallel safe
                    --  base 10 logarithm
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return double precision
                        #2: in double precision
                log(numeric): function attributes: strict, cost 1, parallel safe
                    --  base 10 logarithm
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = sql
                    + arguments
                        #1: return numeric
                        #2: in numeric
                log(numeric,numeric): function attributes: strict, cost 1, parallel safe
                    --  logarithm base m of n
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return numeric
                        #2: in numeric
                        #3: in numeric
                log10(double precision): function attributes: strict, cost 1, parallel safe
                    --  base 10 logarithm
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return double precision
                        #2: in double precision
                log10(numeric): function attributes: strict, cost 1, parallel safe
                    --  base 10 logarithm
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = sql
                    + arguments
                        #1: return numeric
                        #2: in numeric
                loread(integer,integer): function attributes: strict, cost 1
                    --  large object read
                    . references
                        language = internal
                    + arguments
                        #1: return bytea
                        #2: in integer
                        #3: in integer
                lower(anyrange): function attributes: strict, cost 1, parallel safe
                    --  lower bound of range
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return anyelement
                        #2: in anyrange
                lower(text): function attributes: strict, cost 1, parallel safe
                    --  lowercase
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return text
                        #2: in text
                lower_inc(anyrange): function attributes: strict, cost 1, parallel safe
                    --  is the range's lower bound inclusive?
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in anyrange
                lower_inf(anyrange): function attributes: strict, cost 1, parallel safe
                    --  is the range's lower bound infinite?
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in anyrange
                lowrite(integer,bytea): function attributes: strict, cost 1
                    --  large object write
                    . references
                        language = internal
                    + arguments
                        #1: return integer
                        #2: in integer
                        #3: in bytea
                lpad(text,integer): function attributes: strict, cost 1, parallel safe
                    --  left-pad string to length
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = sql
                    + arguments
                        #1: return text
                        #2: in text
                        #3: in integer
                lpad(text,integer,text): function attributes: strict, cost 1, parallel safe
                    --  left-pad string to length
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return text
                        #2: in text
                        #3: in integer
                        #4: in text
                lseg(box): function attributes: strict, cost 1, parallel safe
                    --  diagonal of
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return lseg
                        #2: in box
                lseg(point,point): function attributes: strict, cost 1, parallel safe
                    --  convert points to line segment
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return lseg
                        #2: in point
                        #3: in point
                lseg_center(lseg): function attributes: strict, cost 1, parallel safe
                    --  implementation of @@ operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return point
                        #2: in lseg
                lseg_distance(lseg,lseg): function attributes: strict, cost 1, parallel safe
                    --  implementation of <-> operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return double precision
                        #2: in lseg
                        #3: in lseg
                lseg_eq(lseg,lseg): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of = operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in lseg
                        #3: in lseg
                lseg_ge(lseg,lseg): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of >= operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in lseg
                        #3: in lseg
                lseg_gt(lseg,lseg): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of > operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in lseg
                        #3: in lseg
                lseg_horizontal(lseg): function attributes: strict, cost 1, parallel safe
                    --  implementation of ?- operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in lseg
                lseg_in(cstring): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return lseg
                        #2: in cstring
                lseg_interpt(lseg,lseg): function attributes: strict, cost 1, parallel safe
                    --  implementation of # operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return point
                        #2: in lseg
                        #3: in lseg
                lseg_intersect(lseg,lseg): function attributes: strict, cost 1, parallel safe
                    --  implementation of ?# operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in lseg
                        #3: in lseg
                lseg_le(lseg,lseg): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of <= operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in lseg
                        #3: in lseg
                lseg_length(lseg): function attributes: strict, cost 1, parallel safe
                    --  implementation of @-@ operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return double precision
                        #2: in lseg
                lseg_lt(lseg,lseg): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of < operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in lseg
                        #3: in lseg
                lseg_ne(lseg,lseg): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of <> operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in lseg
                        #3: in lseg
                lseg_out(lseg): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return cstring
                        #2: in lseg
                lseg_parallel(lseg,lseg): function attributes: strict, cost 1, parallel safe
                    --  implementation of ?|| operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in lseg
                        #3: in lseg
                lseg_perp(lseg,lseg): function attributes: strict, cost 1, parallel safe
                    --  implementation of ?-| operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in lseg
                        #3: in lseg
                lseg_recv(internal): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return lseg
                        #2: in internal
                lseg_send(lseg): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bytea
                        #2: in lseg
                lseg_vertical(lseg): function attributes: strict, cost 1, parallel safe
                    --  implementation of ?| operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in lseg
                ltrim(text): function attributes: strict, cost 1, parallel safe
                    --  trim spaces from left end of string
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return text
                        #2: in text
                ltrim(text,text): function attributes: strict, cost 1, parallel safe
                    --  trim selected characters from left end of string
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return text
                        #2: in text
                        #3: in text
                macaddr(macaddr8): function attributes: strict, cost 1, parallel safe
                    --  convert macaddr8 to macaddr
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return macaddr
                        #2: in macaddr8
                macaddr8(macaddr): function attributes: strict, cost 1, parallel safe
                    --  convert macaddr to macaddr8
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return macaddr8
                        #2: in macaddr
                macaddr8_and(macaddr8,macaddr8): function attributes: strict, cost 1, parallel safe
                    --  implementation of & operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return macaddr8
                        #2: in macaddr8
                        #3: in macaddr8
                macaddr8_cmp(macaddr8,macaddr8): function attributes: leakproof, strict, cost 1, parallel safe
                    --  less-equal-greater
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return integer
                        #2: in macaddr8
                        #3: in macaddr8
                macaddr8_eq(macaddr8,macaddr8): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of = operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in macaddr8
                        #3: in macaddr8
                macaddr8_ge(macaddr8,macaddr8): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of >= operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in macaddr8
                        #3: in macaddr8
                macaddr8_gt(macaddr8,macaddr8): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of > operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in macaddr8
                        #3: in macaddr8
                macaddr8_in(cstring): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return macaddr8
                        #2: in cstring
                macaddr8_le(macaddr8,macaddr8): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of <= operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in macaddr8
                        #3: in macaddr8
                macaddr8_lt(macaddr8,macaddr8): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of < operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in macaddr8
                        #3: in macaddr8
                macaddr8_ne(macaddr8,macaddr8): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of <> operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in macaddr8
                        #3: in macaddr8
                macaddr8_not(macaddr8): function attributes: strict, cost 1, parallel safe
                    --  implementation of ~ operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return macaddr8
                        #2: in macaddr8
                macaddr8_or(macaddr8,macaddr8): function attributes: strict, cost 1, parallel safe
                    --  implementation of | operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return macaddr8
                        #2: in macaddr8
                        #3: in macaddr8
                macaddr8_out(macaddr8): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return cstring
                        #2: in macaddr8
                macaddr8_recv(internal): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return macaddr8
                        #2: in internal
                macaddr8_send(macaddr8): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bytea
                        #2: in macaddr8
                macaddr8_set7bit(macaddr8): function attributes: strict, cost 1, parallel safe
                    --  set 7th bit in macaddr8
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return macaddr8
                        #2: in macaddr8
                macaddr_and(macaddr,macaddr): function attributes: strict, cost 1, parallel safe
                    --  implementation of & operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return macaddr
                        #2: in macaddr
                        #3: in macaddr
                macaddr_cmp(macaddr,macaddr): function attributes: leakproof, strict, cost 1, parallel safe
                    --  less-equal-greater
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return integer
                        #2: in macaddr
                        #3: in macaddr
                macaddr_eq(macaddr,macaddr): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of = operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in macaddr
                        #3: in macaddr
                macaddr_ge(macaddr,macaddr): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of >= operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in macaddr
                        #3: in macaddr
                macaddr_gt(macaddr,macaddr): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of > operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in macaddr
                        #3: in macaddr
                macaddr_in(cstring): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return macaddr
                        #2: in cstring
                macaddr_le(macaddr,macaddr): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of <= operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in macaddr
                        #3: in macaddr
                macaddr_lt(macaddr,macaddr): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of < operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in macaddr
                        #3: in macaddr
                macaddr_ne(macaddr,macaddr): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of <> operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in macaddr
                        #3: in macaddr
                macaddr_not(macaddr): function attributes: strict, cost 1, parallel safe
                    --  implementation of ~ operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return macaddr
                        #2: in macaddr
                macaddr_or(macaddr,macaddr): function attributes: strict, cost 1, parallel safe
                    --  implementation of | operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return macaddr
                        #2: in macaddr
                        #3: in macaddr
                macaddr_out(macaddr): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return cstring
                        #2: in macaddr
                macaddr_recv(internal): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return macaddr
                        #2: in internal
                macaddr_send(macaddr): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bytea
                        #2: in macaddr
                macaddr_sortsupport(internal): function attributes: strict, cost 1, parallel safe
                    --  sort support
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return void
                        #2: in internal
                make_date(integer,integer,integer): function attributes: strict, cost 1, parallel safe
                    --  construct date
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return date
                        year: in integer
                        month: in integer
                        day: in integer
                make_interval(integer,integer,integer,integer,integer,integer,double precision): function attributes: strict, cost 1, parallel safe
                    --  construct interval
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return interval
                        years: in integer default 0
                        months: in integer default 0
                        weeks: in integer default 0
                        days: in integer default 0
                        hours: in integer default 0
                        mins: in integer default 0
                        secs: in double precision default 0.0
                make_time(integer,integer,double precision): function attributes: strict, cost 1, parallel safe
                    --  construct time
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return time
                        hour: in integer
                        min: in integer
                        sec: in double precision
                make_timestamp(integer,integer,integer,integer,integer,double precision): function attributes: strict, cost 1, parallel safe
                    --  construct timestamp
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return timestamp
                        year: in integer
                        month: in integer
                        mday: in integer
                        hour: in integer
                        min: in integer
                        sec: in double precision
                make_timestamptz(integer,integer,integer,integer,integer,double precision): function attributes: strict, cost 1, parallel safe
                    --  construct timestamp with time zone
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return timestamp with time zone
                        year: in integer
                        month: in integer
                        mday: in integer
                        hour: in integer
                        min: in integer
                        sec: in double precision
                make_timestamptz(integer,integer,integer,integer,integer,double precision,text): function attributes: strict, cost 1, parallel safe
                    --  construct timestamp with time zone
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return timestamp with time zone
                        year: in integer
                        month: in integer
                        mday: in integer
                        hour: in integer
                        min: in integer
                        sec: in double precision
                        timezone: in text
                makeaclitem(oid,oid,text,boolean): function attributes: strict, cost 1, parallel safe
                    --  make ACL item
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return aclitem
                        #2: in oid
                        #3: in oid
                        #4: in text
                        #5: in boolean
                masklen(inet): function attributes: strict, cost 1, parallel safe
                    --  netmask length
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return integer
                        #2: in inet
                md5(bytea): function attributes: leakproof, strict, cost 1, parallel safe
                    --  MD5 hash
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return text
                        #2: in bytea
                md5(text): function attributes: leakproof, strict, cost 1, parallel safe
                    --  MD5 hash
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return text
                        #2: in text
                mic_to_ascii(integer,integer,cstring,internal,integer): function attributes: strict, parallel safe
                    --  internal conversion function for MULE_INTERNAL to SQL_ASCII
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = c
                    + arguments
                        #1: return void
                        #2: in integer
                        #3: in integer
                        #4: in cstring
                        #5: in internal
                        #6: in integer
                mic_to_big5(integer,integer,cstring,internal,integer): function attributes: strict, parallel safe
                    --  internal conversion function for MULE_INTERNAL to BIG5
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = c
                    + arguments
                        #1: return void
                        #2: in integer
                        #3: in integer
                        #4: in cstring
                        #5: in internal
                        #6: in integer
                mic_to_euc_cn(integer,integer,cstring,internal,integer): function attributes: strict, parallel safe
                    --  internal conversion function for MULE_INTERNAL to EUC_CN
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = c
                    + arguments
                        #1: return void
                        #2: in integer
                        #3: in integer
                        #4: in cstring
                        #5: in internal
                        #6: in integer
                mic_to_euc_jp(integer,integer,cstring,internal,integer): function attributes: strict, parallel safe
                    --  internal conversion function for MULE_INTERNAL to EUC_JP
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = c
                    + arguments
                        #1: return void
                        #2: in integer
                        #3: in integer
                        #4: in cstring
                        #5: in internal
                        #6: in integer
                mic_to_euc_kr(integer,integer,cstring,internal,integer): function attributes: strict, parallel safe
                    --  internal conversion function for MULE_INTERNAL to EUC_KR
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = c
                    + arguments
                        #1: return void
                        #2: in integer
                        #3: in integer
                        #4: in cstring
                        #5: in internal
                        #6: in integer
                mic_to_euc_tw(integer,integer,cstring,internal,integer): function attributes: strict, parallel safe
                    --  internal conversion function for MULE_INTERNAL to EUC_TW
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = c
                    + arguments
                        #1: return void
                        #2: in integer
                        #3: in integer
                        #4: in cstring
                        #5: in internal
                        #6: in integer
                mic_to_iso(integer,integer,cstring,internal,integer): function attributes: strict, parallel safe
                    --  internal conversion function for MULE_INTERNAL to ISO-8859-5
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = c
                    + arguments
                        #1: return void
                        #2: in integer
                        #3: in integer
                        #4: in cstring
                        #5: in internal
                        #6: in integer
                mic_to_koi8r(integer,integer,cstring,internal,integer): function attributes: strict, parallel safe
                    --  internal conversion function for MULE_INTERNAL to KOI8R
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = c
                    + arguments
                        #1: return void
                        #2: in integer
                        #3: in integer
                        #4: in cstring
                        #5: in internal
                        #6: in integer
                mic_to_latin1(integer,integer,cstring,internal,integer): function attributes: strict, parallel safe
                    --  internal conversion function for MULE_INTERNAL to LATIN1
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = c
                    + arguments
                        #1: return void
                        #2: in integer
                        #3: in integer
                        #4: in cstring
                        #5: in internal
                        #6: in integer
                mic_to_latin2(integer,integer,cstring,internal,integer): function attributes: strict, parallel safe
                    --  internal conversion function for MULE_INTERNAL to LATIN2
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = c
                    + arguments
                        #1: return void
                        #2: in integer
                        #3: in integer
                        #4: in cstring
                        #5: in internal
                        #6: in integer
                mic_to_latin3(integer,integer,cstring,internal,integer): function attributes: strict, parallel safe
                    --  internal conversion function for MULE_INTERNAL to LATIN3
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = c
                    + arguments
                        #1: return void
                        #2: in integer
                        #3: in integer
                        #4: in cstring
                        #5: in internal
                        #6: in integer
                mic_to_latin4(integer,integer,cstring,internal,integer): function attributes: strict, parallel safe
                    --  internal conversion function for MULE_INTERNAL to LATIN4
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = c
                    + arguments
                        #1: return void
                        #2: in integer
                        #3: in integer
                        #4: in cstring
                        #5: in internal
                        #6: in integer
                mic_to_sjis(integer,integer,cstring,internal,integer): function attributes: strict, parallel safe
                    --  internal conversion function for MULE_INTERNAL to SJIS
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = c
                    + arguments
                        #1: return void
                        #2: in integer
                        #3: in integer
                        #4: in cstring
                        #5: in internal
                        #6: in integer
                mic_to_win1250(integer,integer,cstring,internal,integer): function attributes: strict, parallel safe
                    --  internal conversion function for MULE_INTERNAL to WIN1250
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = c
                    + arguments
                        #1: return void
                        #2: in integer
                        #3: in integer
                        #4: in cstring
                        #5: in internal
                        #6: in integer
                mic_to_win1251(integer,integer,cstring,internal,integer): function attributes: strict, parallel safe
                    --  internal conversion function for MULE_INTERNAL to WIN1251
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = c
                    + arguments
                        #1: return void
                        #2: in integer
                        #3: in integer
                        #4: in cstring
                        #5: in internal
                        #6: in integer
                mic_to_win866(integer,integer,cstring,internal,integer): function attributes: strict, parallel safe
                    --  internal conversion function for MULE_INTERNAL to WIN866
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = c
                    + arguments
                        #1: return void
                        #2: in integer
                        #3: in integer
                        #4: in cstring
                        #5: in internal
                        #6: in integer
                mod(bigint,bigint): function attributes: strict, cost 1, parallel safe
                    --  modulus
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bigint
                        #2: in bigint
                        #3: in bigint
                mod(integer,integer): function attributes: strict, cost 1, parallel safe
                    --  modulus
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return integer
                        #2: in integer
                        #3: in integer
                mod(numeric,numeric): function attributes: strict, cost 1, parallel safe
                    --  modulus
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return numeric
                        #2: in numeric
                        #3: in numeric
                mod(smallint,smallint): function attributes: strict, cost 1, parallel safe
                    --  modulus
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return smallint
                        #2: in smallint
                        #3: in smallint
                mode_final(internal,anyelement): function attributes: cost 1, parallel safe
                    --  aggregate final function
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return anyelement
                        #2: in internal
                        #3: in anyelement
                money(bigint): function attributes: strict, cost 1, parallel safe
                    --  convert int8 to money
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return money
                        #2: in bigint
                money(integer): function attributes: strict, cost 1, parallel safe
                    --  convert int4 to money
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return money
                        #2: in integer
                money(numeric): function attributes: strict, cost 1, parallel safe
                    --  convert numeric to money
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return money
                        #2: in numeric
                mul_d_interval(double precision,interval): function attributes: strict, cost 1, parallel safe
                    --  implementation of * operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return interval
                        #2: in double precision
                        #3: in interval
                mxid_age(xid): function attributes: strict, cost 1, parallel safe
                    --  age of a multi-transaction ID, in multi-transactions before current multi-transaction
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return integer
                        #2: in xid
                name(char): function attributes: strict, cost 1, parallel safe
                    --  convert char(n) to name
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return name
                        #2: in char
                name(text): function attributes: strict, cost 1, parallel safe
                    --  convert text to name
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return name
                        #2: in text
                name(varchar): function attributes: strict, cost 1, parallel safe
                    --  convert varchar to name
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return name
                        #2: in varchar
                nameconcatoid(name,oid): function attributes: strict, cost 1, parallel safe
                    --  concatenate name and oid
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return name
                        #2: in name
                        #3: in oid
                nameeq(name,name): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of = operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in name
                        #3: in name
                nameeqtext(name,text): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of = operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in name
                        #3: in text
                namege(name,name): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of >= operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in name
                        #3: in name
                namegetext(name,text): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of >= operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in name
                        #3: in text
                namegt(name,name): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of > operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in name
                        #3: in name
                namegttext(name,text): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of > operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in name
                        #3: in text
                nameiclike(name,text): function attributes: strict, cost 1, parallel safe
                    --  implementation of ~~* operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in name
                        #3: in text
                nameicnlike(name,text): function attributes: strict, cost 1, parallel safe
                    --  implementation of !~~* operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in name
                        #3: in text
                nameicregexeq(name,text): function attributes: strict, cost 1, parallel safe
                    --  implementation of ~* operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in name
                        #3: in text
                nameicregexne(name,text): function attributes: strict, cost 1, parallel safe
                    --  implementation of !~* operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in name
                        #3: in text
                namein(cstring): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return name
                        #2: in cstring
                namele(name,name): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of <= operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in name
                        #3: in name
                nameletext(name,text): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of <= operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in name
                        #3: in text
                namelike(name,text): function attributes: strict, cost 1, parallel safe
                    --  implementation of ~~ operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in name
                        #3: in text
                namelt(name,name): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of < operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in name
                        #3: in name
                namelttext(name,text): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of < operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in name
                        #3: in text
                namene(name,name): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of <> operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in name
                        #3: in name
                namenetext(name,text): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of <> operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in name
                        #3: in text
                namenlike(name,text): function attributes: strict, cost 1, parallel safe
                    --  implementation of !~~ operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in name
                        #3: in text
                nameout(name): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return cstring
                        #2: in name
                namerecv(internal): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return name
                        #2: in internal
                nameregexeq(name,text): function attributes: strict, cost 1, parallel safe
                    --  implementation of ~ operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in name
                        #3: in text
                nameregexne(name,text): function attributes: strict, cost 1, parallel safe
                    --  implementation of !~ operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in name
                        #3: in text
                namesend(name): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bytea
                        #2: in name
                neqjoinsel(internal,oid,internal,smallint,internal): function attributes: strict, cost 1, parallel safe
                    --  join selectivity of <> and related operators
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return double precision
                        #2: in internal
                        #3: in oid
                        #4: in internal
                        #5: in smallint
                        #6: in internal
                neqsel(internal,oid,internal,integer): function attributes: strict, cost 1, parallel safe
                    --  restriction selectivity of <> and related operators
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return double precision
                        #2: in internal
                        #3: in oid
                        #4: in internal
                        #5: in integer
                netmask(inet): function attributes: strict, cost 1, parallel safe
                    --  netmask of address
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return inet
                        #2: in inet
                network(inet): function attributes: strict, cost 1, parallel safe
                    --  network part of address
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return cidr
                        #2: in inet
                network_cmp(inet,inet): function attributes: leakproof, strict, cost 1, parallel safe
                    --  less-equal-greater
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return integer
                        #2: in inet
                        #3: in inet
                network_eq(inet,inet): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of = operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in inet
                        #3: in inet
                network_ge(inet,inet): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of >= operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in inet
                        #3: in inet
                network_gt(inet,inet): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of > operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in inet
                        #3: in inet
                network_larger(inet,inet): function attributes: strict, cost 1, parallel safe
                    --  larger of two
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return inet
                        #2: in inet
                        #3: in inet
                network_le(inet,inet): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of <= operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in inet
                        #3: in inet
                network_lt(inet,inet): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of < operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in inet
                        #3: in inet
                network_ne(inet,inet): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of <> operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in inet
                        #3: in inet
                network_overlap(inet,inet): function attributes: strict, cost 1, parallel safe
                    --  implementation of && operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in inet
                        #3: in inet
                network_smaller(inet,inet): function attributes: strict, cost 1, parallel safe
                    --  smaller of two
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return inet
                        #2: in inet
                        #3: in inet
                network_sub(inet,inet): function attributes: strict, cost 1, parallel safe
                    --  implementation of << operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in inet
                        #3: in inet
                network_subeq(inet,inet): function attributes: strict, cost 1, parallel safe
                    --  implementation of <<= operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in inet
                        #3: in inet
                network_subset_support(internal): function attributes: strict, cost 1, parallel safe
                    --  planner support for network_sub/superset
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return internal
                        #2: in internal
                network_sup(inet,inet): function attributes: strict, cost 1, parallel safe
                    --  implementation of >> operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in inet
                        #3: in inet
                network_supeq(inet,inet): function attributes: strict, cost 1, parallel safe
                    --  implementation of >>= operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in inet
                        #3: in inet
                networkjoinsel(internal,oid,internal,smallint,internal): function attributes: strict, cost 1, parallel safe
                    --  join selectivity for network operators
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return double precision
                        #2: in internal
                        #3: in oid
                        #4: in internal
                        #5: in smallint
                        #6: in internal
                networksel(internal,oid,internal,integer): function attributes: strict, cost 1, parallel safe
                    --  restriction selectivity for network operators
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return double precision
                        #2: in internal
                        #3: in oid
                        #4: in internal
                        #5: in integer
                nextval(regclass): function attributes: strict, cost 1
                    --  sequence next value
                    . references
                        language = internal
                    + arguments
                        #1: return bigint
                        #2: in regclass
                nlikejoinsel(internal,oid,internal,smallint,internal): function attributes: strict, cost 1, parallel safe
                    --  join selectivity of NOT LIKE
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return double precision
                        #2: in internal
                        #3: in oid
                        #4: in internal
                        #5: in smallint
                        #6: in internal
                nlikesel(internal,oid,internal,integer): function attributes: strict, cost 1, parallel safe
                    --  restriction selectivity of NOT LIKE
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return double precision
                        #2: in internal
                        #3: in oid
                        #4: in internal
                        #5: in integer
                notlike(bytea,bytea): function attributes: strict, cost 1, parallel safe
                    --  does not match LIKE expression
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in bytea
                        #3: in bytea
                notlike(name,text): function attributes: strict, cost 1, parallel safe
                    --  does not match LIKE expression
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in name
                        #3: in text
                notlike(text,text): function attributes: strict, cost 1, parallel safe
                    --  does not match LIKE expression
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in text
                        #3: in text
                now(): function attributes: strict, cost 1, parallel safe
                    --  current transaction time
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return timestamp with time zone
                npoints(path): function attributes: strict, cost 1, parallel safe
                    --  number of points
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return integer
                        #2: in path
                npoints(polygon): function attributes: strict, cost 1, parallel safe
                    --  number of points
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return integer
                        #2: in polygon
                nth_value(anyelement,integer): function attributes: strict, cost 1, parallel safe, window
                    --  fetch the Nth row value
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return anyelement
                        #2: in anyelement
                        #3: in integer
                ntile(integer): function attributes: strict, cost 1, parallel safe, window
                    --  split rows into N groups
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return integer
                        #2: in integer
                num_nonnulls("any"): function attributes: cost 1, parallel safe
                    --  count the number of non-NULL arguments
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return integer
                        #2: in "any"
                            . properties
                                variadic +
                num_nulls("any"): function attributes: cost 1, parallel safe
                    --  count the number of NULL arguments
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return integer
                        #2: in "any"
                            . properties
                                variadic +
                numeric(bigint): function attributes: strict, cost 1, parallel safe
                    --  convert int8 to numeric
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return numeric
                        #2: in bigint
                numeric(double precision): function attributes: strict, cost 1, parallel safe
                    --  convert float8 to numeric
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return numeric
                        #2: in double precision
                numeric(integer): function attributes: strict, cost 1, parallel safe
                    --  convert int4 to numeric
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return numeric
                        #2: in integer
                numeric(jsonb): function attributes: strict, cost 1, parallel safe
                    --  convert jsonb to numeric
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return numeric
                        #2: in jsonb
                numeric(money): function attributes: strict, cost 1, parallel safe
                    --  convert money to numeric
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return numeric
                        #2: in money
                numeric(numeric,integer): function attributes: strict, cost 1, parallel safe
                    --  adjust numeric to typmod precision/scale
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return numeric
                        #2: in numeric
                        #3: in integer
                numeric(real): function attributes: strict, cost 1, parallel safe
                    --  convert float4 to numeric
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return numeric
                        #2: in real
                numeric(smallint): function attributes: strict, cost 1, parallel safe
                    --  convert int2 to numeric
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return numeric
                        #2: in smallint
                numeric_abs(numeric): function attributes: strict, cost 1, parallel safe
                    --  implementation of @ operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return numeric
                        #2: in numeric
                numeric_accum(internal,numeric): function attributes: cost 1, parallel safe
                    --  aggregate transition function
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return internal
                        #2: in internal
                        #3: in numeric
                numeric_accum_inv(internal,numeric): function attributes: cost 1, parallel safe
                    --  aggregate transition function
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return internal
                        #2: in internal
                        #3: in numeric
                numeric_add(numeric,numeric): function attributes: strict, cost 1, parallel safe
                    --  implementation of + operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return numeric
                        #2: in numeric
                        #3: in numeric
                numeric_avg(internal): function attributes: cost 1, parallel safe
                    --  aggregate final function
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return numeric
                        #2: in internal
                numeric_avg_accum(internal,numeric): function attributes: cost 1, parallel safe
                    --  aggregate transition function
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return internal
                        #2: in internal
                        #3: in numeric
                numeric_avg_combine(internal,internal): function attributes: cost 1, parallel safe
                    --  aggregate combine function
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return internal
                        #2: in internal
                        #3: in internal
                numeric_avg_deserialize(bytea,internal): function attributes: strict, cost 1, parallel safe
                    --  aggregate deserial function
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return internal
                        #2: in bytea
                        #3: in internal
                numeric_avg_serialize(internal): function attributes: strict, cost 1, parallel safe
                    --  aggregate serial function
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bytea
                        #2: in internal
                numeric_cmp(numeric,numeric): function attributes: strict, cost 1, parallel safe
                    --  less-equal-greater
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return integer
                        #2: in numeric
                        #3: in numeric
                numeric_combine(internal,internal): function attributes: cost 1, parallel safe
                    --  aggregate combine function
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return internal
                        #2: in internal
                        #3: in internal
                numeric_deserialize(bytea,internal): function attributes: strict, cost 1, parallel safe
                    --  aggregate deserial function
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return internal
                        #2: in bytea
                        #3: in internal
                numeric_div(numeric,numeric): function attributes: strict, cost 1, parallel safe
                    --  implementation of / operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return numeric
                        #2: in numeric
                        #3: in numeric
                numeric_div_trunc(numeric,numeric): function attributes: strict, cost 1, parallel safe
                    --  trunc(x/y)
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return numeric
                        #2: in numeric
                        #3: in numeric
                numeric_eq(numeric,numeric): function attributes: strict, cost 1, parallel safe
                    --  implementation of = operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in numeric
                        #3: in numeric
                numeric_exp(numeric): function attributes: strict, cost 1, parallel safe
                    --  natural exponential (e^x)
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return numeric
                        #2: in numeric
                numeric_fac(bigint): function attributes: strict, cost 1, parallel safe
                    --  implementation of ! operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return numeric
                        #2: in bigint
                numeric_ge(numeric,numeric): function attributes: strict, cost 1, parallel safe
                    --  implementation of >= operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in numeric
                        #3: in numeric
                numeric_gt(numeric,numeric): function attributes: strict, cost 1, parallel safe
                    --  implementation of > operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in numeric
                        #3: in numeric
                numeric_in(cstring,oid,integer): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return numeric
                        #2: in cstring
                        #3: in oid
                        #4: in integer
                numeric_inc(numeric): function attributes: strict, cost 1, parallel safe
                    --  increment by one
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return numeric
                        #2: in numeric
                numeric_larger(numeric,numeric): function attributes: strict, cost 1, parallel safe
                    --  larger of two
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return numeric
                        #2: in numeric
                        #3: in numeric
                numeric_le(numeric,numeric): function attributes: strict, cost 1, parallel safe
                    --  implementation of <= operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in numeric
                        #3: in numeric
                numeric_ln(numeric): function attributes: strict, cost 1, parallel safe
                    --  natural logarithm
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return numeric
                        #2: in numeric
                numeric_log(numeric,numeric): function attributes: strict, cost 1, parallel safe
                    --  logarithm base m of n
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return numeric
                        #2: in numeric
                        #3: in numeric
                numeric_lt(numeric,numeric): function attributes: strict, cost 1, parallel safe
                    --  implementation of < operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in numeric
                        #3: in numeric
                numeric_mod(numeric,numeric): function attributes: strict, cost 1, parallel safe
                    --  implementation of % operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return numeric
                        #2: in numeric
                        #3: in numeric
                numeric_mul(numeric,numeric): function attributes: strict, cost 1, parallel safe
                    --  implementation of * operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return numeric
                        #2: in numeric
                        #3: in numeric
                numeric_ne(numeric,numeric): function attributes: strict, cost 1, parallel safe
                    --  implementation of <> operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in numeric
                        #3: in numeric
                numeric_out(numeric): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return cstring
                        #2: in numeric
                numeric_poly_avg(internal): function attributes: cost 1, parallel safe
                    --  aggregate final function
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return numeric
                        #2: in internal
                numeric_poly_combine(internal,internal): function attributes: cost 1, parallel safe
                    --  aggregate combine function
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return internal
                        #2: in internal
                        #3: in internal
                numeric_poly_deserialize(bytea,internal): function attributes: strict, cost 1, parallel safe
                    --  aggregate deserial function
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return internal
                        #2: in bytea
                        #3: in internal
                numeric_poly_serialize(internal): function attributes: strict, cost 1, parallel safe
                    --  aggregate serial function
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bytea
                        #2: in internal
                numeric_poly_stddev_pop(internal): function attributes: cost 1, parallel safe
                    --  aggregate final function
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return numeric
                        #2: in internal
                numeric_poly_stddev_samp(internal): function attributes: cost 1, parallel safe
                    --  aggregate final function
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return numeric
                        #2: in internal
                numeric_poly_sum(internal): function attributes: cost 1, parallel safe
                    --  aggregate final function
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return numeric
                        #2: in internal
                numeric_poly_var_pop(internal): function attributes: cost 1, parallel safe
                    --  aggregate final function
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return numeric
                        #2: in internal
                numeric_poly_var_samp(internal): function attributes: cost 1, parallel safe
                    --  aggregate final function
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return numeric
                        #2: in internal
                numeric_power(numeric,numeric): function attributes: strict, cost 1, parallel safe
                    --  implementation of ^ operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return numeric
                        #2: in numeric
                        #3: in numeric
                numeric_recv(internal,oid,integer): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return numeric
                        #2: in internal
                        #3: in oid
                        #4: in integer
                numeric_send(numeric): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bytea
                        #2: in numeric
                numeric_serialize(internal): function attributes: strict, cost 1, parallel safe
                    --  aggregate serial function
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bytea
                        #2: in internal
                numeric_smaller(numeric,numeric): function attributes: strict, cost 1, parallel safe
                    --  smaller of two
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return numeric
                        #2: in numeric
                        #3: in numeric
                numeric_sortsupport(internal): function attributes: strict, cost 1, parallel safe
                    --  sort support
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return void
                        #2: in internal
                numeric_sqrt(numeric): function attributes: strict, cost 1, parallel safe
                    --  square root
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return numeric
                        #2: in numeric
                numeric_stddev_pop(internal): function attributes: cost 1, parallel safe
                    --  aggregate final function
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return numeric
                        #2: in internal
                numeric_stddev_samp(internal): function attributes: cost 1, parallel safe
                    --  aggregate final function
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return numeric
                        #2: in internal
                numeric_sub(numeric,numeric): function attributes: strict, cost 1, parallel safe
                    --  implementation of - operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return numeric
                        #2: in numeric
                        #3: in numeric
                numeric_sum(internal): function attributes: cost 1, parallel safe
                    --  aggregate final function
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return numeric
                        #2: in internal
                numeric_support(internal): function attributes: strict, cost 1, parallel safe
                    --  planner support for numeric length coercion
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return internal
                        #2: in internal
                numeric_uminus(numeric): function attributes: strict, cost 1, parallel safe
                    --  implementation of - operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return numeric
                        #2: in numeric
                numeric_uplus(numeric): function attributes: strict, cost 1, parallel safe
                    --  implementation of + operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return numeric
                        #2: in numeric
                numeric_var_pop(internal): function attributes: cost 1, parallel safe
                    --  aggregate final function
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return numeric
                        #2: in internal
                numeric_var_samp(internal): function attributes: cost 1, parallel safe
                    --  aggregate final function
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return numeric
                        #2: in internal
                numerictypmodin(cstring[]): function attributes: strict, cost 1, parallel safe
                    --  I/O typmod
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return integer
                        #2: in cstring[]
                numerictypmodout(integer): function attributes: strict, cost 1, parallel safe
                    --  I/O typmod
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return cstring
                        #2: in integer
                numnode(tsquery): function attributes: strict, cost 1, parallel safe
                    --  number of nodes
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return integer
                        #2: in tsquery
                numrange(numeric,numeric): function attributes: cost 1, parallel safe
                    --  numrange constructor
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return numrange
                        #2: in numeric
                        #3: in numeric
                numrange(numeric,numeric,text): function attributes: cost 1, parallel safe
                    --  numrange constructor
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return numrange
                        #2: in numeric
                        #3: in numeric
                        #4: in text
                numrange_subdiff(numeric,numeric): function attributes: strict, cost 1, parallel safe
                    --  float8 difference of two numeric values
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return double precision
                        #2: in numeric
                        #3: in numeric
                obj_description(oid): function attributes: strict, parallel safe
                    --  deprecated, use two-argument form instead
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = sql
                    + arguments
                        #1: return text
                        #2: in oid
                obj_description(oid,name): function attributes: strict, parallel safe
                    --  get description for object id and catalog name
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = sql
                    + arguments
                        #1: return text
                        #2: in oid
                        #3: in name
                octet_length(bit): function attributes: strict, cost 1, parallel safe
                    --  octet length
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return integer
                        #2: in bit
                octet_length(bytea): function attributes: strict, cost 1, parallel safe
                    --  octet length
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return integer
                        #2: in bytea
                octet_length(char): function attributes: strict, cost 1, parallel safe
                    --  octet length
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return integer
                        #2: in char
                octet_length(text): function attributes: strict, cost 1, parallel safe
                    --  octet length
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return integer
                        #2: in text
                oid(bigint): function attributes: strict, cost 1, parallel safe
                    --  convert int8 to oid
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return oid
                        #2: in bigint
                oideq(oid,oid): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of = operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in oid
                        #3: in oid
                oidge(oid,oid): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of >= operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in oid
                        #3: in oid
                oidgt(oid,oid): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of > operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in oid
                        #3: in oid
                oidin(cstring): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return oid
                        #2: in cstring
                oidlarger(oid,oid): function attributes: strict, cost 1, parallel safe
                    --  larger of two
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return oid
                        #2: in oid
                        #3: in oid
                oidle(oid,oid): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of <= operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in oid
                        #3: in oid
                oidlt(oid,oid): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of < operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in oid
                        #3: in oid
                oidne(oid,oid): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of <> operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in oid
                        #3: in oid
                oidout(oid): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return cstring
                        #2: in oid
                oidrecv(internal): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return oid
                        #2: in internal
                oidsend(oid): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bytea
                        #2: in oid
                oidsmaller(oid,oid): function attributes: strict, cost 1, parallel safe
                    --  smaller of two
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return oid
                        #2: in oid
                        #3: in oid
                oidvectoreq(oidvector,oidvector): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of = operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in oidvector
                        #3: in oidvector
                oidvectorge(oidvector,oidvector): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of >= operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in oidvector
                        #3: in oidvector
                oidvectorgt(oidvector,oidvector): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of > operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in oidvector
                        #3: in oidvector
                oidvectorin(cstring): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return oidvector
                        #2: in cstring
                oidvectorle(oidvector,oidvector): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of <= operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in oidvector
                        #3: in oidvector
                oidvectorlt(oidvector,oidvector): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of < operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in oidvector
                        #3: in oidvector
                oidvectorne(oidvector,oidvector): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of <> operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in oidvector
                        #3: in oidvector
                oidvectorout(oidvector): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return cstring
                        #2: in oidvector
                oidvectorrecv(internal): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return oidvector
                        #2: in internal
                oidvectorsend(oidvector): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bytea
                        #2: in oidvector
                oidvectortypes(oidvector): function attributes: strict, cost 1, parallel safe
                    --  print type names of oidvector field
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return text
                        #2: in oidvector
                on_pb(point,box): function attributes: strict, cost 1, parallel safe
                    --  implementation of <@ operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in point
                        #3: in box
                on_pl(point,line): function attributes: strict, cost 1, parallel safe
                    --  implementation of <@ operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in point
                        #3: in line
                on_ppath(point,path): function attributes: strict, cost 1, parallel safe
                    --  implementation of <@ operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in point
                        #3: in path
                on_ps(point,lseg): function attributes: strict, cost 1, parallel safe
                    --  implementation of <@ operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in point
                        #3: in lseg
                on_sb(lseg,box): function attributes: strict, cost 1, parallel safe
                    --  implementation of <@ operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in lseg
                        #3: in box
                on_sl(lseg,line): function attributes: strict, cost 1, parallel safe
                    --  implementation of <@ operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in lseg
                        #3: in line
                opaque_in(cstring): function attributes: cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return opaque
                        #2: in cstring
                opaque_out(opaque): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return cstring
                        #2: in opaque
                ordered_set_transition(internal,"any"): function attributes: cost 1, parallel safe
                    --  aggregate transition function
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return internal
                        #2: in internal
                        #3: in "any"
                ordered_set_transition_multi(internal,"any"): function attributes: cost 1, parallel safe
                    --  aggregate transition function
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return internal
                        #2: in internal
                        #3: in "any"
                            . properties
                                variadic +
                overlaps(time with time zone,time with time zone,time with time zone,time with time zone): function attributes: cost 1, parallel safe
                    --  intervals overlap?
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in time with time zone
                        #3: in time with time zone
                        #4: in time with time zone
                        #5: in time with time zone
                overlaps(time,interval,time,interval): function attributes: cost 1, parallel safe
                    --  intervals overlap?
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = sql
                    + arguments
                        #1: return boolean
                        #2: in time
                        #3: in interval
                        #4: in time
                        #5: in interval
                overlaps(time,interval,time,time): function attributes: cost 1, parallel safe
                    --  intervals overlap?
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = sql
                    + arguments
                        #1: return boolean
                        #2: in time
                        #3: in interval
                        #4: in time
                        #5: in time
                overlaps(time,time,time,interval): function attributes: cost 1, parallel safe
                    --  intervals overlap?
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = sql
                    + arguments
                        #1: return boolean
                        #2: in time
                        #3: in time
                        #4: in time
                        #5: in interval
                overlaps(time,time,time,time): function attributes: cost 1, parallel safe
                    --  intervals overlap?
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in time
                        #3: in time
                        #4: in time
                        #5: in time
                overlaps(timestamp with time zone,interval,timestamp with time zone,interval): function attributes: cost 1, parallel safe
                    --  intervals overlap?
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = sql
                    + arguments
                        #1: return boolean
                        #2: in timestamp with time zone
                        #3: in interval
                        #4: in timestamp with time zone
                        #5: in interval
                overlaps(timestamp with time zone,interval,timestamp with time zone,timestamp with time zone): function attributes: cost 1, parallel safe
                    --  intervals overlap?
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = sql
                    + arguments
                        #1: return boolean
                        #2: in timestamp with time zone
                        #3: in interval
                        #4: in timestamp with time zone
                        #5: in timestamp with time zone
                overlaps(timestamp with time zone,timestamp with time zone,timestamp with time zone,interval): function attributes: cost 1, parallel safe
                    --  intervals overlap?
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = sql
                    + arguments
                        #1: return boolean
                        #2: in timestamp with time zone
                        #3: in timestamp with time zone
                        #4: in timestamp with time zone
                        #5: in interval
                overlaps(timestamp with time zone,timestamp with time zone,timestamp with time zone,timestamp with time zone): function attributes: cost 1, parallel safe
                    --  intervals overlap?
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in timestamp with time zone
                        #3: in timestamp with time zone
                        #4: in timestamp with time zone
                        #5: in timestamp with time zone
                overlaps(timestamp,interval,timestamp,interval): function attributes: cost 1, parallel safe
                    --  intervals overlap?
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = sql
                    + arguments
                        #1: return boolean
                        #2: in timestamp
                        #3: in interval
                        #4: in timestamp
                        #5: in interval
                overlaps(timestamp,interval,timestamp,timestamp): function attributes: cost 1, parallel safe
                    --  intervals overlap?
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = sql
                    + arguments
                        #1: return boolean
                        #2: in timestamp
                        #3: in interval
                        #4: in timestamp
                        #5: in timestamp
                overlaps(timestamp,timestamp,timestamp,interval): function attributes: cost 1, parallel safe
                    --  intervals overlap?
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = sql
                    + arguments
                        #1: return boolean
                        #2: in timestamp
                        #3: in timestamp
                        #4: in timestamp
                        #5: in interval
                overlaps(timestamp,timestamp,timestamp,timestamp): function attributes: cost 1, parallel safe
                    --  intervals overlap?
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in timestamp
                        #3: in timestamp
                        #4: in timestamp
                        #5: in timestamp
                overlay(bit,bit,integer): function attributes: strict, cost 1, parallel safe
                    --  substitute portion of bitstring
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bit
                        #2: in bit
                        #3: in bit
                        #4: in integer
                overlay(bit,bit,integer,integer): function attributes: strict, cost 1, parallel safe
                    --  substitute portion of bitstring
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bit
                        #2: in bit
                        #3: in bit
                        #4: in integer
                        #5: in integer
                overlay(bytea,bytea,integer): function attributes: strict, cost 1, parallel safe
                    --  substitute portion of string
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bytea
                        #2: in bytea
                        #3: in bytea
                        #4: in integer
                overlay(bytea,bytea,integer,integer): function attributes: strict, cost 1, parallel safe
                    --  substitute portion of string
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bytea
                        #2: in bytea
                        #3: in bytea
                        #4: in integer
                        #5: in integer
                overlay(text,text,integer): function attributes: strict, cost 1, parallel safe
                    --  substitute portion of string
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return text
                        #2: in text
                        #3: in text
                        #4: in integer
                overlay(text,text,integer,integer): function attributes: strict, cost 1, parallel safe
                    --  substitute portion of string
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return text
                        #2: in text
                        #3: in text
                        #4: in integer
                        #5: in integer
                parse_ident(text,boolean): function attributes: strict, cost 1, parallel safe
                    --  parse qualified identifier to array of identifiers
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return text[]
                        str: in text
                        strict: in boolean default true
                path(polygon): function attributes: strict, cost 1, parallel safe
                    --  convert polygon to path
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return path
                        #2: in polygon
                path_add(path,path): function attributes: strict, cost 1, parallel safe
                    --  implementation of + operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return path
                        #2: in path
                        #3: in path
                path_add_pt(path,point): function attributes: strict, cost 1, parallel safe
                    --  implementation of + operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return path
                        #2: in path
                        #3: in point
                path_center(path): function attributes: strict, cost 1, parallel safe
                    --  implementation of @@ operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return point
                        #2: in path
                path_contain_pt(path,point): function attributes: strict, cost 1, parallel safe
                    --  implementation of @> operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = sql
                    + arguments
                        #1: return boolean
                        #2: in path
                        #3: in point
                path_distance(path,path): function attributes: strict, cost 1, parallel safe
                    --  implementation of <-> operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return double precision
                        #2: in path
                        #3: in path
                path_div_pt(path,point): function attributes: strict, cost 1, parallel safe
                    --  implementation of / operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return path
                        #2: in path
                        #3: in point
                path_in(cstring): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return path
                        #2: in cstring
                path_inter(path,path): function attributes: strict, cost 1, parallel safe
                    --  implementation of ?# operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in path
                        #3: in path
                path_length(path): function attributes: strict, cost 1, parallel safe
                    --  implementation of @-@ operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return double precision
                        #2: in path
                path_mul_pt(path,point): function attributes: strict, cost 1, parallel safe
                    --  implementation of * operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return path
                        #2: in path
                        #3: in point
                path_n_eq(path,path): function attributes: strict, cost 1, parallel safe
                    --  implementation of = operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in path
                        #3: in path
                path_n_ge(path,path): function attributes: strict, cost 1, parallel safe
                    --  implementation of >= operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in path
                        #3: in path
                path_n_gt(path,path): function attributes: strict, cost 1, parallel safe
                    --  implementation of > operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in path
                        #3: in path
                path_n_le(path,path): function attributes: strict, cost 1, parallel safe
                    --  implementation of <= operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in path
                        #3: in path
                path_n_lt(path,path): function attributes: strict, cost 1, parallel safe
                    --  implementation of < operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in path
                        #3: in path
                path_npoints(path): function attributes: strict, cost 1, parallel safe
                    --  implementation of # operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return integer
                        #2: in path
                path_out(path): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return cstring
                        #2: in path
                path_recv(internal): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return path
                        #2: in internal
                path_send(path): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bytea
                        #2: in path
                path_sub_pt(path,point): function attributes: strict, cost 1, parallel safe
                    --  implementation of - operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return path
                        #2: in path
                        #3: in point
                pclose(path): function attributes: strict, cost 1, parallel safe
                    --  close path
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return path
                        #2: in path
                percent_rank(): function attributes: cost 1, parallel safe, window
                    --  fractional rank within partition
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return double precision
                percent_rank_final(internal,"any"): function attributes: cost 1, parallel safe
                    --  aggregate final function
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return double precision
                        #2: in internal
                        #3: in "any"
                            . properties
                                variadic +
                percentile_cont_float8_final(internal,double precision): function attributes: cost 1, parallel safe
                    --  aggregate final function
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return double precision
                        #2: in internal
                        #3: in double precision
                percentile_cont_float8_multi_final(internal,double precision[]): function attributes: cost 1, parallel safe
                    --  aggregate final function
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return double precision[]
                        #2: in internal
                        #3: in double precision[]
                percentile_cont_interval_final(internal,double precision): function attributes: cost 1, parallel safe
                    --  aggregate final function
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return interval
                        #2: in internal
                        #3: in double precision
                percentile_cont_interval_multi_final(internal,double precision[]): function attributes: cost 1, parallel safe
                    --  aggregate final function
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return interval[]
                        #2: in internal
                        #3: in double precision[]
                percentile_disc_final(internal,double precision,anyelement): function attributes: cost 1, parallel safe
                    --  aggregate final function
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return anyelement
                        #2: in internal
                        #3: in double precision
                        #4: in anyelement
                percentile_disc_multi_final(internal,double precision[],anyelement): function attributes: cost 1, parallel safe
                    --  aggregate final function
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return anyarray
                        #2: in internal
                        #3: in double precision[]
                        #4: in anyelement
                pg_advisory_lock(bigint): function attributes: strict, cost 1
                    --  obtain exclusive advisory lock
                    . references
                        language = internal
                    + arguments
                        #1: return void
                        #2: in bigint
                pg_advisory_lock(integer,integer): function attributes: strict, cost 1
                    --  obtain exclusive advisory lock
                    . references
                        language = internal
                    + arguments
                        #1: return void
                        #2: in integer
                        #3: in integer
                pg_advisory_lock_shared(bigint): function attributes: strict, cost 1
                    --  obtain shared advisory lock
                    . references
                        language = internal
                    + arguments
                        #1: return void
                        #2: in bigint
                pg_advisory_lock_shared(integer,integer): function attributes: strict, cost 1
                    --  obtain shared advisory lock
                    . references
                        language = internal
                    + arguments
                        #1: return void
                        #2: in integer
                        #3: in integer
                pg_advisory_unlock(bigint): function attributes: strict, cost 1
                    --  release exclusive advisory lock
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in bigint
                pg_advisory_unlock(integer,integer): function attributes: strict, cost 1
                    --  release exclusive advisory lock
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in integer
                        #3: in integer
                pg_advisory_unlock_all(): function attributes: strict, cost 1
                    --  release all advisory locks
                    . references
                        language = internal
                    + arguments
                        #1: return void
                pg_advisory_unlock_shared(bigint): function attributes: strict, cost 1
                    --  release shared advisory lock
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in bigint
                pg_advisory_unlock_shared(integer,integer): function attributes: strict, cost 1
                    --  release shared advisory lock
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in integer
                        #3: in integer
                pg_advisory_xact_lock(bigint): function attributes: strict, cost 1
                    --  obtain exclusive advisory lock
                    . references
                        language = internal
                    + arguments
                        #1: return void
                        #2: in bigint
                pg_advisory_xact_lock(integer,integer): function attributes: strict, cost 1
                    --  obtain exclusive advisory lock
                    . references
                        language = internal
                    + arguments
                        #1: return void
                        #2: in integer
                        #3: in integer
                pg_advisory_xact_lock_shared(bigint): function attributes: strict, cost 1
                    --  obtain shared advisory lock
                    . references
                        language = internal
                    + arguments
                        #1: return void
                        #2: in bigint
                pg_advisory_xact_lock_shared(integer,integer): function attributes: strict, cost 1
                    --  obtain shared advisory lock
                    . references
                        language = internal
                    + arguments
                        #1: return void
                        #2: in integer
                        #3: in integer
                pg_available_extension_versions(): function attributes: strict, cost 10, parallel safe, rows 100
                    --  list available extension versions
                    . properties
                        returns_set +
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return setof record
                        name: out name
                        version: out text
                        superuser: out boolean
                        relocatable: out boolean
                        schema: out name
                        requires: out name[]
                        comment: out text
                pg_available_extensions(): function attributes: strict, cost 10, parallel safe, rows 100
                    --  list available extensions
                    . properties
                        returns_set +
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return setof record
                        name: out name
                        default_version: out text
                        comment: out text
                pg_backend_pid(): function attributes: strict, cost 1, parallel restricted
                    --  statistics: current backend PID
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return integer
                pg_backup_start_time(): function attributes: strict, cost 1, parallel safe
                    --  start time of an online backup
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return timestamp with time zone
                pg_blocking_pids(integer): function attributes: strict, cost 1, parallel safe
                    --  get array of PIDs of sessions blocking specified backend PID from acquiring a heavyweight lock
                    . references
                        language = internal
                    + arguments
                        #1: return integer[]
                        #2: in integer
                pg_cancel_backend(integer): function attributes: strict, cost 1, parallel safe
                    --  cancel a server process' current query
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in integer
                pg_char_to_encoding(name): function attributes: strict, cost 1, parallel safe
                    --  convert encoding name to encoding id
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return integer
                        #2: in name
                pg_client_encoding(): function attributes: strict, cost 1, parallel safe
                    --  encoding name of current database
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return name
                pg_collation_actual_version(oid): function attributes: strict, parallel safe
                    --  get actual version of collation from operating system
                    . references
                        language = internal
                    + arguments
                        #1: return text
                        #2: in oid
                pg_collation_for("any"): function attributes: cost 1, parallel safe
                    --  collation of the argument; implementation of the COLLATION FOR expression
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return text
                        #2: in "any"
                pg_collation_is_visible(oid): function attributes: strict, cost 10, parallel safe
                    --  is collation visible in search path?
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in oid
                pg_column_is_updatable(regclass,smallint,boolean): function attributes: strict, cost 10, parallel safe
                    --  is a column updatable
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in regclass
                        #3: in smallint
                        #4: in boolean
                pg_column_size("any"): function attributes: strict, cost 1, parallel safe
                    --  bytes required to store the value, perhaps with compression
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return integer
                        #2: in "any"
                pg_conf_load_time(): function attributes: strict, cost 1, parallel restricted
                    --  configuration load time
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return timestamp with time zone
                pg_config(): function attributes: strict, cost 1, parallel restricted, rows 23
                    --  pg_config binary as a function
                    . properties
                        returns_set +
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return setof record
                        name: out text
                        setting: out text
                pg_control_checkpoint(): function attributes: strict, cost 1, parallel safe
                    --  pg_controldata checkpoint state information as a function
                    . references
                        language = internal
                    + arguments
                        #1: return record
                        checkpoint_lsn: out pg_lsn
                        redo_lsn: out pg_lsn
                        redo_wal_file: out text
                        timeline_id: out integer
                        prev_timeline_id: out integer
                        full_page_writes: out boolean
                        next_xid: out text
                        next_oid: out oid
                        next_multixact_id: out xid
                        next_multi_offset: out xid
                        oldest_xid: out xid
                        oldest_xid_dbid: out oid
                        oldest_active_xid: out xid
                        oldest_multi_xid: out xid
                        oldest_multi_dbid: out oid
                        oldest_commit_ts_xid: out xid
                        newest_commit_ts_xid: out xid
                        checkpoint_time: out timestamp with time zone
                pg_control_init(): function attributes: strict, cost 1, parallel safe
                    --  pg_controldata init state information as a function
                    . references
                        language = internal
                    + arguments
                        #1: return record
                        max_data_alignment: out integer
                        database_block_size: out integer
                        blocks_per_segment: out integer
                        wal_block_size: out integer
                        bytes_per_wal_segment: out integer
                        max_identifier_length: out integer
                        max_index_columns: out integer
                        max_toast_chunk_size: out integer
                        large_object_chunk_size: out integer
                        float4_pass_by_value: out boolean
                        float8_pass_by_value: out boolean
                        data_page_checksum_version: out integer
                pg_control_recovery(): function attributes: strict, cost 1, parallel safe
                    --  pg_controldata recovery state information as a function
                    . references
                        language = internal
                    + arguments
                        #1: return record
                        min_recovery_end_lsn: out pg_lsn
                        min_recovery_end_timeline: out integer
                        backup_start_lsn: out pg_lsn
                        backup_end_lsn: out pg_lsn
                        end_of_backup_record_required: out boolean
                pg_control_system(): function attributes: strict, cost 1, parallel safe
                    --  pg_controldata general state information as a function
                    . references
                        language = internal
                    + arguments
                        #1: return record
                        pg_control_version: out integer
                        catalog_version_no: out integer
                        system_identifier: out bigint
                        pg_control_last_modified: out timestamp with time zone
                pg_conversion_is_visible(oid): function attributes: strict, cost 10, parallel safe
                    --  is conversion visible in search path?
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in oid
                pg_copy_logical_replication_slot(name,name): function attributes: strict, cost 1
                    --  copy a logical replication slot
                    . references
                        language = internal
                    + arguments
                        #1: return record
                        src_slot_name: in name
                        dst_slot_name: in name
                        slot_name: out name
                        lsn: out pg_lsn
                pg_copy_logical_replication_slot(name,name,boolean): function attributes: strict, cost 1
                    --  copy a logical replication slot, changing temporality
                    . references
                        language = internal
                    + arguments
                        #1: return record
                        src_slot_name: in name
                        dst_slot_name: in name
                        temporary: in boolean
                        slot_name: out name
                        lsn: out pg_lsn
                pg_copy_logical_replication_slot(name,name,boolean,name): function attributes: strict, cost 1
                    --  copy a logical replication slot, changing temporality and plugin
                    . references
                        language = internal
                    + arguments
                        #1: return record
                        src_slot_name: in name
                        dst_slot_name: in name
                        temporary: in boolean
                        plugin: in name
                        slot_name: out name
                        lsn: out pg_lsn
                pg_copy_physical_replication_slot(name,name): function attributes: strict, cost 1
                    --  copy a physical replication slot
                    . references
                        language = internal
                    + arguments
                        #1: return record
                        src_slot_name: in name
                        dst_slot_name: in name
                        slot_name: out name
                        lsn: out pg_lsn
                pg_copy_physical_replication_slot(name,name,boolean): function attributes: strict, cost 1
                    --  copy a physical replication slot, changing temporality
                    . references
                        language = internal
                    + arguments
                        #1: return record
                        src_slot_name: in name
                        dst_slot_name: in name
                        temporary: in boolean
                        slot_name: out name
                        lsn: out pg_lsn
                pg_create_logical_replication_slot(name,name,boolean): function attributes: strict, cost 1
                    --  set up a logical replication slot
                    . references
                        language = internal
                    + arguments
                        #1: return record
                        slot_name: in name
                        plugin: in name
                        temporary: in boolean default false
                        slot_name: out name
                        lsn: out pg_lsn
                pg_create_physical_replication_slot(name,boolean,boolean): function attributes: strict, cost 1
                    --  create a physical replication slot
                    . references
                        language = internal
                    + arguments
                        #1: return record
                        slot_name: in name
                        immediately_reserve: in boolean default false
                        temporary: in boolean default false
                        slot_name: out name
                        lsn: out pg_lsn
                pg_create_restore_point(text): function attributes: strict, cost 1, parallel safe
                    --  create a named restore point
                    . references
                        language = internal
                    + arguments
                        #1: return pg_lsn
                        #2: in text
                pg_current_logfile(): function attributes: cost 1, parallel safe
                    --  current logging collector file location
                    . references
                        language = internal
                    + arguments
                        #1: return text
                pg_current_logfile(text): function attributes: cost 1, parallel safe
                    --  current logging collector file location
                    . references
                        language = internal
                    + arguments
                        #1: return text
                        #2: in text
                pg_current_wal_flush_lsn(): function attributes: strict, cost 1, parallel safe
                    --  current wal flush location
                    . references
                        language = internal
                    + arguments
                        #1: return pg_lsn
                pg_current_wal_insert_lsn(): function attributes: strict, cost 1, parallel safe
                    --  current wal insert location
                    . references
                        language = internal
                    + arguments
                        #1: return pg_lsn
                pg_current_wal_lsn(): function attributes: strict, cost 1, parallel safe
                    --  current wal write location
                    . references
                        language = internal
                    + arguments
                        #1: return pg_lsn
                pg_cursor(): function attributes: strict, cost 1, parallel restricted
                    --  get the open cursors for this session
                    . properties
                        returns_set +
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return setof record
                        name: out text
                        statement: out text
                        is_holdable: out boolean
                        is_binary: out boolean
                        is_scrollable: out boolean
                        creation_time: out timestamp with time zone
                pg_database_size(name): function attributes: strict, cost 1, parallel safe
                    --  total disk space usage for the specified database
                    . references
                        language = internal
                    + arguments
                        #1: return bigint
                        #2: in name
                pg_database_size(oid): function attributes: strict, cost 1, parallel safe
                    --  total disk space usage for the specified database
                    . references
                        language = internal
                    + arguments
                        #1: return bigint
                        #2: in oid
                pg_ddl_command_in(cstring): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return pg_ddl_command
                        #2: in cstring
                pg_ddl_command_out(pg_ddl_command): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return cstring
                        #2: in pg_ddl_command
                pg_ddl_command_recv(internal): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return pg_ddl_command
                        #2: in internal
                pg_ddl_command_send(pg_ddl_command): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bytea
                        #2: in pg_ddl_command
                pg_dependencies_in(cstring): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return pg_dependencies
                        #2: in cstring
                pg_dependencies_out(pg_dependencies): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return cstring
                        #2: in pg_dependencies
                pg_dependencies_recv(internal): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return pg_dependencies
                        #2: in internal
                pg_dependencies_send(pg_dependencies): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bytea
                        #2: in pg_dependencies
                pg_describe_object(oid,oid,integer): function attributes: strict, cost 1, parallel safe
                    --  get identification of SQL object
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return text
                        #2: in oid
                        #3: in oid
                        #4: in integer
                pg_drop_replication_slot(name): function attributes: strict, cost 1
                    --  drop a replication slot
                    . references
                        language = internal
                    + arguments
                        #1: return void
                        #2: in name
                pg_encoding_max_length(integer): function attributes: strict, cost 1, parallel safe
                    --  maximum octet length of a character in given encoding
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return integer
                        #2: in integer
                pg_encoding_to_char(integer): function attributes: strict, cost 1, parallel safe
                    --  convert encoding id to encoding name
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return name
                        #2: in integer
                pg_event_trigger_ddl_commands(): function attributes: strict, cost 10, parallel restricted, rows 100
                    --  list DDL actions being executed by the current command
                    . properties
                        returns_set +
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return setof record
                        classid: out oid
                        objid: out oid
                        objsubid: out integer
                        command_tag: out text
                        object_type: out text
                        schema_name: out text
                        object_identity: out text
                        in_extension: out boolean
                        command: out pg_ddl_command
                pg_event_trigger_dropped_objects(): function attributes: strict, cost 10, parallel restricted, rows 100
                    --  list objects dropped by the current command
                    . properties
                        returns_set +
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return setof record
                        classid: out oid
                        objid: out oid
                        objsubid: out integer
                        original: out boolean
                        normal: out boolean
                        is_temporary: out boolean
                        object_type: out text
                        schema_name: out text
                        object_name: out text
                        object_identity: out text
                        address_names: out text[]
                        address_args: out text[]
                pg_event_trigger_table_rewrite_oid(): function attributes: strict, cost 1, parallel restricted
                    --  return Oid of the table getting rewritten
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return oid
                        oid: out oid
                pg_event_trigger_table_rewrite_reason(): function attributes: strict, cost 1, parallel restricted
                    --  return reason code for table getting rewritten
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return integer
                pg_export_snapshot(): function attributes: strict, cost 1
                    --  export a snapshot
                    . references
                        language = internal
                    + arguments
                        #1: return text
                pg_extension_config_dump(regclass,text): function attributes: strict, cost 1
                    --  flag an extension's table contents to be emitted by pg_dump
                    . references
                        language = internal
                    + arguments
                        #1: return void
                        #2: in regclass
                        #3: in text
                pg_extension_update_paths(name): function attributes: strict, cost 10, parallel safe, rows 100
                    --  list an extension's version update paths
                    . properties
                        returns_set +
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return setof record
                        name: in name
                        source: out text
                        target: out text
                        path: out text
                pg_filenode_relation(oid,oid): function attributes: strict, cost 1, parallel safe
                    --  relation OID for filenode and tablespace
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return regclass
                        #2: in oid
                        #3: in oid
                pg_function_is_visible(oid): function attributes: strict, cost 10, parallel safe
                    --  is function visible in search path?
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in oid
                pg_get_constraintdef(oid): function attributes: strict, cost 1, parallel safe
                    --  constraint description
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return text
                        #2: in oid
                pg_get_constraintdef(oid,boolean): function attributes: strict, cost 1, parallel safe
                    --  constraint description with pretty-print option
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return text
                        #2: in oid
                        #3: in boolean
                pg_get_expr(pg_node_tree,oid): function attributes: strict, cost 1, parallel safe
                    --  deparse an encoded expression
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return text
                        #2: in pg_node_tree
                        #3: in oid
                pg_get_expr(pg_node_tree,oid,boolean): function attributes: strict, cost 1, parallel safe
                    --  deparse an encoded expression with pretty-print option
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return text
                        #2: in pg_node_tree
                        #3: in oid
                        #4: in boolean
                pg_get_function_arg_default(oid,integer): function attributes: strict, cost 1, parallel safe
                    --  function argument default
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return text
                        #2: in oid
                        #3: in integer
                pg_get_function_arguments(oid): function attributes: strict, cost 1, parallel safe
                    --  argument list of a function
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return text
                        #2: in oid
                pg_get_function_identity_arguments(oid): function attributes: strict, cost 1, parallel safe
                    --  identity argument list of a function
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return text
                        #2: in oid
                pg_get_function_result(oid): function attributes: strict, cost 1, parallel safe
                    --  result type of a function
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return text
                        #2: in oid
                pg_get_functiondef(oid): function attributes: strict, cost 1, parallel safe
                    --  definition of a function
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return text
                        #2: in oid
                pg_get_indexdef(oid): function attributes: strict, cost 1, parallel safe
                    --  index description
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return text
                        #2: in oid
                pg_get_indexdef(oid,integer,boolean): function attributes: strict, cost 1, parallel safe
                    --  index description (full create statement or single expression) with pretty-print option
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return text
                        #2: in oid
                        #3: in integer
                        #4: in boolean
                pg_get_keywords(): function attributes: strict, cost 10, parallel safe, rows 400
                    --  list of SQL keywords
                    . properties
                        returns_set +
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return setof record
                        word: out text
                        catcode: out "char"
                        catdesc: out text
                pg_get_multixact_members(xid): function attributes: strict, cost 1, parallel safe
                    --  view members of a multixactid
                    . properties
                        returns_set +
                    . references
                        language = internal
                    + arguments
                        #1: return setof record
                        multixid: in xid
                        xid: out xid
                        mode: out text
                pg_get_object_address(text,text[],text[]): function attributes: strict, cost 1, parallel safe
                    --  get OID-based object address from name/args arrays
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return record
                        type: in text
                        object_names: in text[]
                        object_args: in text[]
                        classid: out oid
                        objid: out oid
                        objsubid: out integer
                pg_get_partition_constraintdef(oid): function attributes: strict, cost 1, parallel safe
                    --  partition constraint description
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return text
                        #2: in oid
                pg_get_partkeydef(oid): function attributes: strict, cost 1, parallel safe
                    --  partition key description
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return text
                        #2: in oid
                pg_get_publication_tables(text): function attributes: strict, cost 1, parallel safe
                    --  get OIDs of tables in a publication
                    . properties
                        returns_set +
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return setof oid
                        pubname: in text
                        relid: out oid
                pg_get_replica_identity_index(regclass): function attributes: strict, cost 10, parallel safe
                    --  oid of replica identity index if any
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return regclass
                        #2: in regclass
                pg_get_replication_slots(): function attributes: cost 1, parallel safe, rows 10
                    --  information about replication slots currently in use
                    . properties
                        returns_set +
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return setof record
                        slot_name: out name
                        plugin: out name
                        slot_type: out text
                        datoid: out oid
                        temporary: out boolean
                        active: out boolean
                        active_pid: out integer
                        xmin: out xid
                        catalog_xmin: out xid
                        restart_lsn: out pg_lsn
                        confirmed_flush_lsn: out pg_lsn
                pg_get_ruledef(oid): function attributes: strict, cost 1, parallel safe
                    --  source text of a rule
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return text
                        #2: in oid
                pg_get_ruledef(oid,boolean): function attributes: strict, cost 1, parallel safe
                    --  source text of a rule with pretty-print option
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return text
                        #2: in oid
                        #3: in boolean
                pg_get_serial_sequence(text,text): function attributes: strict, cost 1, parallel safe
                    --  name of sequence for a serial column
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return text
                        #2: in text
                        #3: in text
                pg_get_statisticsobjdef(oid): function attributes: strict, cost 1, parallel safe
                    --  extended statistics object description
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return text
                        #2: in oid
                pg_get_triggerdef(oid): function attributes: strict, cost 1, parallel safe
                    --  trigger description
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return text
                        #2: in oid
                pg_get_triggerdef(oid,boolean): function attributes: strict, cost 1, parallel safe
                    --  trigger description with pretty-print option
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return text
                        #2: in oid
                        #3: in boolean
                pg_get_userbyid(oid): function attributes: strict, cost 1, parallel safe
                    --  role name by OID (with fallback)
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return name
                        #2: in oid
                pg_get_viewdef(oid): function attributes: strict, cost 1, parallel restricted
                    --  select statement of a view
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return text
                        #2: in oid
                pg_get_viewdef(oid,boolean): function attributes: strict, cost 1, parallel restricted
                    --  select statement of a view with pretty-print option
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return text
                        #2: in oid
                        #3: in boolean
                pg_get_viewdef(oid,integer): function attributes: strict, cost 1, parallel restricted
                    --  select statement of a view with pretty-printing and specified line wrapping
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return text
                        #2: in oid
                        #3: in integer
                pg_get_viewdef(text): function attributes: strict, cost 1, parallel restricted
                    --  select statement of a view
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return text
                        #2: in text
                pg_get_viewdef(text,boolean): function attributes: strict, cost 1, parallel restricted
                    --  select statement of a view with pretty-print option
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return text
                        #2: in text
                        #3: in boolean
                pg_has_role(name,name,text): function attributes: strict, cost 1, parallel safe
                    --  user privilege on role by username, role name
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in name
                        #3: in name
                        #4: in text
                pg_has_role(name,oid,text): function attributes: strict, cost 1, parallel safe
                    --  user privilege on role by username, role oid
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in name
                        #3: in oid
                        #4: in text
                pg_has_role(name,text): function attributes: strict, cost 1, parallel safe
                    --  current user privilege on role by role name
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in name
                        #3: in text
                pg_has_role(oid,name,text): function attributes: strict, cost 1, parallel safe
                    --  user privilege on role by user oid, role name
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in oid
                        #3: in name
                        #4: in text
                pg_has_role(oid,oid,text): function attributes: strict, cost 1, parallel safe
                    --  user privilege on role by user oid, role oid
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in oid
                        #3: in oid
                        #4: in text
                pg_has_role(oid,text): function attributes: strict, cost 1, parallel safe
                    --  current user privilege on role by role oid
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in oid
                        #3: in text
                pg_hba_file_rules(): function attributes: strict, cost 1, parallel safe
                    --  show pg_hba.conf rules
                    . properties
                        returns_set +
                    . references
                        language = internal
                    + arguments
                        #1: return setof record
                        line_number: out integer
                        type: out text
                        database: out text[]
                        user_name: out text[]
                        address: out text
                        netmask: out text
                        auth_method: out text
                        options: out text[]
                        error: out text
                pg_identify_object(oid,oid,integer): function attributes: strict, cost 1, parallel safe
                    --  get machine-parseable identification of SQL object
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return record
                        classid: in oid
                        objid: in oid
                        objsubid: in integer
                        type: out text
                        schema: out text
                        name: out text
                        identity: out text
                pg_identify_object_as_address(oid,oid,integer): function attributes: strict, cost 1, parallel safe
                    --  get identification of SQL object for pg_get_object_address()
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return record
                        classid: in oid
                        objid: in oid
                        objsubid: in integer
                        type: out text
                        object_names: out text[]
                        object_args: out text[]
                pg_import_system_collations(regnamespace): function attributes: strict
                    --  import collations from operating system
                    . references
                        language = internal
                    + arguments
                        #1: return integer
                        #2: in regnamespace
                pg_index_column_has_property(regclass,integer,text): function attributes: strict, cost 1, parallel safe
                    --  test property of an index column
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in regclass
                        #3: in integer
                        #4: in text
                pg_index_has_property(regclass,text): function attributes: strict, cost 1, parallel safe
                    --  test property of an index
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in regclass
                        #3: in text
                pg_indexam_has_property(oid,text): function attributes: strict, cost 1, parallel safe
                    --  test property of an index access method
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in oid
                        #3: in text
                pg_indexam_progress_phasename(oid,bigint): function attributes: strict, cost 1, parallel safe
                    --  return name of given index build phase
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return text
                        #2: in oid
                        #3: in bigint
                pg_indexes_size(regclass): function attributes: strict, cost 1, parallel safe
                    --  disk space usage for all indexes attached to the specified table
                    . references
                        language = internal
                    + arguments
                        #1: return bigint
                        #2: in regclass
                pg_is_in_backup(): function attributes: strict, cost 1, parallel safe
                    --  true if server is in online backup
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                pg_is_in_recovery(): function attributes: strict, cost 1, parallel safe
                    --  true if server is in recovery
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                pg_is_other_temp_schema(oid): function attributes: strict, cost 1, parallel safe
                    --  is schema another session's temp schema?
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in oid
                pg_is_wal_replay_paused(): function attributes: strict, cost 1, parallel safe
                    --  true if wal replay is paused
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                pg_isolation_test_session_is_blocked(integer,integer[]): function attributes: strict, cost 1, parallel safe
                    --  isolationtester support function
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in integer
                        #3: in integer[]
                pg_jit_available(): function attributes: strict, cost 1, parallel safe
                    --  Is JIT compilation available in this session?
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                pg_last_committed_xact(): function attributes: strict, cost 1, parallel safe
                    --  get transaction Id and commit timestamp of latest transaction commit
                    . references
                        language = internal
                    + arguments
                        #1: return record
                        xid: out xid
                        timestamp: out timestamp with time zone
                pg_last_wal_receive_lsn(): function attributes: strict, cost 1, parallel safe
                    --  current wal flush location
                    . references
                        language = internal
                    + arguments
                        #1: return pg_lsn
                pg_last_wal_replay_lsn(): function attributes: strict, cost 1, parallel safe
                    --  last wal replay location
                    . references
                        language = internal
                    + arguments
                        #1: return pg_lsn
                pg_last_xact_replay_timestamp(): function attributes: strict, cost 1, parallel safe
                    --  timestamp of last replay xact
                    . references
                        language = internal
                    + arguments
                        #1: return timestamp with time zone
                pg_listening_channels(): function attributes: strict, cost 1, parallel restricted, rows 10
                    --  get the channels that the current backend listens to
                    . properties
                        returns_set +
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return setof text
                pg_lock_status(): function attributes: strict, cost 1, parallel safe
                    --  view system lock information
                    . properties
                        returns_set +
                    . references
                        language = internal
                    + arguments
                        #1: return setof record
                        locktype: out text
                        database: out oid
                        relation: out oid
                        page: out integer
                        tuple: out smallint
                        virtualxid: out text
                        transactionid: out xid
                        classid: out oid
                        objid: out oid
                        objsubid: out smallint
                        virtualtransaction: out text
                        pid: out integer
                        mode: out text
                        granted: out boolean
                        fastpath: out boolean
                pg_logical_emit_message(boolean,text,bytea): function attributes: strict, cost 1
                    --  emit a binary logical decoding message
                    . references
                        language = internal
                    + arguments
                        #1: return pg_lsn
                        #2: in boolean
                        #3: in text
                        #4: in bytea
                pg_logical_emit_message(boolean,text,text): function attributes: strict, cost 1
                    --  emit a textual logical decoding message
                    . references
                        language = internal
                    + arguments
                        #1: return pg_lsn
                        #2: in boolean
                        #3: in text
                        #4: in text
                pg_logical_slot_get_binary_changes(name,pg_lsn,integer,text[]): function attributes: cost 1000
                    --  get binary changes from replication slot
                    . properties
                        returns_set +
                    . references
                        language = internal
                    + arguments
                        #1: return setof record
                        slot_name: in name
                        upto_lsn: in pg_lsn
                        upto_nchanges: in integer
                        options: in text[] default '{}'::text[]
                            . properties
                                variadic +
                        lsn: out pg_lsn
                        xid: out xid
                        data: out bytea
                pg_logical_slot_get_changes(name,pg_lsn,integer,text[]): function attributes: cost 1000
                    --  get changes from replication slot
                    . properties
                        returns_set +
                    . references
                        language = internal
                    + arguments
                        #1: return setof record
                        slot_name: in name
                        upto_lsn: in pg_lsn
                        upto_nchanges: in integer
                        options: in text[] default '{}'::text[]
                            . properties
                                variadic +
                        lsn: out pg_lsn
                        xid: out xid
                        data: out text
                pg_logical_slot_peek_binary_changes(name,pg_lsn,integer,text[]): function attributes: cost 1000
                    --  peek at binary changes from replication slot
                    . properties
                        returns_set +
                    . references
                        language = internal
                    + arguments
                        #1: return setof record
                        slot_name: in name
                        upto_lsn: in pg_lsn
                        upto_nchanges: in integer
                        options: in text[] default '{}'::text[]
                            . properties
                                variadic +
                        lsn: out pg_lsn
                        xid: out xid
                        data: out bytea
                pg_logical_slot_peek_changes(name,pg_lsn,integer,text[]): function attributes: cost 1000
                    --  peek at changes from replication slot
                    . properties
                        returns_set +
                    . references
                        language = internal
                    + arguments
                        #1: return setof record
                        slot_name: in name
                        upto_lsn: in pg_lsn
                        upto_nchanges: in integer
                        options: in text[] default '{}'::text[]
                            . properties
                                variadic +
                        lsn: out pg_lsn
                        xid: out xid
                        data: out text
                pg_ls_archive_statusdir(): function attributes: strict, cost 10, parallel safe, rows 20
                    --  list of files in the archive_status directory
                    . properties
                        returns_set +
                    . references
                        language = internal
                    + arguments
                        #1: return setof record
                        name: out text
                        size: out bigint
                        modification: out timestamp with time zone
                pg_ls_dir(text): function attributes: strict, cost 1, parallel safe
                    --  list all files in a directory
                    . properties
                        returns_set +
                    . references
                        language = internal
                    + arguments
                        #1: return setof text
                        #2: in text
                pg_ls_dir(text,boolean,boolean): function attributes: strict, cost 1, parallel safe
                    --  list all files in a directory
                    . properties
                        returns_set +
                    . references
                        language = internal
                    + arguments
                        #1: return setof text
                        #2: in text
                        #3: in boolean
                        #4: in boolean
                pg_ls_logdir(): function attributes: strict, cost 10, parallel safe, rows 20
                    --  list files in the log directory
                    . properties
                        returns_set +
                    . references
                        language = internal
                    + arguments
                        #1: return setof record
                        name: out text
                        size: out bigint
                        modification: out timestamp with time zone
                pg_ls_tmpdir(): function attributes: strict, cost 10, parallel safe, rows 20
                    --  list files in the pgsql_tmp directory
                    . properties
                        returns_set +
                    . references
                        language = internal
                    + arguments
                        #1: return setof record
                        name: out text
                        size: out bigint
                        modification: out timestamp with time zone
                pg_ls_tmpdir(oid): function attributes: strict, cost 10, parallel safe, rows 20
                    --  list files in the pgsql_tmp directory
                    . properties
                        returns_set +
                    . references
                        language = internal
                    + arguments
                        #1: return setof record
                        tablespace: in oid
                        name: out text
                        size: out bigint
                        modification: out timestamp with time zone
                pg_ls_waldir(): function attributes: strict, cost 10, parallel safe, rows 20
                    --  list of files in the WAL directory
                    . properties
                        returns_set +
                    . references
                        language = internal
                    + arguments
                        #1: return setof record
                        name: out text
                        size: out bigint
                        modification: out timestamp with time zone
                pg_lsn_cmp(pg_lsn,pg_lsn): function attributes: leakproof, strict, cost 1, parallel safe
                    --  less-equal-greater
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return integer
                        #2: in pg_lsn
                        #3: in pg_lsn
                pg_lsn_eq(pg_lsn,pg_lsn): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of = operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in pg_lsn
                        #3: in pg_lsn
                pg_lsn_ge(pg_lsn,pg_lsn): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of >= operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in pg_lsn
                        #3: in pg_lsn
                pg_lsn_gt(pg_lsn,pg_lsn): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of > operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in pg_lsn
                        #3: in pg_lsn
                pg_lsn_hash(pg_lsn): function attributes: strict, cost 1, parallel safe
                    --  hash
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return integer
                        #2: in pg_lsn
                pg_lsn_hash_extended(pg_lsn,bigint): function attributes: strict, cost 1, parallel safe
                    --  hash
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bigint
                        #2: in pg_lsn
                        #3: in bigint
                pg_lsn_in(cstring): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return pg_lsn
                        #2: in cstring
                pg_lsn_le(pg_lsn,pg_lsn): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of <= operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in pg_lsn
                        #3: in pg_lsn
                pg_lsn_lt(pg_lsn,pg_lsn): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of < operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in pg_lsn
                        #3: in pg_lsn
                pg_lsn_mi(pg_lsn,pg_lsn): function attributes: strict, cost 1, parallel safe
                    --  implementation of - operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return numeric
                        #2: in pg_lsn
                        #3: in pg_lsn
                pg_lsn_ne(pg_lsn,pg_lsn): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of <> operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in pg_lsn
                        #3: in pg_lsn
                pg_lsn_out(pg_lsn): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return cstring
                        #2: in pg_lsn
                pg_lsn_recv(internal): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return pg_lsn
                        #2: in internal
                pg_lsn_send(pg_lsn): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bytea
                        #2: in pg_lsn
                pg_mcv_list_in(cstring): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return pg_mcv_list
                        #2: in cstring
                pg_mcv_list_items(pg_mcv_list): function attributes: strict, cost 1, parallel safe
                    --  details about MCV list items
                    . properties
                        returns_set +
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return setof record
                        mcv_list: in pg_mcv_list
                        index: out integer
                        values: out text[]
                        nulls: out boolean[]
                        frequency: out double precision
                        base_frequency: out double precision
                pg_mcv_list_out(pg_mcv_list): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return cstring
                        #2: in pg_mcv_list
                pg_mcv_list_recv(internal): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return pg_mcv_list
                        #2: in internal
                pg_mcv_list_send(pg_mcv_list): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bytea
                        #2: in pg_mcv_list
                pg_my_temp_schema(): function attributes: strict, cost 1, parallel restricted
                    --  get OID of current session's temp schema, if any
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return oid
                pg_ndistinct_in(cstring): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return pg_ndistinct
                        #2: in cstring
                pg_ndistinct_out(pg_ndistinct): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return cstring
                        #2: in pg_ndistinct
                pg_ndistinct_recv(internal): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return pg_ndistinct
                        #2: in internal
                pg_ndistinct_send(pg_ndistinct): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bytea
                        #2: in pg_ndistinct
                pg_nextoid(regclass,name,regclass): function attributes: strict, cost 1
                    --  return the next oid for a system table
                    . references
                        language = internal
                    + arguments
                        #1: return oid
                        #2: in regclass
                        #3: in name
                        #4: in regclass
                pg_node_tree_in(cstring): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return pg_node_tree
                        #2: in cstring
                pg_node_tree_out(pg_node_tree): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return cstring
                        #2: in pg_node_tree
                pg_node_tree_recv(internal): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return pg_node_tree
                        #2: in internal
                pg_node_tree_send(pg_node_tree): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bytea
                        #2: in pg_node_tree
                pg_notification_queue_usage(): function attributes: strict, cost 1, parallel safe
                    --  get the fraction of the asynchronous notification queue currently in use
                    . references
                        language = internal
                    + arguments
                        #1: return double precision
                pg_notify(text,text): function attributes: cost 1, parallel restricted
                    --  send a notification event
                    . references
                        language = internal
                    + arguments
                        #1: return void
                        #2: in text
                        #3: in text
                pg_opclass_is_visible(oid): function attributes: strict, cost 10, parallel safe
                    --  is opclass visible in search path?
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in oid
                pg_operator_is_visible(oid): function attributes: strict, cost 10, parallel safe
                    --  is operator visible in search path?
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in oid
                pg_opfamily_is_visible(oid): function attributes: strict, cost 10, parallel safe
                    --  is opfamily visible in search path?
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in oid
                pg_options_to_table(text[]): function attributes: strict, cost 1, parallel safe, rows 3
                    --  convert generic options array to name/value table
                    . properties
                        returns_set +
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return setof record
                        options_array: in text[]
                        option_name: out text
                        option_value: out text
                pg_partition_ancestors(regclass): function attributes: strict, cost 1, parallel safe, rows 10
                    --  view ancestors of the partition
                    . properties
                        returns_set +
                    . references
                        language = internal
                    + arguments
                        #1: return setof regclass
                        partitionid: in regclass
                        relid: out regclass
                pg_partition_root(regclass): function attributes: strict, cost 1, parallel safe
                    --  get top-most partition root parent
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return regclass
                        #2: in regclass
                pg_partition_tree(regclass): function attributes: strict, cost 1, parallel safe
                    --  view partition tree tables
                    . properties
                        returns_set +
                    . references
                        language = internal
                    + arguments
                        #1: return setof record
                        rootrelid: in regclass
                        relid: out regclass
                        parentrelid: out regclass
                        isleaf: out boolean
                        level: out integer
                pg_postmaster_start_time(): function attributes: strict, cost 1, parallel safe
                    --  postmaster start time
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return timestamp with time zone
                pg_prepared_statement(): function attributes: strict, cost 1, parallel restricted
                    --  get the prepared statements for this session
                    . properties
                        returns_set +
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return setof record
                        name: out text
                        statement: out text
                        prepare_time: out timestamp with time zone
                        parameter_types: out regtype[]
                        from_sql: out boolean
                pg_prepared_xact(): function attributes: strict, cost 1, parallel safe
                    --  view two-phase transactions
                    . properties
                        returns_set +
                    . references
                        language = internal
                    + arguments
                        #1: return setof record
                        transaction: out xid
                        gid: out text
                        prepared: out timestamp with time zone
                        ownerid: out oid
                        dbid: out oid
                pg_promote(boolean,integer): function attributes: strict, cost 1, parallel safe
                    --  promote standby server
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        wait: in boolean default true
                        wait_seconds: in integer default 60
                pg_read_binary_file(text): function attributes: strict, cost 1, parallel safe
                    --  read bytea from a file
                    . references
                        language = internal
                    + arguments
                        #1: return bytea
                        #2: in text
                pg_read_binary_file(text,bigint,bigint): function attributes: strict, cost 1, parallel safe
                    --  read bytea from a file
                    . references
                        language = internal
                    + arguments
                        #1: return bytea
                        #2: in text
                        #3: in bigint
                        #4: in bigint
                pg_read_binary_file(text,bigint,bigint,boolean): function attributes: strict, cost 1, parallel safe
                    --  read bytea from a file
                    . references
                        language = internal
                    + arguments
                        #1: return bytea
                        #2: in text
                        #3: in bigint
                        #4: in bigint
                        #5: in boolean
                pg_read_file(text): function attributes: strict, cost 1, parallel safe
                    --  read text from a file
                    . references
                        language = internal
                    + arguments
                        #1: return text
                        #2: in text
                pg_read_file(text,bigint,bigint): function attributes: strict, cost 1, parallel safe
                    --  read text from a file
                    . references
                        language = internal
                    + arguments
                        #1: return text
                        #2: in text
                        #3: in bigint
                        #4: in bigint
                pg_read_file(text,bigint,bigint,boolean): function attributes: strict, cost 1, parallel safe
                    --  read text from a file
                    . references
                        language = internal
                    + arguments
                        #1: return text
                        #2: in text
                        #3: in bigint
                        #4: in bigint
                        #5: in boolean
                pg_read_file_old(text,bigint,bigint): function attributes: strict, cost 1, parallel safe
                    --  read text from a file - old version for adminpack 1.0
                    . references
                        language = internal
                    + arguments
                        #1: return text
                        #2: in text
                        #3: in bigint
                        #4: in bigint
                pg_relation_filenode(regclass): function attributes: strict, cost 1, parallel safe
                    --  filenode identifier of relation
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return oid
                        #2: in regclass
                pg_relation_filepath(regclass): function attributes: strict, cost 1, parallel safe
                    --  file path of relation
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return text
                        #2: in regclass
                pg_relation_is_publishable(regclass): function attributes: strict, cost 1, parallel safe
                    --  returns whether a relation can be part of a publication
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in regclass
                pg_relation_is_updatable(regclass,boolean): function attributes: strict, cost 10, parallel safe
                    --  is a relation insertable/updatable/deletable
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return integer
                        #2: in regclass
                        #3: in boolean
                pg_relation_size(regclass): function attributes: strict, cost 1, parallel safe
                    --  disk space usage for the main fork of the specified table or index
                    . references
                        language = sql
                    + arguments
                        #1: return bigint
                        #2: in regclass
                pg_relation_size(regclass,text): function attributes: strict, cost 1, parallel safe
                    --  disk space usage for the specified fork of a table or index
                    . references
                        language = internal
                    + arguments
                        #1: return bigint
                        #2: in regclass
                        #3: in text
                pg_reload_conf(): function attributes: strict, cost 1, parallel safe
                    --  reload configuration files
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                pg_replication_origin_advance(text,pg_lsn): function attributes: strict, cost 1
                    --  advance replication origin to specific location
                    . references
                        language = internal
                    + arguments
                        #1: return void
                        #2: in text
                        #3: in pg_lsn
                pg_replication_origin_create(text): function attributes: strict, cost 1
                    --  create a replication origin
                    . references
                        language = internal
                    + arguments
                        #1: return oid
                        #2: in text
                pg_replication_origin_drop(text): function attributes: strict, cost 1
                    --  drop replication origin identified by its name
                    . references
                        language = internal
                    + arguments
                        #1: return void
                        #2: in text
                pg_replication_origin_oid(text): function attributes: strict, cost 1, parallel safe
                    --  translate the replication origin's name to its id
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return oid
                        #2: in text
                pg_replication_origin_progress(text,boolean): function attributes: strict, cost 1
                    --  get an individual replication origin's replication progress
                    . references
                        language = internal
                    + arguments
                        #1: return pg_lsn
                        #2: in text
                        #3: in boolean
                pg_replication_origin_session_is_setup(): function attributes: strict, cost 1, parallel restricted
                    --  is a replication origin configured in this session
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                pg_replication_origin_session_progress(boolean): function attributes: strict, cost 1
                    --  get the replication progress of the current session
                    . references
                        language = internal
                    + arguments
                        #1: return pg_lsn
                        #2: in boolean
                pg_replication_origin_session_reset(): function attributes: strict, cost 1
                    --  teardown configured replication progress tracking
                    . references
                        language = internal
                    + arguments
                        #1: return void
                pg_replication_origin_session_setup(text): function attributes: strict, cost 1
                    --  configure session to maintain replication progress tracking for the passed in origin
                    . references
                        language = internal
                    + arguments
                        #1: return void
                        #2: in text
                pg_replication_origin_xact_reset(): function attributes: strict, cost 1, parallel restricted
                    --  reset the transaction's origin lsn and timestamp
                    . references
                        language = internal
                    + arguments
                        #1: return void
                pg_replication_origin_xact_setup(pg_lsn,timestamp with time zone): function attributes: strict, cost 1, parallel restricted
                    --  setup the transaction's origin lsn and timestamp
                    . references
                        language = internal
                    + arguments
                        #1: return void
                        #2: in pg_lsn
                        #3: in timestamp with time zone
                pg_replication_slot_advance(name,pg_lsn): function attributes: strict, cost 1
                    --  advance logical replication slot
                    . references
                        language = internal
                    + arguments
                        #1: return record
                        slot_name: in name
                        upto_lsn: in pg_lsn
                        slot_name: out name
                        end_lsn: out pg_lsn
                pg_rotate_logfile(): function attributes: strict, cost 1, parallel safe
                    --  rotate log file
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                pg_rotate_logfile_old(): function attributes: strict, cost 1, parallel safe
                    --  rotate log file - old version for adminpack 1.0
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                pg_safe_snapshot_blocking_pids(integer): function attributes: strict, cost 1, parallel safe
                    --  get array of PIDs of sessions blocking specified backend PID from acquiring a safe snapshot
                    . references
                        language = internal
                    + arguments
                        #1: return integer[]
                        #2: in integer
                pg_sequence_last_value(regclass): function attributes: strict, cost 1
                    --  sequence last value
                    . references
                        language = internal
                    + arguments
                        #1: return bigint
                        #2: in regclass
                pg_sequence_parameters(oid): function attributes: strict, cost 1, parallel safe
                    --  sequence parameters, for use by information schema
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return record
                        sequence_oid: in oid
                        start_value: out bigint
                        minimum_value: out bigint
                        maximum_value: out bigint
                        increment: out bigint
                        cycle_option: out boolean
                        cache_size: out bigint
                        data_type: out oid
                pg_show_all_file_settings(): function attributes: strict, cost 1, parallel safe
                    --  show config file settings
                    . properties
                        returns_set +
                    . references
                        language = internal
                    + arguments
                        #1: return setof record
                        sourcefile: out text
                        sourceline: out integer
                        seqno: out integer
                        name: out text
                        setting: out text
                        applied: out boolean
                        error: out text
                pg_show_all_settings(): function attributes: strict, cost 1, parallel safe
                    --  SHOW ALL as a function
                    . properties
                        returns_set +
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return setof record
                        name: out text
                        setting: out text
                        unit: out text
                        category: out text
                        short_desc: out text
                        extra_desc: out text
                        context: out text
                        vartype: out text
                        source: out text
                        min_val: out text
                        max_val: out text
                        enumvals: out text[]
                        boot_val: out text
                        reset_val: out text
                        sourcefile: out text
                        sourceline: out integer
                        pending_restart: out boolean
                pg_show_replication_origin_status(): function attributes: cost 1, parallel restricted, rows 100
                    --  get progress for all replication origins
                    . properties
                        returns_set +
                    . references
                        language = internal
                    + arguments
                        #1: return setof record
                        local_id: out oid
                        external_id: out text
                        remote_lsn: out pg_lsn
                        local_lsn: out pg_lsn
                pg_size_bytes(text): function attributes: strict, cost 1, parallel safe
                    --  convert a size in human-readable format with size units into bytes
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bigint
                        #2: in text
                pg_size_pretty(bigint): function attributes: strict, cost 1, parallel safe
                    --  convert a long int to a human readable text using size units
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return text
                        #2: in bigint
                pg_size_pretty(numeric): function attributes: strict, cost 1, parallel safe
                    --  convert a numeric to a human readable text using size units
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return text
                        #2: in numeric
                pg_sleep(double precision): function attributes: strict, cost 1, parallel safe
                    --  sleep for the specified time in seconds
                    . references
                        language = internal
                    + arguments
                        #1: return void
                        #2: in double precision
                pg_sleep_for(interval): function attributes: strict, cost 1, parallel safe
                    --  sleep for the specified interval
                    . references
                        language = sql
                    + arguments
                        #1: return void
                        #2: in interval
                pg_sleep_until(timestamp with time zone): function attributes: strict, cost 1, parallel safe
                    --  sleep until the specified time
                    . references
                        language = sql
                    + arguments
                        #1: return void
                        #2: in timestamp with time zone
                pg_start_backup(text,boolean,boolean): function attributes: strict, cost 1, parallel restricted
                    --  prepare for taking an online backup
                    . references
                        language = internal
                    + arguments
                        #1: return pg_lsn
                        label: in text
                        fast: in boolean default false
                        exclusive: in boolean default true
                pg_stat_clear_snapshot(): function attributes: cost 1, parallel restricted
                    --  statistics: discard current transaction's statistics snapshot
                    . references
                        language = internal
                    + arguments
                        #1: return void
                pg_stat_file(text): function attributes: strict, cost 1, parallel safe
                    --  get information about file
                    . references
                        language = internal
                    + arguments
                        #1: return record
                        filename: in text
                        size: out bigint
                        access: out timestamp with time zone
                        modification: out timestamp with time zone
                        change: out timestamp with time zone
                        creation: out timestamp with time zone
                        isdir: out boolean
                pg_stat_file(text,boolean): function attributes: strict, cost 1, parallel safe
                    --  get information about file
                    . references
                        language = internal
                    + arguments
                        #1: return record
                        filename: in text
                        missing_ok: in boolean
                        size: out bigint
                        access: out timestamp with time zone
                        modification: out timestamp with time zone
                        change: out timestamp with time zone
                        creation: out timestamp with time zone
                        isdir: out boolean
                pg_stat_get_activity(integer): function attributes: cost 1, parallel restricted, rows 100
                    --  statistics: information about currently active backends
                    . properties
                        returns_set +
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return setof record
                        pid: in integer
                        datid: out oid
                        pid: out integer
                        usesysid: out oid
                        application_name: out text
                        state: out text
                        query: out text
                        wait_event_type: out text
                        wait_event: out text
                        xact_start: out timestamp with time zone
                        query_start: out timestamp with time zone
                        backend_start: out timestamp with time zone
                        state_change: out timestamp with time zone
                        client_addr: out inet
                        client_hostname: out text
                        client_port: out integer
                        backend_xid: out xid
                        backend_xmin: out xid
                        backend_type: out text
                        ssl: out boolean
                        sslversion: out text
                        sslcipher: out text
                        sslbits: out integer
                        sslcompression: out boolean
                        ssl_client_dn: out text
                        ssl_client_serial: out numeric
                        ssl_issuer_dn: out text
                        gss_auth: out boolean
                        gss_princ: out text
                        gss_enc: out boolean
                pg_stat_get_analyze_count(oid): function attributes: strict, cost 1, parallel restricted
                    --  statistics: number of manual analyzes for a table
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bigint
                        #2: in oid
                pg_stat_get_archiver(): function attributes: cost 1, parallel restricted
                    --  statistics: information about WAL archiver
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return record
                        archived_count: out bigint
                        last_archived_wal: out text
                        last_archived_time: out timestamp with time zone
                        failed_count: out bigint
                        last_failed_wal: out text
                        last_failed_time: out timestamp with time zone
                        stats_reset: out timestamp with time zone
                pg_stat_get_autoanalyze_count(oid): function attributes: strict, cost 1, parallel restricted
                    --  statistics: number of auto analyzes for a table
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bigint
                        #2: in oid
                pg_stat_get_autovacuum_count(oid): function attributes: strict, cost 1, parallel restricted
                    --  statistics: number of auto vacuums for a table
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bigint
                        #2: in oid
                pg_stat_get_backend_activity(integer): function attributes: strict, cost 1, parallel restricted
                    --  statistics: current query of backend
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return text
                        #2: in integer
                pg_stat_get_backend_activity_start(integer): function attributes: strict, cost 1, parallel restricted
                    --  statistics: start time for current query of backend
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return timestamp with time zone
                        #2: in integer
                pg_stat_get_backend_client_addr(integer): function attributes: strict, cost 1, parallel restricted
                    --  statistics: address of client connected to backend
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return inet
                        #2: in integer
                pg_stat_get_backend_client_port(integer): function attributes: strict, cost 1, parallel restricted
                    --  statistics: port number of client connected to backend
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return integer
                        #2: in integer
                pg_stat_get_backend_dbid(integer): function attributes: strict, cost 1, parallel restricted
                    --  statistics: database ID of backend
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return oid
                        #2: in integer
                pg_stat_get_backend_idset(): function attributes: strict, cost 1, parallel restricted, rows 100
                    --  statistics: currently active backend IDs
                    . properties
                        returns_set +
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return setof integer
                pg_stat_get_backend_pid(integer): function attributes: strict, cost 1, parallel restricted
                    --  statistics: PID of backend
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return integer
                        #2: in integer
                pg_stat_get_backend_start(integer): function attributes: strict, cost 1, parallel restricted
                    --  statistics: start time for current backend session
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return timestamp with time zone
                        #2: in integer
                pg_stat_get_backend_userid(integer): function attributes: strict, cost 1, parallel restricted
                    --  statistics: user ID of backend
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return oid
                        #2: in integer
                pg_stat_get_backend_wait_event(integer): function attributes: strict, cost 1, parallel restricted
                    --  statistics: wait event on which backend is currently waiting
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return text
                        #2: in integer
                pg_stat_get_backend_wait_event_type(integer): function attributes: strict, cost 1, parallel restricted
                    --  statistics: wait event type on which backend is currently waiting
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return text
                        #2: in integer
                pg_stat_get_backend_xact_start(integer): function attributes: strict, cost 1, parallel restricted
                    --  statistics: start time for backend's current transaction
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return timestamp with time zone
                        #2: in integer
                pg_stat_get_bgwriter_buf_written_checkpoints(): function attributes: strict, cost 1, parallel restricted
                    --  statistics: number of buffers written by the bgwriter during checkpoints
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bigint
                pg_stat_get_bgwriter_buf_written_clean(): function attributes: strict, cost 1, parallel restricted
                    --  statistics: number of buffers written by the bgwriter for cleaning dirty buffers
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bigint
                pg_stat_get_bgwriter_maxwritten_clean(): function attributes: strict, cost 1, parallel restricted
                    --  statistics: number of times the bgwriter stopped processing when it had written too many buffers while cleaning
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bigint
                pg_stat_get_bgwriter_requested_checkpoints(): function attributes: strict, cost 1, parallel restricted
                    --  statistics: number of backend requested checkpoints started by the bgwriter
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bigint
                pg_stat_get_bgwriter_stat_reset_time(): function attributes: strict, cost 1, parallel restricted
                    --  statistics: last reset for the bgwriter
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return timestamp with time zone
                pg_stat_get_bgwriter_timed_checkpoints(): function attributes: strict, cost 1, parallel restricted
                    --  statistics: number of timed checkpoints started by the bgwriter
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bigint
                pg_stat_get_blocks_fetched(oid): function attributes: strict, cost 1, parallel restricted
                    --  statistics: number of blocks fetched
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bigint
                        #2: in oid
                pg_stat_get_blocks_hit(oid): function attributes: strict, cost 1, parallel restricted
                    --  statistics: number of blocks found in cache
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bigint
                        #2: in oid
                pg_stat_get_buf_alloc(): function attributes: strict, cost 1, parallel restricted
                    --  statistics: number of buffer allocations
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bigint
                pg_stat_get_buf_fsync_backend(): function attributes: strict, cost 1, parallel restricted
                    --  statistics: number of backend buffer writes that did their own fsync
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bigint
                pg_stat_get_buf_written_backend(): function attributes: strict, cost 1, parallel restricted
                    --  statistics: number of buffers written by backends
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bigint
                pg_stat_get_checkpoint_sync_time(): function attributes: strict, cost 1, parallel restricted
                    --  statistics: checkpoint time spent synchronizing buffers to disk, in milliseconds
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return double precision
                pg_stat_get_checkpoint_write_time(): function attributes: strict, cost 1, parallel restricted
                    --  statistics: checkpoint time spent writing buffers to disk, in milliseconds
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return double precision
                pg_stat_get_db_blk_read_time(oid): function attributes: strict, cost 1, parallel restricted
                    --  statistics: block read time, in milliseconds
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return double precision
                        #2: in oid
                pg_stat_get_db_blk_write_time(oid): function attributes: strict, cost 1, parallel restricted
                    --  statistics: block write time, in milliseconds
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return double precision
                        #2: in oid
                pg_stat_get_db_blocks_fetched(oid): function attributes: strict, cost 1, parallel restricted
                    --  statistics: blocks fetched for database
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bigint
                        #2: in oid
                pg_stat_get_db_blocks_hit(oid): function attributes: strict, cost 1, parallel restricted
                    --  statistics: blocks found in cache for database
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bigint
                        #2: in oid
                pg_stat_get_db_checksum_failures(oid): function attributes: strict, cost 1, parallel restricted
                    --  statistics: checksum failures detected in database
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bigint
                        #2: in oid
                pg_stat_get_db_checksum_last_failure(oid): function attributes: strict, cost 1, parallel restricted
                    --  statistics: when last checksum failure was detected in database
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return timestamp with time zone
                        #2: in oid
                pg_stat_get_db_conflict_all(oid): function attributes: strict, cost 1, parallel restricted
                    --  statistics: recovery conflicts in database
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bigint
                        #2: in oid
                pg_stat_get_db_conflict_bufferpin(oid): function attributes: strict, cost 1, parallel restricted
                    --  statistics: recovery conflicts in database caused by shared buffer pin
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bigint
                        #2: in oid
                pg_stat_get_db_conflict_lock(oid): function attributes: strict, cost 1, parallel restricted
                    --  statistics: recovery conflicts in database caused by relation lock
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bigint
                        #2: in oid
                pg_stat_get_db_conflict_snapshot(oid): function attributes: strict, cost 1, parallel restricted
                    --  statistics: recovery conflicts in database caused by snapshot expiry
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bigint
                        #2: in oid
                pg_stat_get_db_conflict_startup_deadlock(oid): function attributes: strict, cost 1, parallel restricted
                    --  statistics: recovery conflicts in database caused by buffer deadlock
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bigint
                        #2: in oid
                pg_stat_get_db_conflict_tablespace(oid): function attributes: strict, cost 1, parallel restricted
                    --  statistics: recovery conflicts in database caused by drop tablespace
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bigint
                        #2: in oid
                pg_stat_get_db_deadlocks(oid): function attributes: strict, cost 1, parallel restricted
                    --  statistics: deadlocks detected in database
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bigint
                        #2: in oid
                pg_stat_get_db_numbackends(oid): function attributes: strict, cost 1, parallel restricted
                    --  statistics: number of backends in database
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return integer
                        #2: in oid
                pg_stat_get_db_stat_reset_time(oid): function attributes: strict, cost 1, parallel restricted
                    --  statistics: last reset for a database
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return timestamp with time zone
                        #2: in oid
                pg_stat_get_db_temp_bytes(oid): function attributes: strict, cost 1, parallel restricted
                    --  statistics: number of bytes in temporary files written
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bigint
                        #2: in oid
                pg_stat_get_db_temp_files(oid): function attributes: strict, cost 1, parallel restricted
                    --  statistics: number of temporary files written
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bigint
                        #2: in oid
                pg_stat_get_db_tuples_deleted(oid): function attributes: strict, cost 1, parallel restricted
                    --  statistics: tuples deleted in database
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bigint
                        #2: in oid
                pg_stat_get_db_tuples_fetched(oid): function attributes: strict, cost 1, parallel restricted
                    --  statistics: tuples fetched for database
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bigint
                        #2: in oid
                pg_stat_get_db_tuples_inserted(oid): function attributes: strict, cost 1, parallel restricted
                    --  statistics: tuples inserted in database
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bigint
                        #2: in oid
                pg_stat_get_db_tuples_returned(oid): function attributes: strict, cost 1, parallel restricted
                    --  statistics: tuples returned for database
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bigint
                        #2: in oid
                pg_stat_get_db_tuples_updated(oid): function attributes: strict, cost 1, parallel restricted
                    --  statistics: tuples updated in database
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bigint
                        #2: in oid
                pg_stat_get_db_xact_commit(oid): function attributes: strict, cost 1, parallel restricted
                    --  statistics: transactions committed
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bigint
                        #2: in oid
                pg_stat_get_db_xact_rollback(oid): function attributes: strict, cost 1, parallel restricted
                    --  statistics: transactions rolled back
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bigint
                        #2: in oid
                pg_stat_get_dead_tuples(oid): function attributes: strict, cost 1, parallel restricted
                    --  statistics: number of dead tuples
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bigint
                        #2: in oid
                pg_stat_get_function_calls(oid): function attributes: strict, cost 1, parallel restricted
                    --  statistics: number of function calls
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bigint
                        #2: in oid
                pg_stat_get_function_self_time(oid): function attributes: strict, cost 1, parallel restricted
                    --  statistics: self execution time of function, in milliseconds
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return double precision
                        #2: in oid
                pg_stat_get_function_total_time(oid): function attributes: strict, cost 1, parallel restricted
                    --  statistics: total execution time of function, in milliseconds
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return double precision
                        #2: in oid
                pg_stat_get_last_analyze_time(oid): function attributes: strict, cost 1, parallel restricted
                    --  statistics: last manual analyze time for a table
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return timestamp with time zone
                        #2: in oid
                pg_stat_get_last_autoanalyze_time(oid): function attributes: strict, cost 1, parallel restricted
                    --  statistics: last auto analyze time for a table
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return timestamp with time zone
                        #2: in oid
                pg_stat_get_last_autovacuum_time(oid): function attributes: strict, cost 1, parallel restricted
                    --  statistics: last auto vacuum time for a table
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return timestamp with time zone
                        #2: in oid
                pg_stat_get_last_vacuum_time(oid): function attributes: strict, cost 1, parallel restricted
                    --  statistics: last manual vacuum time for a table
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return timestamp with time zone
                        #2: in oid
                pg_stat_get_live_tuples(oid): function attributes: strict, cost 1, parallel restricted
                    --  statistics: number of live tuples
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bigint
                        #2: in oid
                pg_stat_get_mod_since_analyze(oid): function attributes: strict, cost 1, parallel restricted
                    --  statistics: number of tuples changed since last analyze
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bigint
                        #2: in oid
                pg_stat_get_numscans(oid): function attributes: strict, cost 1, parallel restricted
                    --  statistics: number of scans done for table/index
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bigint
                        #2: in oid
                pg_stat_get_progress_info(text): function attributes: strict, cost 1, parallel restricted, rows 100
                    --  statistics: information about progress of backends running maintenance command
                    . properties
                        returns_set +
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return setof record
                        cmdtype: in text
                        pid: out integer
                        datid: out oid
                        relid: out oid
                        param1: out bigint
                        param2: out bigint
                        param3: out bigint
                        param4: out bigint
                        param5: out bigint
                        param6: out bigint
                        param7: out bigint
                        param8: out bigint
                        param9: out bigint
                        param10: out bigint
                        param11: out bigint
                        param12: out bigint
                        param13: out bigint
                        param14: out bigint
                        param15: out bigint
                        param16: out bigint
                        param17: out bigint
                        param18: out bigint
                        param19: out bigint
                        param20: out bigint
                pg_stat_get_snapshot_timestamp(): function attributes: strict, cost 1, parallel restricted
                    --  statistics: timestamp of the current statistics snapshot
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return timestamp with time zone
                pg_stat_get_subscription(oid): function attributes: cost 1, parallel restricted
                    --  statistics: information about subscription
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return record
                        subid: in oid
                        subid: out oid
                        relid: out oid
                        pid: out integer
                        received_lsn: out pg_lsn
                        last_msg_send_time: out timestamp with time zone
                        last_msg_receipt_time: out timestamp with time zone
                        latest_end_lsn: out pg_lsn
                        latest_end_time: out timestamp with time zone
                pg_stat_get_tuples_deleted(oid): function attributes: strict, cost 1, parallel restricted
                    --  statistics: number of tuples deleted
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bigint
                        #2: in oid
                pg_stat_get_tuples_fetched(oid): function attributes: strict, cost 1, parallel restricted
                    --  statistics: number of tuples fetched by idxscan
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bigint
                        #2: in oid
                pg_stat_get_tuples_hot_updated(oid): function attributes: strict, cost 1, parallel restricted
                    --  statistics: number of tuples hot updated
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bigint
                        #2: in oid
                pg_stat_get_tuples_inserted(oid): function attributes: strict, cost 1, parallel restricted
                    --  statistics: number of tuples inserted
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bigint
                        #2: in oid
                pg_stat_get_tuples_returned(oid): function attributes: strict, cost 1, parallel restricted
                    --  statistics: number of tuples read by seqscan
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bigint
                        #2: in oid
                pg_stat_get_tuples_updated(oid): function attributes: strict, cost 1, parallel restricted
                    --  statistics: number of tuples updated
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bigint
                        #2: in oid
                pg_stat_get_vacuum_count(oid): function attributes: strict, cost 1, parallel restricted
                    --  statistics: number of manual vacuums for a table
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bigint
                        #2: in oid
                pg_stat_get_wal_receiver(): function attributes: cost 1, parallel restricted
                    --  statistics: information about WAL receiver
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return record
                        pid: out integer
                        status: out text
                        receive_start_lsn: out pg_lsn
                        receive_start_tli: out integer
                        received_lsn: out pg_lsn
                        received_tli: out integer
                        last_msg_send_time: out timestamp with time zone
                        last_msg_receipt_time: out timestamp with time zone
                        latest_end_lsn: out pg_lsn
                        latest_end_time: out timestamp with time zone
                        slot_name: out text
                        sender_host: out text
                        sender_port: out integer
                        conninfo: out text
                pg_stat_get_wal_senders(): function attributes: cost 1, parallel restricted, rows 10
                    --  statistics: information about currently active replication
                    . properties
                        returns_set +
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return setof record
                        pid: out integer
                        state: out text
                        sent_lsn: out pg_lsn
                        write_lsn: out pg_lsn
                        flush_lsn: out pg_lsn
                        replay_lsn: out pg_lsn
                        write_lag: out interval
                        flush_lag: out interval
                        replay_lag: out interval
                        sync_priority: out integer
                        sync_state: out text
                        reply_time: out timestamp with time zone
                pg_stat_get_xact_blocks_fetched(oid): function attributes: strict, cost 1, parallel restricted
                    --  statistics: number of blocks fetched in current transaction
                    . references
                        language = internal
                    + arguments
                        #1: return bigint
                        #2: in oid
                pg_stat_get_xact_blocks_hit(oid): function attributes: strict, cost 1, parallel restricted
                    --  statistics: number of blocks found in cache in current transaction
                    . references
                        language = internal
                    + arguments
                        #1: return bigint
                        #2: in oid
                pg_stat_get_xact_function_calls(oid): function attributes: strict, cost 1, parallel restricted
                    --  statistics: number of function calls in current transaction
                    . references
                        language = internal
                    + arguments
                        #1: return bigint
                        #2: in oid
                pg_stat_get_xact_function_self_time(oid): function attributes: strict, cost 1, parallel restricted
                    --  statistics: self execution time of function in current transaction, in milliseconds
                    . references
                        language = internal
                    + arguments
                        #1: return double precision
                        #2: in oid
                pg_stat_get_xact_function_total_time(oid): function attributes: strict, cost 1, parallel restricted
                    --  statistics: total execution time of function in current transaction, in milliseconds
                    . references
                        language = internal
                    + arguments
                        #1: return double precision
                        #2: in oid
                pg_stat_get_xact_numscans(oid): function attributes: strict, cost 1, parallel restricted
                    --  statistics: number of scans done for table/index in current transaction
                    . references
                        language = internal
                    + arguments
                        #1: return bigint
                        #2: in oid
                pg_stat_get_xact_tuples_deleted(oid): function attributes: strict, cost 1, parallel restricted
                    --  statistics: number of tuples deleted in current transaction
                    . references
                        language = internal
                    + arguments
                        #1: return bigint
                        #2: in oid
                pg_stat_get_xact_tuples_fetched(oid): function attributes: strict, cost 1, parallel restricted
                    --  statistics: number of tuples fetched by idxscan in current transaction
                    . references
                        language = internal
                    + arguments
                        #1: return bigint
                        #2: in oid
                pg_stat_get_xact_tuples_hot_updated(oid): function attributes: strict, cost 1, parallel restricted
                    --  statistics: number of tuples hot updated in current transaction
                    . references
                        language = internal
                    + arguments
                        #1: return bigint
                        #2: in oid
                pg_stat_get_xact_tuples_inserted(oid): function attributes: strict, cost 1, parallel restricted
                    --  statistics: number of tuples inserted in current transaction
                    . references
                        language = internal
                    + arguments
                        #1: return bigint
                        #2: in oid
                pg_stat_get_xact_tuples_returned(oid): function attributes: strict, cost 1, parallel restricted
                    --  statistics: number of tuples read by seqscan in current transaction
                    . references
                        language = internal
                    + arguments
                        #1: return bigint
                        #2: in oid
                pg_stat_get_xact_tuples_updated(oid): function attributes: strict, cost 1, parallel restricted
                    --  statistics: number of tuples updated in current transaction
                    . references
                        language = internal
                    + arguments
                        #1: return bigint
                        #2: in oid
                pg_stat_reset(): function attributes: cost 1, parallel safe
                    --  statistics: reset collected statistics for current database
                    . references
                        language = internal
                    + arguments
                        #1: return void
                pg_stat_reset_shared(text): function attributes: strict, cost 1, parallel safe
                    --  statistics: reset collected statistics shared across the cluster
                    . references
                        language = internal
                    + arguments
                        #1: return void
                        #2: in text
                pg_stat_reset_single_function_counters(oid): function attributes: strict, cost 1, parallel safe
                    --  statistics: reset collected statistics for a single function in the current database
                    . references
                        language = internal
                    + arguments
                        #1: return void
                        #2: in oid
                pg_stat_reset_single_table_counters(oid): function attributes: strict, cost 1, parallel safe
                    --  statistics: reset collected statistics for a single table or index in the current database
                    . references
                        language = internal
                    + arguments
                        #1: return void
                        #2: in oid
                pg_statistics_obj_is_visible(oid): function attributes: strict, cost 10, parallel safe
                    --  is statistics object visible in search path?
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in oid
                pg_stop_backup(): function attributes: strict, cost 1, parallel restricted
                    --  finish taking an online backup
                    . references
                        language = internal
                    + arguments
                        #1: return pg_lsn
                pg_stop_backup(boolean,boolean): function attributes: strict, cost 1, parallel restricted
                    --  finish taking an online backup
                    . properties
                        returns_set +
                    . references
                        language = internal
                    + arguments
                        #1: return setof record
                        exclusive: in boolean
                        wait_for_archive: in boolean default true
                        lsn: out pg_lsn
                        labelfile: out text
                        spcmapfile: out text
                pg_switch_wal(): function attributes: strict, cost 1, parallel safe
                    --  switch to new wal file
                    . references
                        language = internal
                    + arguments
                        #1: return pg_lsn
                pg_table_is_visible(oid): function attributes: strict, cost 10, parallel safe
                    --  is table visible in search path?
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in oid
                pg_table_size(regclass): function attributes: strict, cost 1, parallel safe
                    --  disk space usage for the specified table, including TOAST, free space and visibility map
                    . references
                        language = internal
                    + arguments
                        #1: return bigint
                        #2: in regclass
                pg_tablespace_databases(oid): function attributes: strict, cost 1, parallel safe
                    --  get OIDs of databases in a tablespace
                    . properties
                        returns_set +
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return setof oid
                        #2: in oid
                pg_tablespace_location(oid): function attributes: strict, cost 1, parallel safe
                    --  tablespace location
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return text
                        #2: in oid
                pg_tablespace_size(name): function attributes: strict, cost 1, parallel safe
                    --  total disk space usage for the specified tablespace
                    . references
                        language = internal
                    + arguments
                        #1: return bigint
                        #2: in name
                pg_tablespace_size(oid): function attributes: strict, cost 1, parallel safe
                    --  total disk space usage for the specified tablespace
                    . references
                        language = internal
                    + arguments
                        #1: return bigint
                        #2: in oid
                pg_terminate_backend(integer): function attributes: strict, cost 1, parallel safe
                    --  terminate a server process
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in integer
                pg_timezone_abbrevs(): function attributes: strict, cost 1, parallel safe
                    --  get the available time zone abbreviations
                    . properties
                        returns_set +
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return setof record
                        abbrev: out text
                        utc_offset: out interval
                        is_dst: out boolean
                pg_timezone_names(): function attributes: strict, cost 1, parallel safe
                    --  get the available time zone names
                    . properties
                        returns_set +
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return setof record
                        name: out text
                        abbrev: out text
                        utc_offset: out interval
                        is_dst: out boolean
                pg_total_relation_size(regclass): function attributes: strict, cost 1, parallel safe
                    --  total disk space usage for the specified table and associated indexes
                    . references
                        language = internal
                    + arguments
                        #1: return bigint
                        #2: in regclass
                pg_trigger_depth(): function attributes: strict, cost 1, parallel restricted
                    --  current trigger depth
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return integer
                pg_try_advisory_lock(bigint): function attributes: strict, cost 1
                    --  obtain exclusive advisory lock if available
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in bigint
                pg_try_advisory_lock(integer,integer): function attributes: strict, cost 1
                    --  obtain exclusive advisory lock if available
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in integer
                        #3: in integer
                pg_try_advisory_lock_shared(bigint): function attributes: strict, cost 1
                    --  obtain shared advisory lock if available
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in bigint
                pg_try_advisory_lock_shared(integer,integer): function attributes: strict, cost 1
                    --  obtain shared advisory lock if available
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in integer
                        #3: in integer
                pg_try_advisory_xact_lock(bigint): function attributes: strict, cost 1
                    --  obtain exclusive advisory lock if available
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in bigint
                pg_try_advisory_xact_lock(integer,integer): function attributes: strict, cost 1
                    --  obtain exclusive advisory lock if available
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in integer
                        #3: in integer
                pg_try_advisory_xact_lock_shared(bigint): function attributes: strict, cost 1
                    --  obtain shared advisory lock if available
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in bigint
                pg_try_advisory_xact_lock_shared(integer,integer): function attributes: strict, cost 1
                    --  obtain shared advisory lock if available
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in integer
                        #3: in integer
                pg_ts_config_is_visible(oid): function attributes: strict, cost 10, parallel safe
                    --  is text search configuration visible in search path?
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in oid
                pg_ts_dict_is_visible(oid): function attributes: strict, cost 10, parallel safe
                    --  is text search dictionary visible in search path?
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in oid
                pg_ts_parser_is_visible(oid): function attributes: strict, cost 10, parallel safe
                    --  is text search parser visible in search path?
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in oid
                pg_ts_template_is_visible(oid): function attributes: strict, cost 10, parallel safe
                    --  is text search template visible in search path?
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in oid
                pg_type_is_visible(oid): function attributes: strict, cost 10, parallel safe
                    --  is type visible in search path?
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in oid
                pg_typeof("any"): function attributes: cost 1, parallel safe
                    --  type of the argument
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return regtype
                        #2: in "any"
                pg_wal_lsn_diff(pg_lsn,pg_lsn): function attributes: strict, cost 1, parallel safe
                    --  difference in bytes, given two wal locations
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return numeric
                        #2: in pg_lsn
                        #3: in pg_lsn
                pg_wal_replay_pause(): function attributes: strict, cost 1, parallel safe
                    --  pause wal replay
                    . references
                        language = internal
                    + arguments
                        #1: return void
                pg_wal_replay_resume(): function attributes: strict, cost 1, parallel safe
                    --  resume wal replay, if it was paused
                    . references
                        language = internal
                    + arguments
                        #1: return void
                pg_walfile_name(pg_lsn): function attributes: strict, cost 1, parallel safe
                    --  wal filename, given a wal location
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return text
                        #2: in pg_lsn
                pg_walfile_name_offset(pg_lsn): function attributes: strict, cost 1, parallel safe
                    --  wal filename and byte offset, given a wal location
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return record
                        lsn: in pg_lsn
                        file_name: out text
                        file_offset: out integer
                pg_xact_commit_timestamp(xid): function attributes: strict, cost 1, parallel safe
                    --  get commit timestamp of a transaction
                    . references
                        language = internal
                    + arguments
                        #1: return timestamp with time zone
                        #2: in xid
                phraseto_tsquery(regconfig,text): function attributes: strict, parallel safe
                    --  transform to tsquery
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return tsquery
                        #2: in regconfig
                        #3: in text
                phraseto_tsquery(text): function attributes: strict, parallel safe
                    --  transform to tsquery
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return tsquery
                        #2: in text
                pi(): function attributes: strict, cost 1, parallel safe
                    --  PI
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return double precision
                plainto_tsquery(regconfig,text): function attributes: strict, parallel safe
                    --  transform to tsquery
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return tsquery
                        #2: in regconfig
                        #3: in text
                plainto_tsquery(text): function attributes: strict, parallel safe
                    --  transform to tsquery
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return tsquery
                        #2: in text
                plpgsql_call_handler(): function
                    . references
                        language = c
                    + arguments
                        #1: return language_handler
                plpgsql_inline_handler(internal): function attributes: strict
                    . references
                        language = c
                    + arguments
                        #1: return void
                        #2: in internal
                plpgsql_validator(oid): function attributes: strict
                    . references
                        language = c
                    + arguments
                        #1: return void
                        #2: in oid
                point(box): function attributes: strict, cost 1, parallel safe
                    --  center of
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return point
                        #2: in box
                point(circle): function attributes: strict, cost 1, parallel safe
                    --  center of
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return point
                        #2: in circle
                point(double precision,double precision): function attributes: strict, cost 1, parallel safe
                    --  convert x, y to point
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return point
                        #2: in double precision
                        #3: in double precision
                point(lseg): function attributes: strict, cost 1, parallel safe
                    --  center of
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return point
                        #2: in lseg
                point(path): function attributes: strict, cost 1, parallel safe
                    --  center of
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return point
                        #2: in path
                point(polygon): function attributes: strict, cost 1, parallel safe
                    --  center of
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return point
                        #2: in polygon
                point_above(point,point): function attributes: strict, cost 1, parallel safe
                    --  implementation of >^ operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in point
                        #3: in point
                point_add(point,point): function attributes: strict, cost 1, parallel safe
                    --  implementation of + operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return point
                        #2: in point
                        #3: in point
                point_below(point,point): function attributes: strict, cost 1, parallel safe
                    --  implementation of <^ operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in point
                        #3: in point
                point_distance(point,point): function attributes: strict, cost 1, parallel safe
                    --  implementation of <-> operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return double precision
                        #2: in point
                        #3: in point
                point_div(point,point): function attributes: strict, cost 1, parallel safe
                    --  implementation of / operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return point
                        #2: in point
                        #3: in point
                point_eq(point,point): function attributes: strict, cost 1, parallel safe
                    --  implementation of ~= operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in point
                        #3: in point
                point_horiz(point,point): function attributes: strict, cost 1, parallel safe
                    --  implementation of ?- operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in point
                        #3: in point
                point_in(cstring): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return point
                        #2: in cstring
                point_left(point,point): function attributes: strict, cost 1, parallel safe
                    --  implementation of << operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in point
                        #3: in point
                point_mul(point,point): function attributes: strict, cost 1, parallel safe
                    --  implementation of * operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return point
                        #2: in point
                        #3: in point
                point_ne(point,point): function attributes: strict, cost 1, parallel safe
                    --  implementation of <> operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in point
                        #3: in point
                point_out(point): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return cstring
                        #2: in point
                point_recv(internal): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return point
                        #2: in internal
                point_right(point,point): function attributes: strict, cost 1, parallel safe
                    --  implementation of >> operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in point
                        #3: in point
                point_send(point): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bytea
                        #2: in point
                point_sub(point,point): function attributes: strict, cost 1, parallel safe
                    --  implementation of - operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return point
                        #2: in point
                        #3: in point
                point_vert(point,point): function attributes: strict, cost 1, parallel safe
                    --  implementation of ?| operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in point
                        #3: in point
                poly_above(polygon,polygon): function attributes: strict, cost 1, parallel safe
                    --  implementation of |>> operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in polygon
                        #3: in polygon
                poly_below(polygon,polygon): function attributes: strict, cost 1, parallel safe
                    --  implementation of <<| operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in polygon
                        #3: in polygon
                poly_center(polygon): function attributes: strict, cost 1, parallel safe
                    --  implementation of @@ operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return point
                        #2: in polygon
                poly_contain(polygon,polygon): function attributes: strict, cost 1, parallel safe
                    --  implementation of @> operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in polygon
                        #3: in polygon
                poly_contain_pt(polygon,point): function attributes: strict, cost 1, parallel safe
                    --  implementation of @> operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in polygon
                        #3: in point
                poly_contained(polygon,polygon): function attributes: strict, cost 1, parallel safe
                    --  implementation of <@ operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in polygon
                        #3: in polygon
                poly_distance(polygon,polygon): function attributes: strict, cost 1, parallel safe
                    --  implementation of <-> operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return double precision
                        #2: in polygon
                        #3: in polygon
                poly_in(cstring): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return polygon
                        #2: in cstring
                poly_left(polygon,polygon): function attributes: strict, cost 1, parallel safe
                    --  implementation of << operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in polygon
                        #3: in polygon
                poly_npoints(polygon): function attributes: strict, cost 1, parallel safe
                    --  implementation of # operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return integer
                        #2: in polygon
                poly_out(polygon): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return cstring
                        #2: in polygon
                poly_overabove(polygon,polygon): function attributes: strict, cost 1, parallel safe
                    --  implementation of |&> operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in polygon
                        #3: in polygon
                poly_overbelow(polygon,polygon): function attributes: strict, cost 1, parallel safe
                    --  implementation of &<| operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in polygon
                        #3: in polygon
                poly_overlap(polygon,polygon): function attributes: strict, cost 1, parallel safe
                    --  implementation of && operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in polygon
                        #3: in polygon
                poly_overleft(polygon,polygon): function attributes: strict, cost 1, parallel safe
                    --  implementation of &< operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in polygon
                        #3: in polygon
                poly_overright(polygon,polygon): function attributes: strict, cost 1, parallel safe
                    --  implementation of &> operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in polygon
                        #3: in polygon
                poly_recv(internal): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return polygon
                        #2: in internal
                poly_right(polygon,polygon): function attributes: strict, cost 1, parallel safe
                    --  implementation of >> operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in polygon
                        #3: in polygon
                poly_same(polygon,polygon): function attributes: strict, cost 1, parallel safe
                    --  implementation of ~= operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in polygon
                        #3: in polygon
                poly_send(polygon): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bytea
                        #2: in polygon
                polygon(box): function attributes: strict, cost 1, parallel safe
                    --  convert box to polygon
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return polygon
                        #2: in box
                polygon(circle): function attributes: strict, cost 1, parallel safe
                    --  convert circle to 12-vertex polygon
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = sql
                    + arguments
                        #1: return polygon
                        #2: in circle
                polygon(integer,circle): function attributes: strict, cost 1, parallel safe
                    --  convert vertex count and circle to polygon
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return polygon
                        #2: in integer
                        #3: in circle
                polygon(path): function attributes: strict, cost 1, parallel safe
                    --  convert path to polygon
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return polygon
                        #2: in path
                popen(path): function attributes: strict, cost 1, parallel safe
                    --  open path
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return path
                        #2: in path
                position(bit,bit): function attributes: strict, cost 1, parallel safe
                    --  position of sub-bitstring
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return integer
                        #2: in bit
                        #3: in bit
                position(bytea,bytea): function attributes: strict, cost 1, parallel safe
                    --  position of substring
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return integer
                        #2: in bytea
                        #3: in bytea
                position(text,text): function attributes: strict, cost 1, parallel safe
                    --  position of substring
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return integer
                        #2: in text
                        #3: in text
                positionjoinsel(internal,oid,internal,smallint,internal): function attributes: strict, cost 1, parallel safe
                    --  join selectivity for position-comparison operators
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return double precision
                        #2: in internal
                        #3: in oid
                        #4: in internal
                        #5: in smallint
                        #6: in internal
                positionsel(internal,oid,internal,integer): function attributes: strict, cost 1, parallel safe
                    --  restriction selectivity for position-comparison operators
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return double precision
                        #2: in internal
                        #3: in oid
                        #4: in internal
                        #5: in integer
                postgresql_fdw_validator(text[],oid): function attributes: strict, cost 1, parallel safe
                    --  (internal)
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in text[]
                        #3: in oid
                pow(double precision,double precision): function attributes: strict, cost 1, parallel safe
                    --  exponentiation
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return double precision
                        #2: in double precision
                        #3: in double precision
                pow(numeric,numeric): function attributes: strict, cost 1, parallel safe
                    --  exponentiation
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return numeric
                        #2: in numeric
                        #3: in numeric
                power(double precision,double precision): function attributes: strict, cost 1, parallel safe
                    --  exponentiation
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return double precision
                        #2: in double precision
                        #3: in double precision
                power(numeric,numeric): function attributes: strict, cost 1, parallel safe
                    --  exponentiation
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return numeric
                        #2: in numeric
                        #3: in numeric
                prefixjoinsel(internal,oid,internal,smallint,internal): function attributes: strict, cost 1, parallel safe
                    --  join selectivity of exact prefix
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return double precision
                        #2: in internal
                        #3: in oid
                        #4: in internal
                        #5: in smallint
                        #6: in internal
                prefixsel(internal,oid,internal,integer): function attributes: strict, cost 1, parallel safe
                    --  restriction selectivity of exact prefix
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return double precision
                        #2: in internal
                        #3: in oid
                        #4: in internal
                        #5: in integer
                prsd_end(internal): function attributes: strict, cost 1, parallel safe
                    --  (internal)
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return void
                        #2: in internal
                prsd_headline(internal,internal,tsquery): function attributes: strict, cost 1, parallel safe
                    --  (internal)
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return internal
                        #2: in internal
                        #3: in internal
                        #4: in tsquery
                prsd_lextype(internal): function attributes: strict, cost 1, parallel safe
                    --  (internal)
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return internal
                        #2: in internal
                prsd_nexttoken(internal,internal,internal): function attributes: strict, cost 1, parallel safe
                    --  (internal)
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return internal
                        #2: in internal
                        #3: in internal
                        #4: in internal
                prsd_start(internal,integer): function attributes: strict, cost 1, parallel safe
                    --  (internal)
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return internal
                        #2: in internal
                        #3: in integer
                pt_contained_circle(point,circle): function attributes: strict, cost 1, parallel safe
                    --  implementation of <@ operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in point
                        #3: in circle
                pt_contained_poly(point,polygon): function attributes: strict, cost 1, parallel safe
                    --  implementation of <@ operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in point
                        #3: in polygon
                query_to_xml(text,boolean,boolean,text): function attributes: strict
                    --  map query result to XML
                    . references
                        language = internal
                    + arguments
                        #1: return xml
                        query: in text
                        nulls: in boolean
                        tableforest: in boolean
                        targetns: in text
                query_to_xml_and_xmlschema(text,boolean,boolean,text): function attributes: strict
                    --  map query result and structure to XML and XML Schema
                    . references
                        language = internal
                    + arguments
                        #1: return xml
                        query: in text
                        nulls: in boolean
                        tableforest: in boolean
                        targetns: in text
                query_to_xmlschema(text,boolean,boolean,text): function attributes: strict
                    --  map query result structure to XML Schema
                    . references
                        language = internal
                    + arguments
                        #1: return xml
                        query: in text
                        nulls: in boolean
                        tableforest: in boolean
                        targetns: in text
                querytree(tsquery): function attributes: strict, cost 1, parallel safe
                    --  show real useful query for GiST index
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return text
                        #2: in tsquery
                quote_ident(text): function attributes: strict, cost 1, parallel safe
                    --  quote an identifier for usage in a querystring
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return text
                        #2: in text
                quote_literal(anyelement): function attributes: strict, cost 1, parallel safe
                    --  quote a data value for usage in a querystring
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = sql
                    + arguments
                        #1: return text
                        #2: in anyelement
                quote_literal(text): function attributes: strict, cost 1, parallel safe
                    --  quote a literal for usage in a querystring
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return text
                        #2: in text
                quote_nullable(anyelement): function attributes: cost 1, parallel safe
                    --  quote a possibly-null data value for usage in a querystring
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = sql
                    + arguments
                        #1: return text
                        #2: in anyelement
                quote_nullable(text): function attributes: cost 1, parallel safe
                    --  quote a possibly-null literal for usage in a querystring
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return text
                        #2: in text
                radians(double precision): function attributes: strict, cost 1, parallel safe
                    --  degrees to radians
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return double precision
                        #2: in double precision
                radius(circle): function attributes: strict, cost 1, parallel safe
                    --  radius of circle
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return double precision
                        #2: in circle
                random(): function attributes: strict, cost 1, parallel restricted
                    --  random value
                    . references
                        language = internal
                    + arguments
                        #1: return double precision
                range_adjacent(anyrange,anyrange): function attributes: strict, cost 1, parallel safe
                    --  implementation of -|- operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in anyrange
                        #3: in anyrange
                range_after(anyrange,anyrange): function attributes: strict, cost 1, parallel safe
                    --  implementation of >> operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in anyrange
                        #3: in anyrange
                range_before(anyrange,anyrange): function attributes: strict, cost 1, parallel safe
                    --  implementation of << operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in anyrange
                        #3: in anyrange
                range_cmp(anyrange,anyrange): function attributes: strict, cost 1, parallel safe
                    --  less-equal-greater
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return integer
                        #2: in anyrange
                        #3: in anyrange
                range_contained_by(anyrange,anyrange): function attributes: strict, cost 1, parallel safe
                    --  implementation of <@ operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in anyrange
                        #3: in anyrange
                range_contains(anyrange,anyrange): function attributes: strict, cost 1, parallel safe
                    --  implementation of @> operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in anyrange
                        #3: in anyrange
                range_contains_elem(anyrange,anyelement): function attributes: strict, cost 1, parallel safe
                    --  implementation of @> operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in anyrange
                        #3: in anyelement
                range_eq(anyrange,anyrange): function attributes: strict, cost 1, parallel safe
                    --  implementation of = operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in anyrange
                        #3: in anyrange
                range_ge(anyrange,anyrange): function attributes: strict, cost 1, parallel safe
                    --  implementation of >= operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in anyrange
                        #3: in anyrange
                range_gist_consistent(internal,anyrange,smallint,oid,internal): function attributes: strict, cost 1, parallel safe
                    --  GiST support
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in internal
                        #3: in anyrange
                        #4: in smallint
                        #5: in oid
                        #6: in internal
                range_gist_penalty(internal,internal,internal): function attributes: strict, cost 1, parallel safe
                    --  GiST support
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return internal
                        #2: in internal
                        #3: in internal
                        #4: in internal
                range_gist_picksplit(internal,internal): function attributes: strict, cost 1, parallel safe
                    --  GiST support
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return internal
                        #2: in internal
                        #3: in internal
                range_gist_same(anyrange,anyrange,internal): function attributes: strict, cost 1, parallel safe
                    --  GiST support
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return internal
                        #2: in anyrange
                        #3: in anyrange
                        #4: in internal
                range_gist_union(internal,internal): function attributes: strict, cost 1, parallel safe
                    --  GiST support
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return anyrange
                        #2: in internal
                        #3: in internal
                range_gt(anyrange,anyrange): function attributes: strict, cost 1, parallel safe
                    --  implementation of > operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in anyrange
                        #3: in anyrange
                range_in(cstring,oid,integer): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return anyrange
                        #2: in cstring
                        #3: in oid
                        #4: in integer
                range_intersect(anyrange,anyrange): function attributes: strict, cost 1, parallel safe
                    --  implementation of * operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return anyrange
                        #2: in anyrange
                        #3: in anyrange
                range_le(anyrange,anyrange): function attributes: strict, cost 1, parallel safe
                    --  implementation of <= operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in anyrange
                        #3: in anyrange
                range_lt(anyrange,anyrange): function attributes: strict, cost 1, parallel safe
                    --  implementation of < operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in anyrange
                        #3: in anyrange
                range_merge(anyrange,anyrange): function attributes: strict, cost 1, parallel safe
                    --  the smallest range which includes both of the given ranges
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return anyrange
                        #2: in anyrange
                        #3: in anyrange
                range_minus(anyrange,anyrange): function attributes: strict, cost 1, parallel safe
                    --  implementation of - operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return anyrange
                        #2: in anyrange
                        #3: in anyrange
                range_ne(anyrange,anyrange): function attributes: strict, cost 1, parallel safe
                    --  implementation of <> operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in anyrange
                        #3: in anyrange
                range_out(anyrange): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return cstring
                        #2: in anyrange
                range_overlaps(anyrange,anyrange): function attributes: strict, cost 1, parallel safe
                    --  implementation of && operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in anyrange
                        #3: in anyrange
                range_overleft(anyrange,anyrange): function attributes: strict, cost 1, parallel safe
                    --  implementation of &< operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in anyrange
                        #3: in anyrange
                range_overright(anyrange,anyrange): function attributes: strict, cost 1, parallel safe
                    --  implementation of &> operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in anyrange
                        #3: in anyrange
                range_recv(internal,oid,integer): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return anyrange
                        #2: in internal
                        #3: in oid
                        #4: in integer
                range_send(anyrange): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bytea
                        #2: in anyrange
                range_typanalyze(internal): function attributes: strict, cost 1, parallel safe
                    --  range typanalyze
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in internal
                range_union(anyrange,anyrange): function attributes: strict, cost 1, parallel safe
                    --  implementation of + operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return anyrange
                        #2: in anyrange
                        #3: in anyrange
                rangesel(internal,oid,internal,integer): function attributes: strict, cost 1, parallel safe
                    --  restriction selectivity for range operators
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return double precision
                        #2: in internal
                        #3: in oid
                        #4: in internal
                        #5: in integer
                rank(): function attributes: cost 1, parallel safe, window
                    --  integer rank with gaps
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bigint
                rank_final(internal,"any"): function attributes: cost 1, parallel safe
                    --  aggregate final function
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bigint
                        #2: in internal
                        #3: in "any"
                            . properties
                                variadic +
                record_eq(record,record): function attributes: strict, cost 1, parallel safe
                    --  implementation of = operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in record
                        #3: in record
                record_ge(record,record): function attributes: strict, cost 1, parallel safe
                    --  implementation of >= operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in record
                        #3: in record
                record_gt(record,record): function attributes: strict, cost 1, parallel safe
                    --  implementation of > operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in record
                        #3: in record
                record_image_eq(record,record): function attributes: strict, cost 1, parallel safe
                    --  implementation of *= operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in record
                        #3: in record
                record_image_ge(record,record): function attributes: strict, cost 1, parallel safe
                    --  implementation of *>= operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in record
                        #3: in record
                record_image_gt(record,record): function attributes: strict, cost 1, parallel safe
                    --  implementation of *> operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in record
                        #3: in record
                record_image_le(record,record): function attributes: strict, cost 1, parallel safe
                    --  implementation of *<= operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in record
                        #3: in record
                record_image_lt(record,record): function attributes: strict, cost 1, parallel safe
                    --  implementation of *< operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in record
                        #3: in record
                record_image_ne(record,record): function attributes: strict, cost 1, parallel safe
                    --  implementation of *<> operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in record
                        #3: in record
                record_in(cstring,oid,integer): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return record
                        #2: in cstring
                        #3: in oid
                        #4: in integer
                record_le(record,record): function attributes: strict, cost 1, parallel safe
                    --  implementation of <= operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in record
                        #3: in record
                record_lt(record,record): function attributes: strict, cost 1, parallel safe
                    --  implementation of < operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in record
                        #3: in record
                record_ne(record,record): function attributes: strict, cost 1, parallel safe
                    --  implementation of <> operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in record
                        #3: in record
                record_out(record): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return cstring
                        #2: in record
                record_recv(internal,oid,integer): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return record
                        #2: in internal
                        #3: in oid
                        #4: in integer
                record_send(record): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bytea
                        #2: in record
                regclass(text): function attributes: strict, cost 1, parallel safe
                    --  convert text to regclass
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return regclass
                        #2: in text
                regclassin(cstring): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return regclass
                        #2: in cstring
                regclassout(regclass): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return cstring
                        #2: in regclass
                regclassrecv(internal): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return regclass
                        #2: in internal
                regclasssend(regclass): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bytea
                        #2: in regclass
                regconfigin(cstring): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return regconfig
                        #2: in cstring
                regconfigout(regconfig): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return cstring
                        #2: in regconfig
                regconfigrecv(internal): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return regconfig
                        #2: in internal
                regconfigsend(regconfig): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bytea
                        #2: in regconfig
                regdictionaryin(cstring): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return regdictionary
                        #2: in cstring
                regdictionaryout(regdictionary): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return cstring
                        #2: in regdictionary
                regdictionaryrecv(internal): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return regdictionary
                        #2: in internal
                regdictionarysend(regdictionary): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bytea
                        #2: in regdictionary
                regexeqjoinsel(internal,oid,internal,smallint,internal): function attributes: strict, cost 1, parallel safe
                    --  join selectivity of regex match
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return double precision
                        #2: in internal
                        #3: in oid
                        #4: in internal
                        #5: in smallint
                        #6: in internal
                regexeqsel(internal,oid,internal,integer): function attributes: strict, cost 1, parallel safe
                    --  restriction selectivity of regex match
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return double precision
                        #2: in internal
                        #3: in oid
                        #4: in internal
                        #5: in integer
                regexnejoinsel(internal,oid,internal,smallint,internal): function attributes: strict, cost 1, parallel safe
                    --  join selectivity of regex non-match
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return double precision
                        #2: in internal
                        #3: in oid
                        #4: in internal
                        #5: in smallint
                        #6: in internal
                regexnesel(internal,oid,internal,integer): function attributes: strict, cost 1, parallel safe
                    --  restriction selectivity of regex non-match
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return double precision
                        #2: in internal
                        #3: in oid
                        #4: in internal
                        #5: in integer
                regexp_match(text,text): function attributes: strict, cost 1, parallel safe
                    --  find first match for regexp
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return text[]
                        #2: in text
                        #3: in text
                regexp_match(text,text,text): function attributes: strict, cost 1, parallel safe
                    --  find first match for regexp
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return text[]
                        #2: in text
                        #3: in text
                        #4: in text
                regexp_matches(text,text): function attributes: strict, cost 1, parallel safe, rows 1
                    --  find match(es) for regexp
                    . properties
                        returns_set +
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return setof text[]
                        #2: in text
                        #3: in text
                regexp_matches(text,text,text): function attributes: strict, cost 1, parallel safe, rows 10
                    --  find match(es) for regexp
                    . properties
                        returns_set +
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return setof text[]
                        #2: in text
                        #3: in text
                        #4: in text
                regexp_replace(text,text,text): function attributes: strict, cost 1, parallel safe
                    --  replace text using regexp
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return text
                        #2: in text
                        #3: in text
                        #4: in text
                regexp_replace(text,text,text,text): function attributes: strict, cost 1, parallel safe
                    --  replace text using regexp
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return text
                        #2: in text
                        #3: in text
                        #4: in text
                        #5: in text
                regexp_split_to_array(text,text): function attributes: strict, cost 1, parallel safe
                    --  split string by pattern
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return text[]
                        #2: in text
                        #3: in text
                regexp_split_to_array(text,text,text): function attributes: strict, cost 1, parallel safe
                    --  split string by pattern
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return text[]
                        #2: in text
                        #3: in text
                        #4: in text
                regexp_split_to_table(text,text): function attributes: strict, cost 1, parallel safe
                    --  split string by pattern
                    . properties
                        returns_set +
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return setof text
                        #2: in text
                        #3: in text
                regexp_split_to_table(text,text,text): function attributes: strict, cost 1, parallel safe
                    --  split string by pattern
                    . properties
                        returns_set +
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return setof text
                        #2: in text
                        #3: in text
                        #4: in text
                regnamespacein(cstring): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return regnamespace
                        #2: in cstring
                regnamespaceout(regnamespace): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return cstring
                        #2: in regnamespace
                regnamespacerecv(internal): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return regnamespace
                        #2: in internal
                regnamespacesend(regnamespace): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bytea
                        #2: in regnamespace
                regoperatorin(cstring): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return regoperator
                        #2: in cstring
                regoperatorout(regoperator): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return cstring
                        #2: in regoperator
                regoperatorrecv(internal): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return regoperator
                        #2: in internal
                regoperatorsend(regoperator): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bytea
                        #2: in regoperator
                regoperin(cstring): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return regoper
                        #2: in cstring
                regoperout(regoper): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return cstring
                        #2: in regoper
                regoperrecv(internal): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return regoper
                        #2: in internal
                regopersend(regoper): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bytea
                        #2: in regoper
                regprocedurein(cstring): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return regprocedure
                        #2: in cstring
                regprocedureout(regprocedure): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return cstring
                        #2: in regprocedure
                regprocedurerecv(internal): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return regprocedure
                        #2: in internal
                regproceduresend(regprocedure): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bytea
                        #2: in regprocedure
                regprocin(cstring): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return regproc
                        #2: in cstring
                regprocout(regproc): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return cstring
                        #2: in regproc
                regprocrecv(internal): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return regproc
                        #2: in internal
                regprocsend(regproc): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bytea
                        #2: in regproc
                regrolein(cstring): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return regrole
                        #2: in cstring
                regroleout(regrole): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return cstring
                        #2: in regrole
                regrolerecv(internal): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return regrole
                        #2: in internal
                regrolesend(regrole): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bytea
                        #2: in regrole
                regtypein(cstring): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return regtype
                        #2: in cstring
                regtypeout(regtype): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return cstring
                        #2: in regtype
                regtyperecv(internal): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return regtype
                        #2: in internal
                regtypesend(regtype): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bytea
                        #2: in regtype
                repeat(text,integer): function attributes: strict, cost 1, parallel safe
                    --  replicate string n times
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return text
                        #2: in text
                        #3: in integer
                replace(text,text,text): function attributes: strict, cost 1, parallel safe
                    --  replace all occurrences in string of old_substr with new_substr
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return text
                        #2: in text
                        #3: in text
                        #4: in text
                reverse(text): function attributes: strict, cost 1, parallel safe
                    --  reverse text
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return text
                        #2: in text
                right(text,integer): function attributes: strict, cost 1, parallel safe
                    --  extract the last n characters
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return text
                        #2: in text
                        #3: in integer
                round(double precision): function attributes: strict, cost 1, parallel safe
                    --  round to nearest integer
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return double precision
                        #2: in double precision
                round(numeric): function attributes: strict, cost 1, parallel safe
                    --  value rounded to 'scale' of zero
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = sql
                    + arguments
                        #1: return numeric
                        #2: in numeric
                round(numeric,integer): function attributes: strict, cost 1, parallel safe
                    --  value rounded to 'scale'
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return numeric
                        #2: in numeric
                        #3: in integer
                row_number(): function attributes: cost 1, parallel safe, window
                    --  row number within partition
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bigint
                row_security_active(oid): function attributes: strict, cost 1, parallel safe
                    --  row security for current context active on table by table oid
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in oid
                row_security_active(text): function attributes: strict, cost 1, parallel safe
                    --  row security for current context active on table by table name
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in text
                row_to_json(record): function attributes: strict, cost 1, parallel safe
                    --  map row to json
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return json
                        #2: in record
                row_to_json(record,boolean): function attributes: strict, cost 1, parallel safe
                    --  map row to json with optional pretty printing
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return json
                        #2: in record
                        #3: in boolean
                rpad(text,integer): function attributes: strict, cost 1, parallel safe
                    --  right-pad string to length
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = sql
                    + arguments
                        #1: return text
                        #2: in text
                        #3: in integer
                rpad(text,integer,text): function attributes: strict, cost 1, parallel safe
                    --  right-pad string to length
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return text
                        #2: in text
                        #3: in integer
                        #4: in text
                rtrim(text): function attributes: strict, cost 1, parallel safe
                    --  trim spaces from right end of string
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return text
                        #2: in text
                rtrim(text,text): function attributes: strict, cost 1, parallel safe
                    --  trim selected characters from right end of string
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return text
                        #2: in text
                        #3: in text
                satisfies_hash_partition(oid,integer,integer,"any"): function attributes: cost 1, parallel safe
                    --  hash partition CHECK constraint
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in oid
                        #3: in integer
                        #4: in integer
                        #5: in "any"
                            . properties
                                variadic +
                scalargejoinsel(internal,oid,internal,smallint,internal): function attributes: strict, cost 1, parallel safe
                    --  join selectivity of >= and related operators on scalar datatypes
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return double precision
                        #2: in internal
                        #3: in oid
                        #4: in internal
                        #5: in smallint
                        #6: in internal
                scalargesel(internal,oid,internal,integer): function attributes: strict, cost 1, parallel safe
                    --  restriction selectivity of >= and related operators on scalar datatypes
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return double precision
                        #2: in internal
                        #3: in oid
                        #4: in internal
                        #5: in integer
                scalargtjoinsel(internal,oid,internal,smallint,internal): function attributes: strict, cost 1, parallel safe
                    --  join selectivity of > and related operators on scalar datatypes
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return double precision
                        #2: in internal
                        #3: in oid
                        #4: in internal
                        #5: in smallint
                        #6: in internal
                scalargtsel(internal,oid,internal,integer): function attributes: strict, cost 1, parallel safe
                    --  restriction selectivity of > and related operators on scalar datatypes
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return double precision
                        #2: in internal
                        #3: in oid
                        #4: in internal
                        #5: in integer
                scalarlejoinsel(internal,oid,internal,smallint,internal): function attributes: strict, cost 1, parallel safe
                    --  join selectivity of <= and related operators on scalar datatypes
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return double precision
                        #2: in internal
                        #3: in oid
                        #4: in internal
                        #5: in smallint
                        #6: in internal
                scalarlesel(internal,oid,internal,integer): function attributes: strict, cost 1, parallel safe
                    --  restriction selectivity of <= and related operators on scalar datatypes
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return double precision
                        #2: in internal
                        #3: in oid
                        #4: in internal
                        #5: in integer
                scalarltjoinsel(internal,oid,internal,smallint,internal): function attributes: strict, cost 1, parallel safe
                    --  join selectivity of < and related operators on scalar datatypes
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return double precision
                        #2: in internal
                        #3: in oid
                        #4: in internal
                        #5: in smallint
                        #6: in internal
                scalarltsel(internal,oid,internal,integer): function attributes: strict, cost 1, parallel safe
                    --  restriction selectivity of < and related operators on scalar datatypes
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return double precision
                        #2: in internal
                        #3: in oid
                        #4: in internal
                        #5: in integer
                scale(numeric): function attributes: strict, cost 1, parallel safe
                    --  number of decimal digits in the fractional part
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return integer
                        #2: in numeric
                schema_to_xml(name,boolean,boolean,text): function attributes: strict, parallel restricted
                    --  map schema contents to XML
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return xml
                        schema: in name
                        nulls: in boolean
                        tableforest: in boolean
                        targetns: in text
                schema_to_xml_and_xmlschema(name,boolean,boolean,text): function attributes: strict, parallel restricted
                    --  map schema contents and structure to XML and XML Schema
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return xml
                        schema: in name
                        nulls: in boolean
                        tableforest: in boolean
                        targetns: in text
                schema_to_xmlschema(name,boolean,boolean,text): function attributes: strict, parallel restricted
                    --  map schema structure to XML Schema
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return xml
                        schema: in name
                        nulls: in boolean
                        tableforest: in boolean
                        targetns: in text
                session_user(): function attributes: strict, cost 1, parallel safe
                    --  session user name
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return name
                set_bit(bit,integer,integer): function attributes: strict, cost 1, parallel safe
                    --  set bit
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bit
                        #2: in bit
                        #3: in integer
                        #4: in integer
                set_bit(bytea,integer,integer): function attributes: strict, cost 1, parallel safe
                    --  set bit
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bytea
                        #2: in bytea
                        #3: in integer
                        #4: in integer
                set_byte(bytea,integer,integer): function attributes: strict, cost 1, parallel safe
                    --  set byte
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bytea
                        #2: in bytea
                        #3: in integer
                        #4: in integer
                set_config(text,text,boolean): function attributes: cost 1
                    --  SET X as a function
                    . references
                        language = internal
                    + arguments
                        #1: return text
                        #2: in text
                        #3: in text
                        #4: in boolean
                set_masklen(cidr,integer): function attributes: strict, cost 1, parallel safe
                    --  change netmask of cidr
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return cidr
                        #2: in cidr
                        #3: in integer
                set_masklen(inet,integer): function attributes: strict, cost 1, parallel safe
                    --  change netmask of inet
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return inet
                        #2: in inet
                        #3: in integer
                setseed(double precision): function attributes: strict, cost 1, parallel restricted
                    --  set random seed
                    . references
                        language = internal
                    + arguments
                        #1: return void
                        #2: in double precision
                setval(regclass,bigint): function attributes: strict, cost 1
                    --  set sequence value
                    . references
                        language = internal
                    + arguments
                        #1: return bigint
                        #2: in regclass
                        #3: in bigint
                setval(regclass,bigint,boolean): function attributes: strict, cost 1
                    --  set sequence value and is_called status
                    . references
                        language = internal
                    + arguments
                        #1: return bigint
                        #2: in regclass
                        #3: in bigint
                        #4: in boolean
                setweight(tsvector,"char"): function attributes: strict, cost 1, parallel safe
                    --  set given weight for whole tsvector
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return tsvector
                        #2: in tsvector
                        #3: in "char"
                setweight(tsvector,"char",text[]): function attributes: strict, cost 1, parallel safe
                    --  set given weight for given lexemes
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return tsvector
                        #2: in tsvector
                        #3: in "char"
                        #4: in text[]
                sha224(bytea): function attributes: leakproof, strict, cost 1, parallel safe
                    --  SHA-224 hash
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bytea
                        #2: in bytea
                sha256(bytea): function attributes: leakproof, strict, cost 1, parallel safe
                    --  SHA-256 hash
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bytea
                        #2: in bytea
                sha384(bytea): function attributes: leakproof, strict, cost 1, parallel safe
                    --  SHA-384 hash
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bytea
                        #2: in bytea
                sha512(bytea): function attributes: leakproof, strict, cost 1, parallel safe
                    --  SHA-512 hash
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bytea
                        #2: in bytea
                shell_in(cstring): function attributes: cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return opaque
                        #2: in cstring
                shell_out(opaque): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return cstring
                        #2: in opaque
                shift_jis_2004_to_euc_jis_2004(integer,integer,cstring,internal,integer): function attributes: strict, parallel safe
                    --  internal conversion function for SHIFT_JIS_2004 to EUC_JIS_2004
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = c
                    + arguments
                        #1: return void
                        #2: in integer
                        #3: in integer
                        #4: in cstring
                        #5: in internal
                        #6: in integer
                shift_jis_2004_to_utf8(integer,integer,cstring,internal,integer): function attributes: strict, parallel safe
                    --  internal conversion function for SHIFT_JIS_2004 to UTF8
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = c
                    + arguments
                        #1: return void
                        #2: in integer
                        #3: in integer
                        #4: in cstring
                        #5: in internal
                        #6: in integer
                shobj_description(oid,name): function attributes: strict, parallel safe
                    --  get description for object id and shared catalog name
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = sql
                    + arguments
                        #1: return text
                        #2: in oid
                        #3: in name
                sign(double precision): function attributes: strict, cost 1, parallel safe
                    --  sign of value
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return double precision
                        #2: in double precision
                sign(numeric): function attributes: strict, cost 1, parallel safe
                    --  sign of value
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return numeric
                        #2: in numeric
                similar_escape(text,text): function attributes: cost 1, parallel safe
                    --  convert SQL99 regexp pattern to POSIX style
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return text
                        #2: in text
                        #3: in text
                sin(double precision): function attributes: strict, cost 1, parallel safe
                    --  sine
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return double precision
                        #2: in double precision
                sind(double precision): function attributes: strict, cost 1, parallel safe
                    --  sine, degrees
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return double precision
                        #2: in double precision
                sinh(double precision): function attributes: strict, cost 1, parallel safe
                    --  hyperbolic sine
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return double precision
                        #2: in double precision
                sjis_to_euc_jp(integer,integer,cstring,internal,integer): function attributes: strict, parallel safe
                    --  internal conversion function for SJIS to EUC_JP
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = c
                    + arguments
                        #1: return void
                        #2: in integer
                        #3: in integer
                        #4: in cstring
                        #5: in internal
                        #6: in integer
                sjis_to_mic(integer,integer,cstring,internal,integer): function attributes: strict, parallel safe
                    --  internal conversion function for SJIS to MULE_INTERNAL
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = c
                    + arguments
                        #1: return void
                        #2: in integer
                        #3: in integer
                        #4: in cstring
                        #5: in internal
                        #6: in integer
                sjis_to_utf8(integer,integer,cstring,internal,integer): function attributes: strict, parallel safe
                    --  internal conversion function for SJIS to UTF8
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = c
                    + arguments
                        #1: return void
                        #2: in integer
                        #3: in integer
                        #4: in cstring
                        #5: in internal
                        #6: in integer
                slope(point,point): function attributes: strict, cost 1, parallel safe
                    --  slope between points
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return double precision
                        #2: in point
                        #3: in point
                spg_bbox_quad_config(internal,internal): function attributes: strict, cost 1, parallel safe
                    --  SP-GiST support for quad tree over 2-D types represented by their bounding boxes
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return void
                        #2: in internal
                        #3: in internal
                spg_box_quad_choose(internal,internal): function attributes: strict, cost 1, parallel safe
                    --  SP-GiST support for quad tree over box
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return void
                        #2: in internal
                        #3: in internal
                spg_box_quad_config(internal,internal): function attributes: strict, cost 1, parallel safe
                    --  SP-GiST support for quad tree over box
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return void
                        #2: in internal
                        #3: in internal
                spg_box_quad_inner_consistent(internal,internal): function attributes: strict, cost 1, parallel safe
                    --  SP-GiST support for quad tree over box
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return void
                        #2: in internal
                        #3: in internal
                spg_box_quad_leaf_consistent(internal,internal): function attributes: strict, cost 1, parallel safe
                    --  SP-GiST support for quad tree over box
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in internal
                        #3: in internal
                spg_box_quad_picksplit(internal,internal): function attributes: strict, cost 1, parallel safe
                    --  SP-GiST support for quad tree over box
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return void
                        #2: in internal
                        #3: in internal
                spg_kd_choose(internal,internal): function attributes: strict, cost 1, parallel safe
                    --  SP-GiST support for k-d tree over point
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return void
                        #2: in internal
                        #3: in internal
                spg_kd_config(internal,internal): function attributes: strict, cost 1, parallel safe
                    --  SP-GiST support for k-d tree over point
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return void
                        #2: in internal
                        #3: in internal
                spg_kd_inner_consistent(internal,internal): function attributes: strict, cost 1, parallel safe
                    --  SP-GiST support for k-d tree over point
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return void
                        #2: in internal
                        #3: in internal
                spg_kd_picksplit(internal,internal): function attributes: strict, cost 1, parallel safe
                    --  SP-GiST support for k-d tree over point
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return void
                        #2: in internal
                        #3: in internal
                spg_poly_quad_compress(polygon): function attributes: strict, cost 1, parallel safe
                    --  SP-GiST support for quad tree over polygons
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return box
                        #2: in polygon
                spg_quad_choose(internal,internal): function attributes: strict, cost 1, parallel safe
                    --  SP-GiST support for quad tree over point
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return void
                        #2: in internal
                        #3: in internal
                spg_quad_config(internal,internal): function attributes: strict, cost 1, parallel safe
                    --  SP-GiST support for quad tree over point
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return void
                        #2: in internal
                        #3: in internal
                spg_quad_inner_consistent(internal,internal): function attributes: strict, cost 1, parallel safe
                    --  SP-GiST support for quad tree over point
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return void
                        #2: in internal
                        #3: in internal
                spg_quad_leaf_consistent(internal,internal): function attributes: strict, cost 1, parallel safe
                    --  SP-GiST support for quad tree and k-d tree over point
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in internal
                        #3: in internal
                spg_quad_picksplit(internal,internal): function attributes: strict, cost 1, parallel safe
                    --  SP-GiST support for quad tree over point
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return void
                        #2: in internal
                        #3: in internal
                spg_range_quad_choose(internal,internal): function attributes: strict, cost 1, parallel safe
                    --  SP-GiST support for quad tree over range
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return void
                        #2: in internal
                        #3: in internal
                spg_range_quad_config(internal,internal): function attributes: strict, cost 1, parallel safe
                    --  SP-GiST support for quad tree over range
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return void
                        #2: in internal
                        #3: in internal
                spg_range_quad_inner_consistent(internal,internal): function attributes: strict, cost 1, parallel safe
                    --  SP-GiST support for quad tree over range
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return void
                        #2: in internal
                        #3: in internal
                spg_range_quad_leaf_consistent(internal,internal): function attributes: strict, cost 1, parallel safe
                    --  SP-GiST support for quad tree over range
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in internal
                        #3: in internal
                spg_range_quad_picksplit(internal,internal): function attributes: strict, cost 1, parallel safe
                    --  SP-GiST support for quad tree over range
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return void
                        #2: in internal
                        #3: in internal
                spg_text_choose(internal,internal): function attributes: strict, cost 1, parallel safe
                    --  SP-GiST support for radix tree over text
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return void
                        #2: in internal
                        #3: in internal
                spg_text_config(internal,internal): function attributes: strict, cost 1, parallel safe
                    --  SP-GiST support for radix tree over text
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return void
                        #2: in internal
                        #3: in internal
                spg_text_inner_consistent(internal,internal): function attributes: strict, cost 1, parallel safe
                    --  SP-GiST support for radix tree over text
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return void
                        #2: in internal
                        #3: in internal
                spg_text_leaf_consistent(internal,internal): function attributes: strict, cost 1, parallel safe
                    --  SP-GiST support for radix tree over text
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in internal
                        #3: in internal
                spg_text_picksplit(internal,internal): function attributes: strict, cost 1, parallel safe
                    --  SP-GiST support for radix tree over text
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return void
                        #2: in internal
                        #3: in internal
                spghandler(internal): function attributes: strict, cost 1, parallel safe
                    --  spgist index access method handler
                    . references
                        language = internal
                    + arguments
                        #1: return index_am_handler
                        #2: in internal
                split_part(text,text,integer): function attributes: strict, cost 1, parallel safe
                    --  split string by field_sep and return field_num
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return text
                        #2: in text
                        #3: in text
                        #4: in integer
                sqrt(double precision): function attributes: strict, cost 1, parallel safe
                    --  square root
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return double precision
                        #2: in double precision
                sqrt(numeric): function attributes: strict, cost 1, parallel safe
                    --  square root
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return numeric
                        #2: in numeric
                starts_with(text,text): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of ^@ operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in text
                        #3: in text
                statement_timestamp(): function attributes: strict, cost 1, parallel safe
                    --  current statement time
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return timestamp with time zone
                string_agg_finalfn(internal): function attributes: cost 1, parallel safe
                    --  aggregate final function
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return text
                        #2: in internal
                string_agg_transfn(internal,text,text): function attributes: cost 1, parallel safe
                    --  aggregate transition function
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return internal
                        #2: in internal
                        #3: in text
                        #4: in text
                string_to_array(text,text): function attributes: cost 1, parallel safe
                    --  split delimited text into text[]
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return text[]
                        #2: in text
                        #3: in text
                string_to_array(text,text,text): function attributes: cost 1, parallel safe
                    --  split delimited text into text[], with null string
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return text[]
                        #2: in text
                        #3: in text
                        #4: in text
                strip(tsvector): function attributes: strict, cost 1, parallel safe
                    --  strip position information
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return tsvector
                        #2: in tsvector
                strpos(text,text): function attributes: strict, cost 1, parallel safe
                    --  position of substring
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return integer
                        #2: in text
                        #3: in text
                substr(bytea,integer): function attributes: strict, cost 1, parallel safe
                    --  extract portion of string
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bytea
                        #2: in bytea
                        #3: in integer
                substr(bytea,integer,integer): function attributes: strict, cost 1, parallel safe
                    --  extract portion of string
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bytea
                        #2: in bytea
                        #3: in integer
                        #4: in integer
                substr(text,integer): function attributes: strict, cost 1, parallel safe
                    --  extract portion of string
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return text
                        #2: in text
                        #3: in integer
                substr(text,integer,integer): function attributes: strict, cost 1, parallel safe
                    --  extract portion of string
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return text
                        #2: in text
                        #3: in integer
                        #4: in integer
                substring(bit,integer): function attributes: strict, cost 1, parallel safe
                    --  extract portion of bitstring
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bit
                        #2: in bit
                        #3: in integer
                substring(bit,integer,integer): function attributes: strict, cost 1, parallel safe
                    --  extract portion of bitstring
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bit
                        #2: in bit
                        #3: in integer
                        #4: in integer
                substring(bytea,integer): function attributes: strict, cost 1, parallel safe
                    --  extract portion of string
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bytea
                        #2: in bytea
                        #3: in integer
                substring(bytea,integer,integer): function attributes: strict, cost 1, parallel safe
                    --  extract portion of string
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bytea
                        #2: in bytea
                        #3: in integer
                        #4: in integer
                substring(text,integer): function attributes: strict, cost 1, parallel safe
                    --  extract portion of string
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return text
                        #2: in text
                        #3: in integer
                substring(text,integer,integer): function attributes: strict, cost 1, parallel safe
                    --  extract portion of string
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return text
                        #2: in text
                        #3: in integer
                        #4: in integer
                substring(text,text): function attributes: strict, cost 1, parallel safe
                    --  extract text matching regular expression
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return text
                        #2: in text
                        #3: in text
                substring(text,text,text): function attributes: strict, cost 1, parallel safe
                    --  extract text matching SQL99 regular expression
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = sql
                    + arguments
                        #1: return text
                        #2: in text
                        #3: in text
                        #4: in text
                suppress_redundant_updates_trigger(): trigger function attributes: strict, cost 1, parallel safe
                    --  trigger to suppress updates when new and old records match
                    . references
                        language = internal
                    + arguments
                        #1: return trigger
                system(internal): function attributes: strict, cost 1, parallel safe
                    --  SYSTEM tablesample method handler
                    . references
                        language = internal
                    + arguments
                        #1: return tsm_handler
                        #2: in internal
                table_am_handler_in(cstring): function attributes: cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return table_am_handler
                        #2: in cstring
                table_am_handler_out(table_am_handler): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return cstring
                        #2: in table_am_handler
                table_to_xml(regclass,boolean,boolean,text): function attributes: strict, parallel restricted
                    --  map table contents to XML
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return xml
                        tbl: in regclass
                        nulls: in boolean
                        tableforest: in boolean
                        targetns: in text
                table_to_xml_and_xmlschema(regclass,boolean,boolean,text): function attributes: strict, parallel restricted
                    --  map table contents and structure to XML and XML Schema
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return xml
                        tbl: in regclass
                        nulls: in boolean
                        tableforest: in boolean
                        targetns: in text
                table_to_xmlschema(regclass,boolean,boolean,text): function attributes: strict, parallel restricted
                    --  map table structure to XML Schema
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return xml
                        tbl: in regclass
                        nulls: in boolean
                        tableforest: in boolean
                        targetns: in text
                tan(double precision): function attributes: strict, cost 1, parallel safe
                    --  tangent
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return double precision
                        #2: in double precision
                tand(double precision): function attributes: strict, cost 1, parallel safe
                    --  tangent, degrees
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return double precision
                        #2: in double precision
                tanh(double precision): function attributes: strict, cost 1, parallel safe
                    --  hyperbolic tangent
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return double precision
                        #2: in double precision
                text("char"): function attributes: strict, cost 1, parallel safe
                    --  convert char to text
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return text
                        #2: in "char"
                text(boolean): function attributes: strict, cost 1, parallel safe
                    --  convert boolean to text
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return text
                        #2: in boolean
                text(char): function attributes: strict, cost 1, parallel safe
                    --  convert char(n) to text
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return text
                        #2: in char
                text(inet): function attributes: strict, cost 1, parallel safe
                    --  show all parts of inet/cidr value
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return text
                        #2: in inet
                text(name): function attributes: strict, cost 1, parallel safe
                    --  convert name to text
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return text
                        #2: in name
                text(xml): function attributes: strict, cost 1, parallel safe
                    --  serialize an XML value to a character string
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return text
                        #2: in xml
                text_ge(text,text): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of >= operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in text
                        #3: in text
                text_gt(text,text): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of > operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in text
                        #3: in text
                text_larger(text,text): function attributes: leakproof, strict, cost 1, parallel safe
                    --  larger of two
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return text
                        #2: in text
                        #3: in text
                text_le(text,text): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of <= operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in text
                        #3: in text
                text_lt(text,text): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of < operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in text
                        #3: in text
                text_pattern_ge(text,text): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of ~>=~ operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in text
                        #3: in text
                text_pattern_gt(text,text): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of ~>~ operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in text
                        #3: in text
                text_pattern_le(text,text): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of ~<=~ operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in text
                        #3: in text
                text_pattern_lt(text,text): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of ~<~ operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in text
                        #3: in text
                text_smaller(text,text): function attributes: leakproof, strict, cost 1, parallel safe
                    --  smaller of two
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return text
                        #2: in text
                        #3: in text
                textanycat(text,anynonarray): function attributes: strict, cost 1, parallel safe
                    --  implementation of || operator
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = sql
                    + arguments
                        #1: return text
                        #2: in text
                        #3: in anynonarray
                textcat(text,text): function attributes: strict, cost 1, parallel safe
                    --  implementation of || operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return text
                        #2: in text
                        #3: in text
                texteq(text,text): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of = operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in text
                        #3: in text
                texteqname(text,name): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of = operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in text
                        #3: in name
                textgename(text,name): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of >= operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in text
                        #3: in name
                textgtname(text,name): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of > operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in text
                        #3: in name
                texticlike(text,text): function attributes: strict, cost 1, parallel safe
                    --  implementation of ~~* operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in text
                        #3: in text
                texticlike_support(internal): function attributes: strict, cost 1, parallel safe
                    --  planner support for texticlike
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return internal
                        #2: in internal
                texticnlike(text,text): function attributes: strict, cost 1, parallel safe
                    --  implementation of !~~* operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in text
                        #3: in text
                texticregexeq(text,text): function attributes: strict, cost 1, parallel safe
                    --  implementation of ~* operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in text
                        #3: in text
                texticregexeq_support(internal): function attributes: strict, cost 1, parallel safe
                    --  planner support for texticregexeq
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return internal
                        #2: in internal
                texticregexne(text,text): function attributes: strict, cost 1, parallel safe
                    --  implementation of !~* operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in text
                        #3: in text
                textin(cstring): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return text
                        #2: in cstring
                textlen(text): function attributes: strict, cost 1, parallel safe
                    --  length
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return integer
                        #2: in text
                textlename(text,name): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of <= operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in text
                        #3: in name
                textlike(text,text): function attributes: strict, cost 1, parallel safe
                    --  implementation of ~~ operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in text
                        #3: in text
                textlike_support(internal): function attributes: strict, cost 1, parallel safe
                    --  planner support for textlike
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return internal
                        #2: in internal
                textltname(text,name): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of < operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in text
                        #3: in name
                textne(text,text): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of <> operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in text
                        #3: in text
                textnename(text,name): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of <> operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in text
                        #3: in name
                textnlike(text,text): function attributes: strict, cost 1, parallel safe
                    --  implementation of !~~ operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in text
                        #3: in text
                textout(text): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return cstring
                        #2: in text
                textrecv(internal): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return text
                        #2: in internal
                textregexeq(text,text): function attributes: strict, cost 1, parallel safe
                    --  implementation of ~ operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in text
                        #3: in text
                textregexeq_support(internal): function attributes: strict, cost 1, parallel safe
                    --  planner support for textregexeq
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return internal
                        #2: in internal
                textregexne(text,text): function attributes: strict, cost 1, parallel safe
                    --  implementation of !~ operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in text
                        #3: in text
                textsend(text): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bytea
                        #2: in text
                thesaurus_init(internal): function attributes: strict, cost 1, parallel safe
                    --  (internal)
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return internal
                        #2: in internal
                thesaurus_lexize(internal,internal,internal,internal): function attributes: strict, cost 1, parallel safe
                    --  (internal)
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return internal
                        #2: in internal
                        #3: in internal
                        #4: in internal
                        #5: in internal
                tideq(tid,tid): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of = operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in tid
                        #3: in tid
                tidge(tid,tid): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of >= operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in tid
                        #3: in tid
                tidgt(tid,tid): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of > operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in tid
                        #3: in tid
                tidin(cstring): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return tid
                        #2: in cstring
                tidlarger(tid,tid): function attributes: strict, cost 1, parallel safe
                    --  larger of two
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return tid
                        #2: in tid
                        #3: in tid
                tidle(tid,tid): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of <= operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in tid
                        #3: in tid
                tidlt(tid,tid): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of < operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in tid
                        #3: in tid
                tidne(tid,tid): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of <> operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in tid
                        #3: in tid
                tidout(tid): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return cstring
                        #2: in tid
                tidrecv(internal): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return tid
                        #2: in internal
                tidsend(tid): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bytea
                        #2: in tid
                tidsmaller(tid,tid): function attributes: strict, cost 1, parallel safe
                    --  smaller of two
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return tid
                        #2: in tid
                        #3: in tid
                time(interval): function attributes: strict, cost 1, parallel safe
                    --  convert interval to time
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return time
                        #2: in interval
                time(time with time zone): function attributes: strict, cost 1, parallel safe
                    --  convert time with time zone to time
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return time
                        #2: in time with time zone
                time(time,integer): function attributes: strict, cost 1, parallel safe
                    --  adjust time precision
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return time
                        #2: in time
                        #3: in integer
                time(timestamp with time zone): function attributes: strict, cost 1, parallel safe
                    --  convert timestamp with time zone to time
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return time
                        #2: in timestamp with time zone
                time(timestamp): function attributes: strict, cost 1, parallel safe
                    --  convert timestamp to time
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return time
                        #2: in timestamp
                time_cmp(time,time): function attributes: leakproof, strict, cost 1, parallel safe
                    --  less-equal-greater
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return integer
                        #2: in time
                        #3: in time
                time_eq(time,time): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of = operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in time
                        #3: in time
                time_ge(time,time): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of >= operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in time
                        #3: in time
                time_gt(time,time): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of > operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in time
                        #3: in time
                time_hash(time): function attributes: strict, cost 1, parallel safe
                    --  hash
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return integer
                        #2: in time
                time_hash_extended(time,bigint): function attributes: strict, cost 1, parallel safe
                    --  hash
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bigint
                        #2: in time
                        #3: in bigint
                time_in(cstring,oid,integer): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return time
                        #2: in cstring
                        #3: in oid
                        #4: in integer
                time_larger(time,time): function attributes: strict, cost 1, parallel safe
                    --  larger of two
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return time
                        #2: in time
                        #3: in time
                time_le(time,time): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of <= operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in time
                        #3: in time
                time_lt(time,time): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of < operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in time
                        #3: in time
                time_mi_interval(time,interval): function attributes: strict, cost 1, parallel safe
                    --  implementation of - operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return time
                        #2: in time
                        #3: in interval
                time_mi_time(time,time): function attributes: strict, cost 1, parallel safe
                    --  implementation of - operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return interval
                        #2: in time
                        #3: in time
                time_ne(time,time): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of <> operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in time
                        #3: in time
                time_out(time): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return cstring
                        #2: in time
                time_pl_interval(time,interval): function attributes: strict, cost 1, parallel safe
                    --  implementation of + operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return time
                        #2: in time
                        #3: in interval
                time_recv(internal,oid,integer): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return time
                        #2: in internal
                        #3: in oid
                        #4: in integer
                time_send(time): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bytea
                        #2: in time
                time_smaller(time,time): function attributes: strict, cost 1, parallel safe
                    --  smaller of two
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return time
                        #2: in time
                        #3: in time
                time_support(internal): function attributes: strict, cost 1, parallel safe
                    --  planner support for time length coercion
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return internal
                        #2: in internal
                timedate_pl(time,date): function attributes: strict, cost 1, parallel safe
                    --  implementation of + operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = sql
                    + arguments
                        #1: return timestamp
                        #2: in time
                        #3: in date
                timeofday(): function attributes: strict, cost 1, parallel safe
                    --  current date and time - increments during transactions
                    . references
                        language = internal
                    + arguments
                        #1: return text
                timestamp(date): function attributes: strict, cost 1, parallel safe
                    --  convert date to timestamp
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return timestamp
                        #2: in date
                timestamp(date,time): function attributes: strict, cost 1, parallel safe
                    --  convert date and time to timestamp
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return timestamp
                        #2: in date
                        #3: in time
                timestamp(timestamp with time zone): function attributes: strict, cost 1, parallel safe
                    --  convert timestamp with time zone to timestamp
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return timestamp
                        #2: in timestamp with time zone
                timestamp(timestamp,integer): function attributes: strict, cost 1, parallel safe
                    --  adjust timestamp precision
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return timestamp
                        #2: in timestamp
                        #3: in integer
                timestamp_cmp(timestamp,timestamp): function attributes: leakproof, strict, cost 1, parallel safe
                    --  less-equal-greater
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return integer
                        #2: in timestamp
                        #3: in timestamp
                timestamp_cmp_date(timestamp,date): function attributes: strict, cost 1, parallel safe
                    --  less-equal-greater
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return integer
                        #2: in timestamp
                        #3: in date
                timestamp_cmp_timestamptz(timestamp,timestamp with time zone): function attributes: strict, cost 1, parallel safe
                    --  less-equal-greater
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return integer
                        #2: in timestamp
                        #3: in timestamp with time zone
                timestamp_eq(timestamp,timestamp): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of = operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in timestamp
                        #3: in timestamp
                timestamp_eq_date(timestamp,date): function attributes: strict, cost 1, parallel safe
                    --  implementation of = operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in timestamp
                        #3: in date
                timestamp_eq_timestamptz(timestamp,timestamp with time zone): function attributes: strict, cost 1, parallel safe
                    --  implementation of = operator
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in timestamp
                        #3: in timestamp with time zone
                timestamp_ge(timestamp,timestamp): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of >= operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in timestamp
                        #3: in timestamp
                timestamp_ge_date(timestamp,date): function attributes: strict, cost 1, parallel safe
                    --  implementation of >= operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in timestamp
                        #3: in date
                timestamp_ge_timestamptz(timestamp,timestamp with time zone): function attributes: strict, cost 1, parallel safe
                    --  implementation of >= operator
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in timestamp
                        #3: in timestamp with time zone
                timestamp_gt(timestamp,timestamp): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of > operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in timestamp
                        #3: in timestamp
                timestamp_gt_date(timestamp,date): function attributes: strict, cost 1, parallel safe
                    --  implementation of > operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in timestamp
                        #3: in date
                timestamp_gt_timestamptz(timestamp,timestamp with time zone): function attributes: strict, cost 1, parallel safe
                    --  implementation of > operator
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in timestamp
                        #3: in timestamp with time zone
                timestamp_hash(timestamp): function attributes: strict, cost 1, parallel safe
                    --  hash
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return integer
                        #2: in timestamp
                timestamp_hash_extended(timestamp,bigint): function attributes: strict, cost 1, parallel safe
                    --  hash
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bigint
                        #2: in timestamp
                        #3: in bigint
                timestamp_in(cstring,oid,integer): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return timestamp
                        #2: in cstring
                        #3: in oid
                        #4: in integer
                timestamp_larger(timestamp,timestamp): function attributes: strict, cost 1, parallel safe
                    --  larger of two
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return timestamp
                        #2: in timestamp
                        #3: in timestamp
                timestamp_le(timestamp,timestamp): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of <= operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in timestamp
                        #3: in timestamp
                timestamp_le_date(timestamp,date): function attributes: strict, cost 1, parallel safe
                    --  implementation of <= operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in timestamp
                        #3: in date
                timestamp_le_timestamptz(timestamp,timestamp with time zone): function attributes: strict, cost 1, parallel safe
                    --  implementation of <= operator
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in timestamp
                        #3: in timestamp with time zone
                timestamp_lt(timestamp,timestamp): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of < operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in timestamp
                        #3: in timestamp
                timestamp_lt_date(timestamp,date): function attributes: strict, cost 1, parallel safe
                    --  implementation of < operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in timestamp
                        #3: in date
                timestamp_lt_timestamptz(timestamp,timestamp with time zone): function attributes: strict, cost 1, parallel safe
                    --  implementation of < operator
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in timestamp
                        #3: in timestamp with time zone
                timestamp_mi(timestamp,timestamp): function attributes: strict, cost 1, parallel safe
                    --  implementation of - operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return interval
                        #2: in timestamp
                        #3: in timestamp
                timestamp_mi_interval(timestamp,interval): function attributes: strict, cost 1, parallel safe
                    --  implementation of - operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return timestamp
                        #2: in timestamp
                        #3: in interval
                timestamp_ne(timestamp,timestamp): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of <> operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in timestamp
                        #3: in timestamp
                timestamp_ne_date(timestamp,date): function attributes: strict, cost 1, parallel safe
                    --  implementation of <> operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in timestamp
                        #3: in date
                timestamp_ne_timestamptz(timestamp,timestamp with time zone): function attributes: strict, cost 1, parallel safe
                    --  implementation of <> operator
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in timestamp
                        #3: in timestamp with time zone
                timestamp_out(timestamp): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return cstring
                        #2: in timestamp
                timestamp_pl_interval(timestamp,interval): function attributes: strict, cost 1, parallel safe
                    --  implementation of + operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return timestamp
                        #2: in timestamp
                        #3: in interval
                timestamp_recv(internal,oid,integer): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return timestamp
                        #2: in internal
                        #3: in oid
                        #4: in integer
                timestamp_send(timestamp): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bytea
                        #2: in timestamp
                timestamp_smaller(timestamp,timestamp): function attributes: strict, cost 1, parallel safe
                    --  smaller of two
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return timestamp
                        #2: in timestamp
                        #3: in timestamp
                timestamp_sortsupport(internal): function attributes: strict, cost 1, parallel safe
                    --  sort support
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return void
                        #2: in internal
                timestamp_support(internal): function attributes: strict, cost 1, parallel safe
                    --  planner support for timestamp length coercion
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return internal
                        #2: in internal
                timestamptypmodin(cstring[]): function attributes: strict, cost 1, parallel safe
                    --  I/O typmod
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return integer
                        #2: in cstring[]
                timestamptypmodout(integer): function attributes: strict, cost 1, parallel safe
                    --  I/O typmod
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return cstring
                        #2: in integer
                timestamptz(date): function attributes: strict, cost 1, parallel safe
                    --  convert date to timestamp with time zone
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return timestamp with time zone
                        #2: in date
                timestamptz(date,time with time zone): function attributes: strict, cost 1, parallel safe
                    --  convert date and time with time zone to timestamp with time zone
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return timestamp with time zone
                        #2: in date
                        #3: in time with time zone
                timestamptz(date,time): function attributes: strict, cost 1, parallel safe
                    --  convert date and time to timestamp with time zone
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = sql
                    + arguments
                        #1: return timestamp with time zone
                        #2: in date
                        #3: in time
                timestamptz(timestamp with time zone,integer): function attributes: strict, cost 1, parallel safe
                    --  adjust timestamptz precision
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return timestamp with time zone
                        #2: in timestamp with time zone
                        #3: in integer
                timestamptz(timestamp): function attributes: strict, cost 1, parallel safe
                    --  convert timestamp to timestamp with time zone
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return timestamp with time zone
                        #2: in timestamp
                timestamptz_cmp(timestamp with time zone,timestamp with time zone): function attributes: leakproof, strict, cost 1, parallel safe
                    --  less-equal-greater
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return integer
                        #2: in timestamp with time zone
                        #3: in timestamp with time zone
                timestamptz_cmp_date(timestamp with time zone,date): function attributes: strict, cost 1, parallel safe
                    --  less-equal-greater
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return integer
                        #2: in timestamp with time zone
                        #3: in date
                timestamptz_cmp_timestamp(timestamp with time zone,timestamp): function attributes: strict, cost 1, parallel safe
                    --  less-equal-greater
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return integer
                        #2: in timestamp with time zone
                        #3: in timestamp
                timestamptz_eq(timestamp with time zone,timestamp with time zone): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of = operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in timestamp with time zone
                        #3: in timestamp with time zone
                timestamptz_eq_date(timestamp with time zone,date): function attributes: strict, cost 1, parallel safe
                    --  implementation of = operator
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in timestamp with time zone
                        #3: in date
                timestamptz_eq_timestamp(timestamp with time zone,timestamp): function attributes: strict, cost 1, parallel safe
                    --  implementation of = operator
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in timestamp with time zone
                        #3: in timestamp
                timestamptz_ge(timestamp with time zone,timestamp with time zone): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of >= operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in timestamp with time zone
                        #3: in timestamp with time zone
                timestamptz_ge_date(timestamp with time zone,date): function attributes: strict, cost 1, parallel safe
                    --  implementation of >= operator
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in timestamp with time zone
                        #3: in date
                timestamptz_ge_timestamp(timestamp with time zone,timestamp): function attributes: strict, cost 1, parallel safe
                    --  implementation of >= operator
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in timestamp with time zone
                        #3: in timestamp
                timestamptz_gt(timestamp with time zone,timestamp with time zone): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of > operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in timestamp with time zone
                        #3: in timestamp with time zone
                timestamptz_gt_date(timestamp with time zone,date): function attributes: strict, cost 1, parallel safe
                    --  implementation of > operator
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in timestamp with time zone
                        #3: in date
                timestamptz_gt_timestamp(timestamp with time zone,timestamp): function attributes: strict, cost 1, parallel safe
                    --  implementation of > operator
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in timestamp with time zone
                        #3: in timestamp
                timestamptz_in(cstring,oid,integer): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return timestamp with time zone
                        #2: in cstring
                        #3: in oid
                        #4: in integer
                timestamptz_larger(timestamp with time zone,timestamp with time zone): function attributes: strict, cost 1, parallel safe
                    --  larger of two
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return timestamp with time zone
                        #2: in timestamp with time zone
                        #3: in timestamp with time zone
                timestamptz_le(timestamp with time zone,timestamp with time zone): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of <= operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in timestamp with time zone
                        #3: in timestamp with time zone
                timestamptz_le_date(timestamp with time zone,date): function attributes: strict, cost 1, parallel safe
                    --  implementation of <= operator
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in timestamp with time zone
                        #3: in date
                timestamptz_le_timestamp(timestamp with time zone,timestamp): function attributes: strict, cost 1, parallel safe
                    --  implementation of <= operator
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in timestamp with time zone
                        #3: in timestamp
                timestamptz_lt(timestamp with time zone,timestamp with time zone): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of < operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in timestamp with time zone
                        #3: in timestamp with time zone
                timestamptz_lt_date(timestamp with time zone,date): function attributes: strict, cost 1, parallel safe
                    --  implementation of < operator
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in timestamp with time zone
                        #3: in date
                timestamptz_lt_timestamp(timestamp with time zone,timestamp): function attributes: strict, cost 1, parallel safe
                    --  implementation of < operator
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in timestamp with time zone
                        #3: in timestamp
                timestamptz_mi(timestamp with time zone,timestamp with time zone): function attributes: strict, cost 1, parallel safe
                    --  implementation of - operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return interval
                        #2: in timestamp with time zone
                        #3: in timestamp with time zone
                timestamptz_mi_interval(timestamp with time zone,interval): function attributes: strict, cost 1, parallel safe
                    --  implementation of - operator
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return timestamp with time zone
                        #2: in timestamp with time zone
                        #3: in interval
                timestamptz_ne(timestamp with time zone,timestamp with time zone): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of <> operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in timestamp with time zone
                        #3: in timestamp with time zone
                timestamptz_ne_date(timestamp with time zone,date): function attributes: strict, cost 1, parallel safe
                    --  implementation of <> operator
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in timestamp with time zone
                        #3: in date
                timestamptz_ne_timestamp(timestamp with time zone,timestamp): function attributes: strict, cost 1, parallel safe
                    --  implementation of <> operator
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in timestamp with time zone
                        #3: in timestamp
                timestamptz_out(timestamp with time zone): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return cstring
                        #2: in timestamp with time zone
                timestamptz_pl_interval(timestamp with time zone,interval): function attributes: strict, cost 1, parallel safe
                    --  implementation of + operator
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return timestamp with time zone
                        #2: in timestamp with time zone
                        #3: in interval
                timestamptz_recv(internal,oid,integer): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return timestamp with time zone
                        #2: in internal
                        #3: in oid
                        #4: in integer
                timestamptz_send(timestamp with time zone): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bytea
                        #2: in timestamp with time zone
                timestamptz_smaller(timestamp with time zone,timestamp with time zone): function attributes: strict, cost 1, parallel safe
                    --  smaller of two
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return timestamp with time zone
                        #2: in timestamp with time zone
                        #3: in timestamp with time zone
                timestamptztypmodin(cstring[]): function attributes: strict, cost 1, parallel safe
                    --  I/O typmod
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return integer
                        #2: in cstring[]
                timestamptztypmodout(integer): function attributes: strict, cost 1, parallel safe
                    --  I/O typmod
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return cstring
                        #2: in integer
                timetypmodin(cstring[]): function attributes: strict, cost 1, parallel safe
                    --  I/O typmod
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return integer
                        #2: in cstring[]
                timetypmodout(integer): function attributes: strict, cost 1, parallel safe
                    --  I/O typmod
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return cstring
                        #2: in integer
                timetz(time with time zone,integer): function attributes: strict, cost 1, parallel safe
                    --  adjust time with time zone precision
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return time with time zone
                        #2: in time with time zone
                        #3: in integer
                timetz(time): function attributes: strict, cost 1, parallel safe
                    --  convert time to time with time zone
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return time with time zone
                        #2: in time
                timetz(timestamp with time zone): function attributes: strict, cost 1, parallel safe
                    --  convert timestamp with time zone to time with time zone
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return time with time zone
                        #2: in timestamp with time zone
                timetz_cmp(time with time zone,time with time zone): function attributes: leakproof, strict, cost 1, parallel safe
                    --  less-equal-greater
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return integer
                        #2: in time with time zone
                        #3: in time with time zone
                timetz_eq(time with time zone,time with time zone): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of = operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in time with time zone
                        #3: in time with time zone
                timetz_ge(time with time zone,time with time zone): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of >= operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in time with time zone
                        #3: in time with time zone
                timetz_gt(time with time zone,time with time zone): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of > operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in time with time zone
                        #3: in time with time zone
                timetz_hash(time with time zone): function attributes: strict, cost 1, parallel safe
                    --  hash
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return integer
                        #2: in time with time zone
                timetz_hash_extended(time with time zone,bigint): function attributes: strict, cost 1, parallel safe
                    --  hash
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bigint
                        #2: in time with time zone
                        #3: in bigint
                timetz_in(cstring,oid,integer): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return time with time zone
                        #2: in cstring
                        #3: in oid
                        #4: in integer
                timetz_larger(time with time zone,time with time zone): function attributes: strict, cost 1, parallel safe
                    --  larger of two
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return time with time zone
                        #2: in time with time zone
                        #3: in time with time zone
                timetz_le(time with time zone,time with time zone): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of <= operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in time with time zone
                        #3: in time with time zone
                timetz_lt(time with time zone,time with time zone): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of < operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in time with time zone
                        #3: in time with time zone
                timetz_mi_interval(time with time zone,interval): function attributes: strict, cost 1, parallel safe
                    --  implementation of - operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return time with time zone
                        #2: in time with time zone
                        #3: in interval
                timetz_ne(time with time zone,time with time zone): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of <> operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in time with time zone
                        #3: in time with time zone
                timetz_out(time with time zone): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return cstring
                        #2: in time with time zone
                timetz_pl_interval(time with time zone,interval): function attributes: strict, cost 1, parallel safe
                    --  implementation of + operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return time with time zone
                        #2: in time with time zone
                        #3: in interval
                timetz_recv(internal,oid,integer): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return time with time zone
                        #2: in internal
                        #3: in oid
                        #4: in integer
                timetz_send(time with time zone): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bytea
                        #2: in time with time zone
                timetz_smaller(time with time zone,time with time zone): function attributes: strict, cost 1, parallel safe
                    --  smaller of two
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return time with time zone
                        #2: in time with time zone
                        #3: in time with time zone
                timetzdate_pl(time with time zone,date): function attributes: strict, cost 1, parallel safe
                    --  implementation of + operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = sql
                    + arguments
                        #1: return timestamp with time zone
                        #2: in time with time zone
                        #3: in date
                timetztypmodin(cstring[]): function attributes: strict, cost 1, parallel safe
                    --  I/O typmod
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return integer
                        #2: in cstring[]
                timetztypmodout(integer): function attributes: strict, cost 1, parallel safe
                    --  I/O typmod
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return cstring
                        #2: in integer
                timezone(interval,time with time zone): function attributes: strict, cost 1, parallel safe
                    --  adjust time with time zone to new zone
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return time with time zone
                        #2: in interval
                        #3: in time with time zone
                timezone(interval,timestamp with time zone): function attributes: strict, cost 1, parallel safe
                    --  adjust timestamp to new time zone
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return timestamp
                        #2: in interval
                        #3: in timestamp with time zone
                timezone(interval,timestamp): function attributes: strict, cost 1, parallel safe
                    --  adjust timestamp to new time zone
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return timestamp with time zone
                        #2: in interval
                        #3: in timestamp
                timezone(text,time with time zone): function attributes: strict, cost 1, parallel safe
                    --  adjust time with time zone to new zone
                    . references
                        language = internal
                    + arguments
                        #1: return time with time zone
                        #2: in text
                        #3: in time with time zone
                timezone(text,timestamp with time zone): function attributes: strict, cost 1, parallel safe
                    --  adjust timestamp to new time zone
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return timestamp
                        #2: in text
                        #3: in timestamp with time zone
                timezone(text,timestamp): function attributes: strict, cost 1, parallel safe
                    --  adjust timestamp to new time zone
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return timestamp with time zone
                        #2: in text
                        #3: in timestamp
                to_ascii(text): function attributes: strict, cost 1, parallel safe
                    --  encode text from DB encoding to ASCII text
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return text
                        #2: in text
                to_ascii(text,integer): function attributes: strict, cost 1, parallel safe
                    --  encode text from encoding to ASCII text
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return text
                        #2: in text
                        #3: in integer
                to_ascii(text,name): function attributes: strict, cost 1, parallel safe
                    --  encode text from encoding to ASCII text
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return text
                        #2: in text
                        #3: in name
                to_char(bigint,text): function attributes: strict, cost 1, parallel safe
                    --  format int8 to text
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return text
                        #2: in bigint
                        #3: in text
                to_char(double precision,text): function attributes: strict, cost 1, parallel safe
                    --  format float8 to text
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return text
                        #2: in double precision
                        #3: in text
                to_char(integer,text): function attributes: strict, cost 1, parallel safe
                    --  format int4 to text
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return text
                        #2: in integer
                        #3: in text
                to_char(interval,text): function attributes: strict, cost 1, parallel safe
                    --  format interval to text
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return text
                        #2: in interval
                        #3: in text
                to_char(numeric,text): function attributes: strict, cost 1, parallel safe
                    --  format numeric to text
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return text
                        #2: in numeric
                        #3: in text
                to_char(real,text): function attributes: strict, cost 1, parallel safe
                    --  format float4 to text
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return text
                        #2: in real
                        #3: in text
                to_char(timestamp with time zone,text): function attributes: strict, cost 1, parallel safe
                    --  format timestamp with time zone to text
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return text
                        #2: in timestamp with time zone
                        #3: in text
                to_char(timestamp,text): function attributes: strict, cost 1, parallel safe
                    --  format timestamp to text
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return text
                        #2: in timestamp
                        #3: in text
                to_date(text,text): function attributes: strict, cost 1, parallel safe
                    --  convert text to date
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return date
                        #2: in text
                        #3: in text
                to_hex(bigint): function attributes: strict, cost 1, parallel safe
                    --  convert int8 number to hex
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return text
                        #2: in bigint
                to_hex(integer): function attributes: strict, cost 1, parallel safe
                    --  convert int4 number to hex
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return text
                        #2: in integer
                to_json(anyelement): function attributes: strict, cost 1, parallel safe
                    --  map input to json
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return json
                        #2: in anyelement
                to_jsonb(anyelement): function attributes: strict, cost 1, parallel safe
                    --  map input to jsonb
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return jsonb
                        #2: in anyelement
                to_number(text,text): function attributes: strict, cost 1, parallel safe
                    --  convert text to numeric
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return numeric
                        #2: in text
                        #3: in text
                to_regclass(text): function attributes: strict, cost 1, parallel safe
                    --  convert classname to regclass
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return regclass
                        #2: in text
                to_regnamespace(text): function attributes: strict, cost 1, parallel safe
                    --  convert namespace name to regnamespace
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return regnamespace
                        #2: in text
                to_regoper(text): function attributes: strict, cost 1, parallel safe
                    --  convert operator name to regoper
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return regoper
                        #2: in text
                to_regoperator(text): function attributes: strict, cost 1, parallel safe
                    --  convert operator name to regoperator
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return regoperator
                        #2: in text
                to_regproc(text): function attributes: strict, cost 1, parallel safe
                    --  convert proname to regproc
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return regproc
                        #2: in text
                to_regprocedure(text): function attributes: strict, cost 1, parallel safe
                    --  convert proname to regprocedure
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return regprocedure
                        #2: in text
                to_regrole(text): function attributes: strict, cost 1, parallel safe
                    --  convert role name to regrole
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return regrole
                        #2: in text
                to_regtype(text): function attributes: strict, cost 1, parallel safe
                    --  convert type name to regtype
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return regtype
                        #2: in text
                to_timestamp(double precision): function attributes: strict, cost 1, parallel safe
                    --  convert UNIX epoch to timestamptz
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return timestamp with time zone
                        #2: in double precision
                to_timestamp(text,text): function attributes: strict, cost 1, parallel safe
                    --  convert text to timestamp with time zone
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return timestamp with time zone
                        #2: in text
                        #3: in text
                to_tsquery(regconfig,text): function attributes: strict, parallel safe
                    --  make tsquery
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return tsquery
                        #2: in regconfig
                        #3: in text
                to_tsquery(text): function attributes: strict, parallel safe
                    --  make tsquery
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return tsquery
                        #2: in text
                to_tsvector(json): function attributes: strict, parallel safe
                    --  transform string values from json to tsvector
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return tsvector
                        #2: in json
                to_tsvector(jsonb): function attributes: strict, parallel safe
                    --  transform string values from jsonb to tsvector
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return tsvector
                        #2: in jsonb
                to_tsvector(regconfig,json): function attributes: strict, parallel safe
                    --  transform string values from json to tsvector
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return tsvector
                        #2: in regconfig
                        #3: in json
                to_tsvector(regconfig,jsonb): function attributes: strict, parallel safe
                    --  transform string values from jsonb to tsvector
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return tsvector
                        #2: in regconfig
                        #3: in jsonb
                to_tsvector(regconfig,text): function attributes: strict, parallel safe
                    --  transform to tsvector
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return tsvector
                        #2: in regconfig
                        #3: in text
                to_tsvector(text): function attributes: strict, parallel safe
                    --  transform to tsvector
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return tsvector
                        #2: in text
                transaction_timestamp(): function attributes: strict, cost 1, parallel safe
                    --  current transaction time
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return timestamp with time zone
                translate(text,text,text): function attributes: strict, cost 1, parallel safe
                    --  map a set of characters appearing in string
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return text
                        #2: in text
                        #3: in text
                        #4: in text
                trigger_in(cstring): trigger function attributes: cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return trigger
                        #2: in cstring
                trigger_out(trigger): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return cstring
                        #2: in trigger
                trunc(double precision): function attributes: strict, cost 1, parallel safe
                    --  truncate to integer
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return double precision
                        #2: in double precision
                trunc(macaddr): function attributes: strict, cost 1, parallel safe
                    --  MACADDR manufacturer fields
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return macaddr
                        #2: in macaddr
                trunc(macaddr8): function attributes: strict, cost 1, parallel safe
                    --  MACADDR8 manufacturer fields
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return macaddr8
                        #2: in macaddr8
                trunc(numeric): function attributes: strict, cost 1, parallel safe
                    --  value truncated to 'scale' of zero
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = sql
                    + arguments
                        #1: return numeric
                        #2: in numeric
                trunc(numeric,integer): function attributes: strict, cost 1, parallel safe
                    --  value truncated to 'scale'
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return numeric
                        #2: in numeric
                        #3: in integer
                ts_debug(regconfig,text): function attributes: strict, parallel safe
                    --  debug function for text search configuration
                    . properties
                        returns_set +
                        volatility_kind = STABLE
                    . references
                        language = sql
                    + arguments
                        #1: return setof record
                        config: in regconfig
                        document: in text
                        alias: out text
                        description: out text
                        token: out text
                        dictionaries: out regdictionary[]
                        dictionary: out regdictionary
                        lexemes: out text[]
                ts_debug(text): function attributes: strict, parallel safe
                    --  debug function for current text search configuration
                    . properties
                        returns_set +
                        volatility_kind = STABLE
                    . references
                        language = sql
                    + arguments
                        #1: return setof record
                        document: in text
                        alias: out text
                        description: out text
                        token: out text
                        dictionaries: out regdictionary[]
                        dictionary: out regdictionary
                        lexemes: out text[]
                ts_delete(tsvector,text): function attributes: strict, cost 1, parallel safe
                    --  delete lexeme
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return tsvector
                        #2: in tsvector
                        #3: in text
                ts_delete(tsvector,text[]): function attributes: strict, cost 1, parallel safe
                    --  delete given lexemes
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return tsvector
                        #2: in tsvector
                        #3: in text[]
                ts_filter(tsvector,"char"[]): function attributes: strict, cost 1, parallel safe
                    --  delete lexemes that do not have one of the given weights
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return tsvector
                        #2: in tsvector
                        #3: in "char"[]
                ts_headline(json,tsquery): function attributes: strict, parallel safe
                    --  generate headline from json
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return json
                        #2: in json
                        #3: in tsquery
                ts_headline(json,tsquery,text): function attributes: strict, parallel safe
                    --  generate headline from json
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return json
                        #2: in json
                        #3: in tsquery
                        #4: in text
                ts_headline(jsonb,tsquery): function attributes: strict, parallel safe
                    --  generate headline from jsonb
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return jsonb
                        #2: in jsonb
                        #3: in tsquery
                ts_headline(jsonb,tsquery,text): function attributes: strict, parallel safe
                    --  generate headline from jsonb
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return jsonb
                        #2: in jsonb
                        #3: in tsquery
                        #4: in text
                ts_headline(regconfig,json,tsquery): function attributes: strict, parallel safe
                    --  generate headline from json
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return json
                        #2: in regconfig
                        #3: in json
                        #4: in tsquery
                ts_headline(regconfig,json,tsquery,text): function attributes: strict, parallel safe
                    --  generate headline from json
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return json
                        #2: in regconfig
                        #3: in json
                        #4: in tsquery
                        #5: in text
                ts_headline(regconfig,jsonb,tsquery): function attributes: strict, parallel safe
                    --  generate headline from jsonb
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return jsonb
                        #2: in regconfig
                        #3: in jsonb
                        #4: in tsquery
                ts_headline(regconfig,jsonb,tsquery,text): function attributes: strict, parallel safe
                    --  generate headline from jsonb
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return jsonb
                        #2: in regconfig
                        #3: in jsonb
                        #4: in tsquery
                        #5: in text
                ts_headline(regconfig,text,tsquery): function attributes: strict, parallel safe
                    --  generate headline
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return text
                        #2: in regconfig
                        #3: in text
                        #4: in tsquery
                ts_headline(regconfig,text,tsquery,text): function attributes: strict, parallel safe
                    --  generate headline
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return text
                        #2: in regconfig
                        #3: in text
                        #4: in tsquery
                        #5: in text
                ts_headline(text,tsquery): function attributes: strict, parallel safe
                    --  generate headline
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return text
                        #2: in text
                        #3: in tsquery
                ts_headline(text,tsquery,text): function attributes: strict, parallel safe
                    --  generate headline
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return text
                        #2: in text
                        #3: in tsquery
                        #4: in text
                ts_lexize(regdictionary,text): function attributes: strict, cost 1, parallel safe
                    --  normalize one word by dictionary
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return text[]
                        #2: in regdictionary
                        #3: in text
                ts_match_qv(tsquery,tsvector): function attributes: strict, cost 1, parallel safe
                    --  implementation of @@ operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in tsquery
                        #3: in tsvector
                ts_match_tq(text,tsquery): function attributes: strict, parallel safe
                    --  implementation of @@ operator
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in text
                        #3: in tsquery
                ts_match_tt(text,text): function attributes: strict, parallel safe
                    --  implementation of @@ operator
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in text
                        #3: in text
                ts_match_vq(tsvector,tsquery): function attributes: strict, cost 1, parallel safe
                    --  implementation of @@ operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in tsvector
                        #3: in tsquery
                ts_parse(oid,text): function attributes: strict, cost 1, parallel safe
                    --  parse text to tokens
                    . properties
                        returns_set +
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return setof record
                        parser_oid: in oid
                        txt: in text
                        tokid: out integer
                        token: out text
                ts_parse(text,text): function attributes: strict, cost 1, parallel safe
                    --  parse text to tokens
                    . properties
                        returns_set +
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return setof record
                        parser_name: in text
                        txt: in text
                        tokid: out integer
                        token: out text
                ts_rank(real[],tsvector,tsquery): function attributes: strict, cost 1, parallel safe
                    --  relevance
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return real
                        #2: in real[]
                        #3: in tsvector
                        #4: in tsquery
                ts_rank(real[],tsvector,tsquery,integer): function attributes: strict, cost 1, parallel safe
                    --  relevance
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return real
                        #2: in real[]
                        #3: in tsvector
                        #4: in tsquery
                        #5: in integer
                ts_rank(tsvector,tsquery): function attributes: strict, cost 1, parallel safe
                    --  relevance
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return real
                        #2: in tsvector
                        #3: in tsquery
                ts_rank(tsvector,tsquery,integer): function attributes: strict, cost 1, parallel safe
                    --  relevance
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return real
                        #2: in tsvector
                        #3: in tsquery
                        #4: in integer
                ts_rank_cd(real[],tsvector,tsquery): function attributes: strict, cost 1, parallel safe
                    --  relevance
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return real
                        #2: in real[]
                        #3: in tsvector
                        #4: in tsquery
                ts_rank_cd(real[],tsvector,tsquery,integer): function attributes: strict, cost 1, parallel safe
                    --  relevance
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return real
                        #2: in real[]
                        #3: in tsvector
                        #4: in tsquery
                        #5: in integer
                ts_rank_cd(tsvector,tsquery): function attributes: strict, cost 1, parallel safe
                    --  relevance
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return real
                        #2: in tsvector
                        #3: in tsquery
                ts_rank_cd(tsvector,tsquery,integer): function attributes: strict, cost 1, parallel safe
                    --  relevance
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return real
                        #2: in tsvector
                        #3: in tsquery
                        #4: in integer
                ts_rewrite(tsquery,text): function attributes: strict
                    --  rewrite tsquery
                    . references
                        language = internal
                    + arguments
                        #1: return tsquery
                        #2: in tsquery
                        #3: in text
                ts_rewrite(tsquery,tsquery,tsquery): function attributes: strict, cost 1, parallel safe
                    --  rewrite tsquery
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return tsquery
                        #2: in tsquery
                        #3: in tsquery
                        #4: in tsquery
                ts_stat(text): function attributes: strict, cost 10, rows 10000
                    --  statistics of tsvector column
                    . properties
                        returns_set +
                    . references
                        language = internal
                    + arguments
                        #1: return setof record
                        query: in text
                        word: out text
                        ndoc: out integer
                        nentry: out integer
                ts_stat(text,text): function attributes: strict, cost 10, rows 10000
                    --  statistics of tsvector column
                    . properties
                        returns_set +
                    . references
                        language = internal
                    + arguments
                        #1: return setof record
                        query: in text
                        weights: in text
                        word: out text
                        ndoc: out integer
                        nentry: out integer
                ts_token_type(oid): function attributes: strict, cost 1, parallel safe, rows 16
                    --  get parser's token types
                    . properties
                        returns_set +
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return setof record
                        parser_oid: in oid
                        tokid: out integer
                        alias: out text
                        description: out text
                ts_token_type(text): function attributes: strict, cost 1, parallel safe, rows 16
                    --  get parser's token types
                    . properties
                        returns_set +
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return setof record
                        parser_name: in text
                        tokid: out integer
                        alias: out text
                        description: out text
                ts_typanalyze(internal): function attributes: strict, cost 1, parallel safe
                    --  tsvector typanalyze
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in internal
                tsm_handler_in(cstring): function attributes: cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return tsm_handler
                        #2: in cstring
                tsm_handler_out(tsm_handler): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return cstring
                        #2: in tsm_handler
                tsmatchjoinsel(internal,oid,internal,smallint,internal): function attributes: strict, cost 1, parallel safe
                    --  join selectivity of tsvector @@ tsquery
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return double precision
                        #2: in internal
                        #3: in oid
                        #4: in internal
                        #5: in smallint
                        #6: in internal
                tsmatchsel(internal,oid,internal,integer): function attributes: strict, cost 1, parallel safe
                    --  restriction selectivity of tsvector @@ tsquery
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return double precision
                        #2: in internal
                        #3: in oid
                        #4: in internal
                        #5: in integer
                tsq_mcontained(tsquery,tsquery): function attributes: strict, cost 1, parallel safe
                    --  implementation of <@ operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in tsquery
                        #3: in tsquery
                tsq_mcontains(tsquery,tsquery): function attributes: strict, cost 1, parallel safe
                    --  implementation of @> operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in tsquery
                        #3: in tsquery
                tsquery_and(tsquery,tsquery): function attributes: strict, cost 1, parallel safe
                    --  implementation of && operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return tsquery
                        #2: in tsquery
                        #3: in tsquery
                tsquery_cmp(tsquery,tsquery): function attributes: strict, cost 1, parallel safe
                    --  less-equal-greater
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return integer
                        #2: in tsquery
                        #3: in tsquery
                tsquery_eq(tsquery,tsquery): function attributes: strict, cost 1, parallel safe
                    --  implementation of = operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in tsquery
                        #3: in tsquery
                tsquery_ge(tsquery,tsquery): function attributes: strict, cost 1, parallel safe
                    --  implementation of >= operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in tsquery
                        #3: in tsquery
                tsquery_gt(tsquery,tsquery): function attributes: strict, cost 1, parallel safe
                    --  implementation of > operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in tsquery
                        #3: in tsquery
                tsquery_le(tsquery,tsquery): function attributes: strict, cost 1, parallel safe
                    --  implementation of <= operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in tsquery
                        #3: in tsquery
                tsquery_lt(tsquery,tsquery): function attributes: strict, cost 1, parallel safe
                    --  implementation of < operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in tsquery
                        #3: in tsquery
                tsquery_ne(tsquery,tsquery): function attributes: strict, cost 1, parallel safe
                    --  implementation of <> operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in tsquery
                        #3: in tsquery
                tsquery_not(tsquery): function attributes: strict, cost 1, parallel safe
                    --  implementation of !! operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return tsquery
                        #2: in tsquery
                tsquery_or(tsquery,tsquery): function attributes: strict, cost 1, parallel safe
                    --  implementation of || operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return tsquery
                        #2: in tsquery
                        #3: in tsquery
                tsquery_phrase(tsquery,tsquery): function attributes: strict, cost 1, parallel safe
                    --  implementation of <-> operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return tsquery
                        #2: in tsquery
                        #3: in tsquery
                tsquery_phrase(tsquery,tsquery,integer): function attributes: strict, cost 1, parallel safe
                    --  phrase-concatenate with distance
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return tsquery
                        #2: in tsquery
                        #3: in tsquery
                        #4: in integer
                tsqueryin(cstring): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return tsquery
                        #2: in cstring
                tsqueryout(tsquery): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return cstring
                        #2: in tsquery
                tsqueryrecv(internal): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return tsquery
                        #2: in internal
                tsquerysend(tsquery): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bytea
                        #2: in tsquery
                tsrange(timestamp,timestamp): function attributes: cost 1, parallel safe
                    --  tsrange constructor
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return tsrange
                        #2: in timestamp
                        #3: in timestamp
                tsrange(timestamp,timestamp,text): function attributes: cost 1, parallel safe
                    --  tsrange constructor
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return tsrange
                        #2: in timestamp
                        #3: in timestamp
                        #4: in text
                tsrange_subdiff(timestamp,timestamp): function attributes: strict, cost 1, parallel safe
                    --  float8 difference of two timestamp values
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return double precision
                        #2: in timestamp
                        #3: in timestamp
                tstzrange(timestamp with time zone,timestamp with time zone): function attributes: cost 1, parallel safe
                    --  tstzrange constructor
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return tstzrange
                        #2: in timestamp with time zone
                        #3: in timestamp with time zone
                tstzrange(timestamp with time zone,timestamp with time zone,text): function attributes: cost 1, parallel safe
                    --  tstzrange constructor
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return tstzrange
                        #2: in timestamp with time zone
                        #3: in timestamp with time zone
                        #4: in text
                tstzrange_subdiff(timestamp with time zone,timestamp with time zone): function attributes: strict, cost 1, parallel safe
                    --  float8 difference of two timestamp with time zone values
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return double precision
                        #2: in timestamp with time zone
                        #3: in timestamp with time zone
                tsvector_cmp(tsvector,tsvector): function attributes: strict, cost 1, parallel safe
                    --  less-equal-greater
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return integer
                        #2: in tsvector
                        #3: in tsvector
                tsvector_concat(tsvector,tsvector): function attributes: strict, cost 1, parallel safe
                    --  implementation of || operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return tsvector
                        #2: in tsvector
                        #3: in tsvector
                tsvector_eq(tsvector,tsvector): function attributes: strict, cost 1, parallel safe
                    --  implementation of = operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in tsvector
                        #3: in tsvector
                tsvector_ge(tsvector,tsvector): function attributes: strict, cost 1, parallel safe
                    --  implementation of >= operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in tsvector
                        #3: in tsvector
                tsvector_gt(tsvector,tsvector): function attributes: strict, cost 1, parallel safe
                    --  implementation of > operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in tsvector
                        #3: in tsvector
                tsvector_le(tsvector,tsvector): function attributes: strict, cost 1, parallel safe
                    --  implementation of <= operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in tsvector
                        #3: in tsvector
                tsvector_lt(tsvector,tsvector): function attributes: strict, cost 1, parallel safe
                    --  implementation of < operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in tsvector
                        #3: in tsvector
                tsvector_ne(tsvector,tsvector): function attributes: strict, cost 1, parallel safe
                    --  implementation of <> operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in tsvector
                        #3: in tsvector
                tsvector_to_array(tsvector): function attributes: strict, cost 1, parallel safe
                    --  convert tsvector to array of lexemes
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return text[]
                        #2: in tsvector
                tsvector_update_trigger(): trigger function attributes: cost 1, parallel safe
                    --  trigger for automatic update of tsvector column
                    . references
                        language = internal
                    + arguments
                        #1: return trigger
                tsvector_update_trigger_column(): trigger function attributes: cost 1, parallel safe
                    --  trigger for automatic update of tsvector column
                    . references
                        language = internal
                    + arguments
                        #1: return trigger
                tsvectorin(cstring): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return tsvector
                        #2: in cstring
                tsvectorout(tsvector): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return cstring
                        #2: in tsvector
                tsvectorrecv(internal): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return tsvector
                        #2: in internal
                tsvectorsend(tsvector): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bytea
                        #2: in tsvector
                txid_current(): function attributes: strict, cost 1
                    --  get current transaction ID
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bigint
                txid_current_if_assigned(): function attributes: strict, cost 1
                    --  get current transaction ID
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bigint
                txid_current_snapshot(): function attributes: strict, cost 1, parallel safe
                    --  get current snapshot
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return txid_snapshot
                txid_snapshot_in(cstring): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return txid_snapshot
                        #2: in cstring
                txid_snapshot_out(txid_snapshot): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return cstring
                        #2: in txid_snapshot
                txid_snapshot_recv(internal): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return txid_snapshot
                        #2: in internal
                txid_snapshot_send(txid_snapshot): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bytea
                        #2: in txid_snapshot
                txid_snapshot_xip(txid_snapshot): function attributes: strict, cost 1, parallel safe, rows 50
                    --  get set of in-progress txids in snapshot
                    . properties
                        returns_set +
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return setof bigint
                        #2: in txid_snapshot
                txid_snapshot_xmax(txid_snapshot): function attributes: strict, cost 1, parallel safe
                    --  get xmax of snapshot
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bigint
                        #2: in txid_snapshot
                txid_snapshot_xmin(txid_snapshot): function attributes: strict, cost 1, parallel safe
                    --  get xmin of snapshot
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bigint
                        #2: in txid_snapshot
                txid_status(bigint): function attributes: strict, cost 1, parallel safe
                    --  commit status of transaction
                    . references
                        language = internal
                    + arguments
                        #1: return text
                        #2: in bigint
                txid_visible_in_snapshot(bigint,txid_snapshot): function attributes: strict, cost 1, parallel safe
                    --  is txid visible in snapshot?
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in bigint
                        #3: in txid_snapshot
                uhc_to_utf8(integer,integer,cstring,internal,integer): function attributes: strict, parallel safe
                    --  internal conversion function for UHC to UTF8
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = c
                    + arguments
                        #1: return void
                        #2: in integer
                        #3: in integer
                        #4: in cstring
                        #5: in internal
                        #6: in integer
                unique_key_recheck(): trigger function attributes: strict, cost 1, parallel safe
                    --  deferred UNIQUE constraint check
                    . references
                        language = internal
                    + arguments
                        #1: return trigger
                unknownin(cstring): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return unknown
                        #2: in cstring
                unknownout(unknown): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return cstring
                        #2: in unknown
                unknownrecv(internal): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return unknown
                        #2: in internal
                unknownsend(unknown): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bytea
                        #2: in unknown
                unnest(anyarray): function attributes: strict, cost 1, parallel safe, rows 100
                    --  expand array to set of rows
                    . properties
                        returns_set +
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return setof anyelement
                        #2: in anyarray
                unnest(tsvector): function attributes: strict, cost 1, parallel safe, rows 10
                    --  expand tsvector to set of rows
                    . properties
                        returns_set +
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return setof record
                        tsvector: in tsvector
                        lexeme: out text
                        positions: out smallint[]
                        weights: out text[]
                upper(anyrange): function attributes: strict, cost 1, parallel safe
                    --  upper bound of range
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return anyelement
                        #2: in anyrange
                upper(text): function attributes: strict, cost 1, parallel safe
                    --  uppercase
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return text
                        #2: in text
                upper_inc(anyrange): function attributes: strict, cost 1, parallel safe
                    --  is the range's upper bound inclusive?
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in anyrange
                upper_inf(anyrange): function attributes: strict, cost 1, parallel safe
                    --  is the range's upper bound infinite?
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in anyrange
                utf8_to_ascii(integer,integer,cstring,internal,integer): function attributes: strict, parallel safe
                    --  internal conversion function for UTF8 to SQL_ASCII
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = c
                    + arguments
                        #1: return void
                        #2: in integer
                        #3: in integer
                        #4: in cstring
                        #5: in internal
                        #6: in integer
                utf8_to_big5(integer,integer,cstring,internal,integer): function attributes: strict, parallel safe
                    --  internal conversion function for UTF8 to BIG5
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = c
                    + arguments
                        #1: return void
                        #2: in integer
                        #3: in integer
                        #4: in cstring
                        #5: in internal
                        #6: in integer
                utf8_to_euc_cn(integer,integer,cstring,internal,integer): function attributes: strict, parallel safe
                    --  internal conversion function for UTF8 to EUC_CN
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = c
                    + arguments
                        #1: return void
                        #2: in integer
                        #3: in integer
                        #4: in cstring
                        #5: in internal
                        #6: in integer
                utf8_to_euc_jis_2004(integer,integer,cstring,internal,integer): function attributes: strict, parallel safe
                    --  internal conversion function for UTF8 to EUC_JIS_2004
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = c
                    + arguments
                        #1: return void
                        #2: in integer
                        #3: in integer
                        #4: in cstring
                        #5: in internal
                        #6: in integer
                utf8_to_euc_jp(integer,integer,cstring,internal,integer): function attributes: strict, parallel safe
                    --  internal conversion function for UTF8 to EUC_JP
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = c
                    + arguments
                        #1: return void
                        #2: in integer
                        #3: in integer
                        #4: in cstring
                        #5: in internal
                        #6: in integer
                utf8_to_euc_kr(integer,integer,cstring,internal,integer): function attributes: strict, parallel safe
                    --  internal conversion function for UTF8 to EUC_KR
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = c
                    + arguments
                        #1: return void
                        #2: in integer
                        #3: in integer
                        #4: in cstring
                        #5: in internal
                        #6: in integer
                utf8_to_euc_tw(integer,integer,cstring,internal,integer): function attributes: strict, parallel safe
                    --  internal conversion function for UTF8 to EUC_TW
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = c
                    + arguments
                        #1: return void
                        #2: in integer
                        #3: in integer
                        #4: in cstring
                        #5: in internal
                        #6: in integer
                utf8_to_gb18030(integer,integer,cstring,internal,integer): function attributes: strict, parallel safe
                    --  internal conversion function for UTF8 to GB18030
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = c
                    + arguments
                        #1: return void
                        #2: in integer
                        #3: in integer
                        #4: in cstring
                        #5: in internal
                        #6: in integer
                utf8_to_gbk(integer,integer,cstring,internal,integer): function attributes: strict, parallel safe
                    --  internal conversion function for UTF8 to GBK
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = c
                    + arguments
                        #1: return void
                        #2: in integer
                        #3: in integer
                        #4: in cstring
                        #5: in internal
                        #6: in integer
                utf8_to_iso8859(integer,integer,cstring,internal,integer): function attributes: strict, parallel safe
                    --  internal conversion function for UTF8 to ISO-8859 2-16
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = c
                    + arguments
                        #1: return void
                        #2: in integer
                        #3: in integer
                        #4: in cstring
                        #5: in internal
                        #6: in integer
                utf8_to_iso8859_1(integer,integer,cstring,internal,integer): function attributes: strict, parallel safe
                    --  internal conversion function for UTF8 to LATIN1
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = c
                    + arguments
                        #1: return void
                        #2: in integer
                        #3: in integer
                        #4: in cstring
                        #5: in internal
                        #6: in integer
                utf8_to_johab(integer,integer,cstring,internal,integer): function attributes: strict, parallel safe
                    --  internal conversion function for UTF8 to JOHAB
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = c
                    + arguments
                        #1: return void
                        #2: in integer
                        #3: in integer
                        #4: in cstring
                        #5: in internal
                        #6: in integer
                utf8_to_koi8r(integer,integer,cstring,internal,integer): function attributes: strict, parallel safe
                    --  internal conversion function for UTF8 to KOI8R
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = c
                    + arguments
                        #1: return void
                        #2: in integer
                        #3: in integer
                        #4: in cstring
                        #5: in internal
                        #6: in integer
                utf8_to_koi8u(integer,integer,cstring,internal,integer): function attributes: strict, parallel safe
                    --  internal conversion function for UTF8 to KOI8U
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = c
                    + arguments
                        #1: return void
                        #2: in integer
                        #3: in integer
                        #4: in cstring
                        #5: in internal
                        #6: in integer
                utf8_to_shift_jis_2004(integer,integer,cstring,internal,integer): function attributes: strict, parallel safe
                    --  internal conversion function for UTF8 to SHIFT_JIS_2004
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = c
                    + arguments
                        #1: return void
                        #2: in integer
                        #3: in integer
                        #4: in cstring
                        #5: in internal
                        #6: in integer
                utf8_to_sjis(integer,integer,cstring,internal,integer): function attributes: strict, parallel safe
                    --  internal conversion function for UTF8 to SJIS
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = c
                    + arguments
                        #1: return void
                        #2: in integer
                        #3: in integer
                        #4: in cstring
                        #5: in internal
                        #6: in integer
                utf8_to_uhc(integer,integer,cstring,internal,integer): function attributes: strict, parallel safe
                    --  internal conversion function for UTF8 to UHC
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = c
                    + arguments
                        #1: return void
                        #2: in integer
                        #3: in integer
                        #4: in cstring
                        #5: in internal
                        #6: in integer
                utf8_to_win(integer,integer,cstring,internal,integer): function attributes: strict, parallel safe
                    --  internal conversion function for UTF8 to WIN
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = c
                    + arguments
                        #1: return void
                        #2: in integer
                        #3: in integer
                        #4: in cstring
                        #5: in internal
                        #6: in integer
                uuid_cmp(uuid,uuid): function attributes: leakproof, strict, cost 1, parallel safe
                    --  less-equal-greater
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return integer
                        #2: in uuid
                        #3: in uuid
                uuid_eq(uuid,uuid): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of = operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in uuid
                        #3: in uuid
                uuid_ge(uuid,uuid): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of >= operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in uuid
                        #3: in uuid
                uuid_gt(uuid,uuid): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of > operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in uuid
                        #3: in uuid
                uuid_hash(uuid): function attributes: strict, cost 1, parallel safe
                    --  hash
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return integer
                        #2: in uuid
                uuid_hash_extended(uuid,bigint): function attributes: strict, cost 1, parallel safe
                    --  hash
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bigint
                        #2: in uuid
                        #3: in bigint
                uuid_in(cstring): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return uuid
                        #2: in cstring
                uuid_le(uuid,uuid): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of <= operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in uuid
                        #3: in uuid
                uuid_lt(uuid,uuid): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of < operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in uuid
                        #3: in uuid
                uuid_ne(uuid,uuid): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of <> operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in uuid
                        #3: in uuid
                uuid_out(uuid): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return cstring
                        #2: in uuid
                uuid_recv(internal): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return uuid
                        #2: in internal
                uuid_send(uuid): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bytea
                        #2: in uuid
                uuid_sortsupport(internal): function attributes: strict, cost 1, parallel safe
                    --  sort support
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return void
                        #2: in internal
                varbit(bit varying,integer,boolean): function attributes: strict, cost 1, parallel safe
                    --  adjust varbit() to typmod length
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bit varying
                        #2: in bit varying
                        #3: in integer
                        #4: in boolean
                varbit_in(cstring,oid,integer): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bit varying
                        #2: in cstring
                        #3: in oid
                        #4: in integer
                varbit_out(bit varying): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return cstring
                        #2: in bit varying
                varbit_recv(internal,oid,integer): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bit varying
                        #2: in internal
                        #3: in oid
                        #4: in integer
                varbit_send(bit varying): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bytea
                        #2: in bit varying
                varbit_support(internal): function attributes: strict, cost 1, parallel safe
                    --  planner support for varbit length coercion
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return internal
                        #2: in internal
                varbitcmp(bit varying,bit varying): function attributes: leakproof, strict, cost 1, parallel safe
                    --  less-equal-greater
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return integer
                        #2: in bit varying
                        #3: in bit varying
                varbiteq(bit varying,bit varying): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of = operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in bit varying
                        #3: in bit varying
                varbitge(bit varying,bit varying): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of >= operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in bit varying
                        #3: in bit varying
                varbitgt(bit varying,bit varying): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of > operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in bit varying
                        #3: in bit varying
                varbitle(bit varying,bit varying): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of <= operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in bit varying
                        #3: in bit varying
                varbitlt(bit varying,bit varying): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of < operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in bit varying
                        #3: in bit varying
                varbitne(bit varying,bit varying): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of <> operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in bit varying
                        #3: in bit varying
                varbittypmodin(cstring[]): function attributes: strict, cost 1, parallel safe
                    --  I/O typmod
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return integer
                        #2: in cstring[]
                varbittypmodout(integer): function attributes: strict, cost 1, parallel safe
                    --  I/O typmod
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return cstring
                        #2: in integer
                varchar(name): function attributes: strict, cost 1, parallel safe
                    --  convert name to varchar
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return varchar
                        #2: in name
                varchar(varchar,integer,boolean): function attributes: strict, cost 1, parallel safe
                    --  adjust varchar() to typmod length
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return varchar
                        #2: in varchar
                        #3: in integer
                        #4: in boolean
                varchar_support(internal): function attributes: strict, cost 1, parallel safe
                    --  planner support for varchar length coercion
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return internal
                        #2: in internal
                varcharin(cstring,oid,integer): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return varchar
                        #2: in cstring
                        #3: in oid
                        #4: in integer
                varcharout(varchar): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return cstring
                        #2: in varchar
                varcharrecv(internal,oid,integer): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return varchar
                        #2: in internal
                        #3: in oid
                        #4: in integer
                varcharsend(varchar): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bytea
                        #2: in varchar
                varchartypmodin(cstring[]): function attributes: strict, cost 1, parallel safe
                    --  I/O typmod
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return integer
                        #2: in cstring[]
                varchartypmodout(integer): function attributes: strict, cost 1, parallel safe
                    --  I/O typmod
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return cstring
                        #2: in integer
                version(): function attributes: strict, cost 1, parallel safe
                    --  PostgreSQL version string
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return text
                void_in(cstring): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return void
                        #2: in cstring
                void_out(void): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return cstring
                        #2: in void
                void_recv(internal): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return void
                        #2: in internal
                void_send(void): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bytea
                        #2: in void
                websearch_to_tsquery(regconfig,text): function attributes: strict, parallel safe
                    --  transform to tsquery
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return tsquery
                        #2: in regconfig
                        #3: in text
                websearch_to_tsquery(text): function attributes: strict, parallel safe
                    --  transform to tsquery
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return tsquery
                        #2: in text
                width(box): function attributes: strict, cost 1, parallel safe
                    --  box width
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return double precision
                        #2: in box
                width_bucket(anyelement,anyarray): function attributes: strict, cost 1, parallel safe
                    --  bucket number of operand given a sorted array of bucket lower bounds
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return integer
                        #2: in anyelement
                        #3: in anyarray
                width_bucket(double precision,double precision,double precision,integer): function attributes: strict, cost 1, parallel safe
                    --  bucket number of operand in equal-width histogram
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return integer
                        #2: in double precision
                        #3: in double precision
                        #4: in double precision
                        #5: in integer
                width_bucket(numeric,numeric,numeric,integer): function attributes: strict, cost 1, parallel safe
                    --  bucket number of operand in equal-width histogram
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return integer
                        #2: in numeric
                        #3: in numeric
                        #4: in numeric
                        #5: in integer
                win1250_to_latin2(integer,integer,cstring,internal,integer): function attributes: strict, parallel safe
                    --  internal conversion function for WIN1250 to LATIN2
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = c
                    + arguments
                        #1: return void
                        #2: in integer
                        #3: in integer
                        #4: in cstring
                        #5: in internal
                        #6: in integer
                win1250_to_mic(integer,integer,cstring,internal,integer): function attributes: strict, parallel safe
                    --  internal conversion function for WIN1250 to MULE_INTERNAL
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = c
                    + arguments
                        #1: return void
                        #2: in integer
                        #3: in integer
                        #4: in cstring
                        #5: in internal
                        #6: in integer
                win1251_to_iso(integer,integer,cstring,internal,integer): function attributes: strict, parallel safe
                    --  internal conversion function for WIN1251 to ISO-8859-5
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = c
                    + arguments
                        #1: return void
                        #2: in integer
                        #3: in integer
                        #4: in cstring
                        #5: in internal
                        #6: in integer
                win1251_to_koi8r(integer,integer,cstring,internal,integer): function attributes: strict, parallel safe
                    --  internal conversion function for WIN1251 to KOI8R
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = c
                    + arguments
                        #1: return void
                        #2: in integer
                        #3: in integer
                        #4: in cstring
                        #5: in internal
                        #6: in integer
                win1251_to_mic(integer,integer,cstring,internal,integer): function attributes: strict, parallel safe
                    --  internal conversion function for WIN1251 to MULE_INTERNAL
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = c
                    + arguments
                        #1: return void
                        #2: in integer
                        #3: in integer
                        #4: in cstring
                        #5: in internal
                        #6: in integer
                win1251_to_win866(integer,integer,cstring,internal,integer): function attributes: strict, parallel safe
                    --  internal conversion function for WIN1251 to WIN866
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = c
                    + arguments
                        #1: return void
                        #2: in integer
                        #3: in integer
                        #4: in cstring
                        #5: in internal
                        #6: in integer
                win866_to_iso(integer,integer,cstring,internal,integer): function attributes: strict, parallel safe
                    --  internal conversion function for WIN866 to ISO-8859-5
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = c
                    + arguments
                        #1: return void
                        #2: in integer
                        #3: in integer
                        #4: in cstring
                        #5: in internal
                        #6: in integer
                win866_to_koi8r(integer,integer,cstring,internal,integer): function attributes: strict, parallel safe
                    --  internal conversion function for WIN866 to KOI8R
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = c
                    + arguments
                        #1: return void
                        #2: in integer
                        #3: in integer
                        #4: in cstring
                        #5: in internal
                        #6: in integer
                win866_to_mic(integer,integer,cstring,internal,integer): function attributes: strict, parallel safe
                    --  internal conversion function for WIN866 to MULE_INTERNAL
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = c
                    + arguments
                        #1: return void
                        #2: in integer
                        #3: in integer
                        #4: in cstring
                        #5: in internal
                        #6: in integer
                win866_to_win1251(integer,integer,cstring,internal,integer): function attributes: strict, parallel safe
                    --  internal conversion function for WIN866 to WIN1251
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = c
                    + arguments
                        #1: return void
                        #2: in integer
                        #3: in integer
                        #4: in cstring
                        #5: in internal
                        #6: in integer
                win_to_utf8(integer,integer,cstring,internal,integer): function attributes: strict, parallel safe
                    --  internal conversion function for WIN to UTF8
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = c
                    + arguments
                        #1: return void
                        #2: in integer
                        #3: in integer
                        #4: in cstring
                        #5: in internal
                        #6: in integer
                xideq(xid,xid): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of = operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in xid
                        #3: in xid
                xideqint4(xid,integer): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of = operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in xid
                        #3: in integer
                xidin(cstring): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return xid
                        #2: in cstring
                xidneq(xid,xid): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of <> operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in xid
                        #3: in xid
                xidneqint4(xid,integer): function attributes: leakproof, strict, cost 1, parallel safe
                    --  implementation of <> operator
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in xid
                        #3: in integer
                xidout(xid): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return cstring
                        #2: in xid
                xidrecv(internal): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return xid
                        #2: in internal
                xidsend(xid): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bytea
                        #2: in xid
                xml(text): function attributes: strict, cost 1, parallel safe
                    --  perform a non-validating parse of a character string to produce an XML value
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return xml
                        #2: in text
                xml_in(cstring): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return xml
                        #2: in cstring
                xml_is_well_formed(text): function attributes: strict, cost 1, parallel safe
                    --  determine if a string is well formed XML
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in text
                xml_is_well_formed_content(text): function attributes: strict, cost 1, parallel safe
                    --  determine if a string is well formed XML content
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in text
                xml_is_well_formed_document(text): function attributes: strict, cost 1, parallel safe
                    --  determine if a string is well formed XML document
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in text
                xml_out(xml): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return cstring
                        #2: in xml
                xml_recv(internal): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return xml
                        #2: in internal
                xml_send(xml): function attributes: strict, cost 1, parallel safe
                    --  I/O
                    . properties
                        volatility_kind = STABLE
                    . references
                        language = internal
                    + arguments
                        #1: return bytea
                        #2: in xml
                xmlcomment(text): function attributes: strict, cost 1, parallel safe
                    --  generate XML comment
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return xml
                        #2: in text
                xmlconcat2(xml,xml): function attributes: cost 1, parallel safe
                    --  aggregate transition function
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return xml
                        #2: in xml
                        #3: in xml
                xmlexists(text,xml): function attributes: strict, cost 1, parallel safe
                    --  test XML value against XPath expression
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in text
                        #3: in xml
                xmlvalidate(xml,text): function attributes: strict, cost 1, parallel safe
                    --  validate an XML value
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in xml
                        #3: in text
                xpath(text,xml): function attributes: strict, cost 1, parallel safe
                    --  evaluate XPath expression
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = sql
                    + arguments
                        #1: return xml[]
                        #2: in text
                        #3: in xml
                xpath(text,xml,text[]): function attributes: strict, cost 1, parallel safe
                    --  evaluate XPath expression, with namespaces support
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return xml[]
                        #2: in text
                        #3: in xml
                        #4: in text[]
                xpath_exists(text,xml): function attributes: strict, cost 1, parallel safe
                    --  test XML value against XPath expression
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = sql
                    + arguments
                        #1: return boolean
                        #2: in text
                        #3: in xml
                xpath_exists(text,xml,text[]): function attributes: strict, cost 1, parallel safe
                    --  test XML value against XPath expression, with namespace support
                    . properties
                        volatility_kind = IMMUTABLE
                    . references
                        language = internal
                    + arguments
                        #1: return boolean
                        #2: in text
                        #3: in xml
                        #4: in text[]
            + operators
                !!(unknown,bigint): prefix operator (bigint) -> numeric [bound to public.numeric_fac]
                    --  deprecated, use ! instead
                !!(unknown,tsquery): prefix operator (tsquery) -> tsquery [bound to public.tsquery_not]
                    --  NOT tsquery
                !(bigint,unknown): postfix operator (bigint) -> numeric [bound to public.numeric_fac]
                    --  factorial
                !~(char,text): binary operator (char, text) -> boolean [bound to public.bpcharregexne]
                    --  does not match regular expression, case-sensitive
                    . references
                        join_routine = public.regexnejoinsel
                        negate_operator = ~
                        restrict_routine = public.regexnesel
                !~(name,text): binary operator (name, text) -> boolean [bound to public.nameregexne]
                    --  does not match regular expression, case-sensitive
                    . references
                        join_routine = public.regexnejoinsel
                        negate_operator = ~
                        restrict_routine = public.regexnesel
                !~(text,text): binary operator (text, text) -> boolean [bound to public.textregexne]
                    --  does not match regular expression, case-sensitive
                    . references
                        join_routine = public.regexnejoinsel
                        negate_operator = ~
                        restrict_routine = public.regexnesel
                !~*(char,text): binary operator (char, text) -> boolean [bound to public.bpcharicregexne]
                    --  does not match regular expression, case-insensitive
                    . references
                        join_routine = public.icregexnejoinsel
                        negate_operator = ~*
                        restrict_routine = public.icregexnesel
                !~*(name,text): binary operator (name, text) -> boolean [bound to public.nameicregexne]
                    --  does not match regular expression, case-insensitive
                    . references
                        join_routine = public.icregexnejoinsel
                        negate_operator = ~*
                        restrict_routine = public.icregexnesel
                !~*(text,text): binary operator (text, text) -> boolean [bound to public.texticregexne]
                    --  does not match regular expression, case-insensitive
                    . references
                        join_routine = public.icregexnejoinsel
                        negate_operator = ~*
                        restrict_routine = public.icregexnesel
                !~~(bytea,bytea): binary operator (bytea, bytea) -> boolean [bound to public.byteanlike]
                    --  does not match LIKE expression
                    . references
                        join_routine = public.nlikejoinsel
                        negate_operator = ~~
                        restrict_routine = public.nlikesel
                !~~(char,text): binary operator (char, text) -> boolean [bound to public.bpcharnlike]
                    --  does not match LIKE expression
                    . references
                        join_routine = public.nlikejoinsel
                        negate_operator = ~~
                        restrict_routine = public.nlikesel
                !~~(name,text): binary operator (name, text) -> boolean [bound to public.namenlike]
                    --  does not match LIKE expression
                    . references
                        join_routine = public.nlikejoinsel
                        negate_operator = ~~
                        restrict_routine = public.nlikesel
                !~~(text,text): binary operator (text, text) -> boolean [bound to public.textnlike]
                    --  does not match LIKE expression
                    . references
                        join_routine = public.nlikejoinsel
                        negate_operator = ~~
                        restrict_routine = public.nlikesel
                !~~*(char,text): binary operator (char, text) -> boolean [bound to public.bpcharicnlike]
                    --  does not match LIKE expression, case-insensitive
                    . references
                        join_routine = public.icnlikejoinsel
                        negate_operator = ~~*
                        restrict_routine = public.icnlikesel
                !~~*(name,text): binary operator (name, text) -> boolean [bound to public.nameicnlike]
                    --  does not match LIKE expression, case-insensitive
                    . references
                        join_routine = public.icnlikejoinsel
                        negate_operator = ~~*
                        restrict_routine = public.icnlikesel
                !~~*(text,text): binary operator (text, text) -> boolean [bound to public.texticnlike]
                    --  does not match LIKE expression, case-insensitive
                    . references
                        join_routine = public.icnlikejoinsel
                        negate_operator = ~~*
                        restrict_routine = public.icnlikesel
                ##(line,box): binary operator (line, box) -> point [bound to public.close_lb]
                    --  closest point to A on B
                ##(line,lseg): binary operator (line, lseg) -> point [bound to public.close_ls]
                    --  closest point to A on B
                ##(lseg,box): binary operator (lseg, box) -> point [bound to public.close_sb]
                    --  closest point to A on B
                ##(lseg,line): binary operator (lseg, line) -> point [bound to public.close_sl]
                    --  closest point to A on B
                ##(lseg,lseg): binary operator (lseg, lseg) -> point [bound to public.close_lseg]
                    --  closest point to A on B
                ##(point,box): binary operator (point, box) -> point [bound to public.close_pb]
                    --  closest point to A on B
                ##(point,line): binary operator (point, line) -> point [bound to public.close_pl]
                    --  closest point to A on B
                ##(point,lseg): binary operator (point, lseg) -> point [bound to public.close_ps]
                    --  closest point to A on B
                #(bigint,bigint): binary operator (bigint, bigint) -> bigint [bound to public.int8xor]
                    --  bitwise exclusive or
                    . references
                        commute_operator = #
                #(bit,bit): binary operator (bit, bit) -> bit [bound to public.bitxor]
                    --  bitwise exclusive or
                    . references
                        commute_operator = #
                #(box,box): binary operator (box, box) -> box [bound to public.box_intersect]
                    --  box intersection
                #(integer,integer): binary operator (integer, integer) -> integer [bound to public.int4xor]
                    --  bitwise exclusive or
                    . references
                        commute_operator = #
                #(line,line): binary operator (line, line) -> point [bound to public.line_interpt]
                    --  intersection point
                    . references
                        commute_operator = #
                #(lseg,lseg): binary operator (lseg, lseg) -> point [bound to public.lseg_interpt]
                    --  intersection point
                    . references
                        commute_operator = #
                #(smallint,smallint): binary operator (smallint, smallint) -> smallint [bound to public.int2xor]
                    --  bitwise exclusive or
                    . references
                        commute_operator = #
                #(unknown,path): prefix operator (path) -> integer [bound to public.path_npoints]
                    --  number of points
                #(unknown,polygon): prefix operator (polygon) -> integer [bound to public.poly_npoints]
                    --  number of points
                #-(jsonb,text[]): binary operator (jsonb, text[]) -> jsonb [bound to public.jsonb_delete_path]
                    --  delete path
                #>(json,text[]): binary operator (json, text[]) -> json [bound to public.json_extract_path]
                    --  get value from json with path elements
                #>(jsonb,text[]): binary operator (jsonb, text[]) -> jsonb [bound to public.jsonb_extract_path]
                    --  get value from jsonb with path elements
                #>>(json,text[]): binary operator (json, text[]) -> text [bound to public.json_extract_path_text]
                    --  get value from json as text with path elements
                #>>(jsonb,text[]): binary operator (jsonb, text[]) -> text [bound to public.jsonb_extract_path_text]
                    --  get value from jsonb as text with path elements
                %(bigint,bigint): binary operator (bigint, bigint) -> bigint [bound to public.int8mod]
                    --  modulus
                %(integer,integer): binary operator (integer, integer) -> integer [bound to public.int4mod]
                    --  modulus
                %(numeric,numeric): binary operator (numeric, numeric) -> numeric [bound to public.numeric_mod]
                    --  modulus
                %(smallint,smallint): binary operator (smallint, smallint) -> smallint [bound to public.int2mod]
                    --  modulus
                &&(anyarray,anyarray): binary operator (anyarray, anyarray) -> boolean [bound to public.arrayoverlap]
                    --  overlaps
                    . references
                        commute_operator = &&
                        join_routine = public.arraycontjoinsel
                        restrict_routine = public.arraycontsel
                &&(anyrange,anyrange): binary operator (anyrange, anyrange) -> boolean [bound to public.range_overlaps]
                    --  overlaps
                    . references
                        commute_operator = &&
                        join_routine = public.areajoinsel
                        restrict_routine = public.rangesel
                &&(box,box): binary operator (box, box) -> boolean [bound to public.box_overlap]
                    --  overlaps
                    . references
                        commute_operator = &&
                        join_routine = public.areajoinsel
                        restrict_routine = public.areasel
                &&(circle,circle): binary operator (circle, circle) -> boolean [bound to public.circle_overlap]
                    --  overlaps
                    . references
                        commute_operator = &&
                        join_routine = public.areajoinsel
                        restrict_routine = public.areasel
                &&(inet,inet): binary operator (inet, inet) -> boolean [bound to public.network_overlap]
                    --  overlaps (is subnet or supernet)
                    . references
                        commute_operator = &&
                        join_routine = public.networkjoinsel
                        restrict_routine = public.networksel
                &&(polygon,polygon): binary operator (polygon, polygon) -> boolean [bound to public.poly_overlap]
                    --  overlaps
                    . references
                        commute_operator = &&
                        join_routine = public.areajoinsel
                        restrict_routine = public.areasel
                &&(tsquery,tsquery): binary operator (tsquery, tsquery) -> tsquery [bound to public.tsquery_and]
                    --  AND-concatenate
                &(bigint,bigint): binary operator (bigint, bigint) -> bigint [bound to public.int8and]
                    --  bitwise and
                    . references
                        commute_operator = &
                &(bit,bit): binary operator (bit, bit) -> bit [bound to public.bitand]
                    --  bitwise and
                    . references
                        commute_operator = &
                &(inet,inet): binary operator (inet, inet) -> inet [bound to public.inetand]
                    --  bitwise and
                &(integer,integer): binary operator (integer, integer) -> integer [bound to public.int4and]
                    --  bitwise and
                    . references
                        commute_operator = &
                &(macaddr,macaddr): binary operator (macaddr, macaddr) -> macaddr [bound to public.macaddr_and]
                    --  bitwise and
                &(macaddr8,macaddr8): binary operator (macaddr8, macaddr8) -> macaddr8 [bound to public.macaddr8_and]
                    --  bitwise and
                &(smallint,smallint): binary operator (smallint, smallint) -> smallint [bound to public.int2and]
                    --  bitwise and
                    . references
                        commute_operator = &
                &<(anyrange,anyrange): binary operator (anyrange, anyrange) -> boolean [bound to public.range_overleft]
                    --  overlaps or is left of
                    . references
                        join_routine = public.scalarltjoinsel
                        restrict_routine = public.rangesel
                &<(box,box): binary operator (box, box) -> boolean [bound to public.box_overleft]
                    --  overlaps or is left of
                    . references
                        join_routine = public.positionjoinsel
                        restrict_routine = public.positionsel
                &<(circle,circle): binary operator (circle, circle) -> boolean [bound to public.circle_overleft]
                    --  overlaps or is left of
                    . references
                        join_routine = public.positionjoinsel
                        restrict_routine = public.positionsel
                &<(polygon,polygon): binary operator (polygon, polygon) -> boolean [bound to public.poly_overleft]
                    --  overlaps or is left of
                    . references
                        join_routine = public.positionjoinsel
                        restrict_routine = public.positionsel
                &<|(box,box): binary operator (box, box) -> boolean [bound to public.box_overbelow]
                    --  overlaps or is below
                    . references
                        join_routine = public.positionjoinsel
                        restrict_routine = public.positionsel
                &<|(circle,circle): binary operator (circle, circle) -> boolean [bound to public.circle_overbelow]
                    --  overlaps or is below
                    . references
                        join_routine = public.positionjoinsel
                        restrict_routine = public.positionsel
                &<|(polygon,polygon): binary operator (polygon, polygon) -> boolean [bound to public.poly_overbelow]
                    --  overlaps or is below
                    . references
                        join_routine = public.positionjoinsel
                        restrict_routine = public.positionsel
                &>(anyrange,anyrange): binary operator (anyrange, anyrange) -> boolean [bound to public.range_overright]
                    --  overlaps or is right of
                    . references
                        join_routine = public.scalargtjoinsel
                        restrict_routine = public.rangesel
                &>(box,box): binary operator (box, box) -> boolean [bound to public.box_overright]
                    --  overlaps or is right of
                    . references
                        join_routine = public.positionjoinsel
                        restrict_routine = public.positionsel
                &>(circle,circle): binary operator (circle, circle) -> boolean [bound to public.circle_overright]
                    --  overlaps or is right of
                    . references
                        join_routine = public.positionjoinsel
                        restrict_routine = public.positionsel
                &>(polygon,polygon): binary operator (polygon, polygon) -> boolean [bound to public.poly_overright]
                    --  overlaps or is right of
                    . references
                        join_routine = public.positionjoinsel
                        restrict_routine = public.positionsel
                *(anyrange,anyrange): binary operator (anyrange, anyrange) -> anyrange [bound to public.range_intersect]
                    --  range intersection
                    . references
                        commute_operator = *
                *(bigint,bigint): binary operator (bigint, bigint) -> bigint [bound to public.int8mul]
                    --  multiply
                    . references
                        commute_operator = *
                *(bigint,integer): binary operator (bigint, integer) -> bigint [bound to public.int84mul]
                    --  multiply
                    . references
                        commute_operator = *
                *(bigint,money): binary operator (bigint, money) -> money [bound to public.int8_mul_cash]
                    --  multiply
                    . references
                        commute_operator = *
                *(bigint,smallint): binary operator (bigint, smallint) -> bigint [bound to public.int82mul]
                    --  multiply
                    . references
                        commute_operator = *
                *(box,point): binary operator (box, point) -> box [bound to public.box_mul]
                    --  multiply box by point (scale)
                *(circle,point): binary operator (circle, point) -> circle [bound to public.circle_mul_pt]
                    --  multiply
                *(double precision,double precision): binary operator (double precision, double precision) -> double precision [bound to public.float8mul]
                    --  multiply
                    . references
                        commute_operator = *
                *(double precision,interval): binary operator (double precision, interval) -> interval [bound to public.mul_d_interval]
                    --  multiply
                    . references
                        commute_operator = *
                *(double precision,money): binary operator (double precision, money) -> money [bound to public.flt8_mul_cash]
                    --  multiply
                    . references
                        commute_operator = *
                *(double precision,real): binary operator (double precision, real) -> double precision [bound to public.float84mul]
                    --  multiply
                    . references
                        commute_operator = *
                *(integer,bigint): binary operator (integer, bigint) -> bigint [bound to public.int48mul]
                    --  multiply
                    . references
                        commute_operator = *
                *(integer,integer): binary operator (integer, integer) -> integer [bound to public.int4mul]
                    --  multiply
                    . references
                        commute_operator = *
                *(integer,money): binary operator (integer, money) -> money [bound to public.int4_mul_cash]
                    --  multiply
                    . references
                        commute_operator = *
                *(integer,smallint): binary operator (integer, smallint) -> integer [bound to public.int42mul]
                    --  multiply
                    . references
                        commute_operator = *
                *(interval,double precision): binary operator (interval, double precision) -> interval [bound to public.interval_mul]
                    --  multiply
                    . references
                        commute_operator = *
                *(money,bigint): binary operator (money, bigint) -> money [bound to public.cash_mul_int8]
                    --  multiply
                    . references
                        commute_operator = *
                *(money,double precision): binary operator (money, double precision) -> money [bound to public.cash_mul_flt8]
                    --  multiply
                    . references
                        commute_operator = *
                *(money,integer): binary operator (money, integer) -> money [bound to public.cash_mul_int4]
                    --  multiply
                    . references
                        commute_operator = *
                *(money,real): binary operator (money, real) -> money [bound to public.cash_mul_flt4]
                    --  multiply
                    . references
                        commute_operator = *
                *(money,smallint): binary operator (money, smallint) -> money [bound to public.cash_mul_int2]
                    --  multiply
                    . references
                        commute_operator = *
                *(numeric,numeric): binary operator (numeric, numeric) -> numeric [bound to public.numeric_mul]
                    --  multiply
                    . references
                        commute_operator = *
                *(path,point): binary operator (path, point) -> path [bound to public.path_mul_pt]
                    --  multiply (rotate/scale path)
                *(point,point): binary operator (point, point) -> point [bound to public.point_mul]
                    --  multiply points (scale/rotate)
                    . references
                        commute_operator = *
                *(real,double precision): binary operator (real, double precision) -> double precision [bound to public.float48mul]
                    --  multiply
                    . references
                        commute_operator = *
                *(real,money): binary operator (real, money) -> money [bound to public.flt4_mul_cash]
                    --  multiply
                    . references
                        commute_operator = *
                *(real,real): binary operator (real, real) -> real [bound to public.float4mul]
                    --  multiply
                    . references
                        commute_operator = *
                *(smallint,bigint): binary operator (smallint, bigint) -> bigint [bound to public.int28mul]
                    --  multiply
                    . references
                        commute_operator = *
                *(smallint,integer): binary operator (smallint, integer) -> integer [bound to public.int24mul]
                    --  multiply
                    . references
                        commute_operator = *
                *(smallint,money): binary operator (smallint, money) -> money [bound to public.int2_mul_cash]
                    --  multiply
                    . references
                        commute_operator = *
                *(smallint,smallint): binary operator (smallint, smallint) -> smallint [bound to public.int2mul]
                    --  multiply
                    . references
                        commute_operator = *
                *<(record,record): binary operator (record, record) -> boolean [bound to public.record_image_lt]
                    --  less than
                    . references
                        commute_operator = public.*>
                        join_routine = public.scalarltjoinsel
                        negate_operator = public.*>=
                        restrict_routine = public.scalarltsel
                *<=(record,record): binary operator (record, record) -> boolean [bound to public.record_image_le]
                    --  less than or equal
                    . references
                        commute_operator = public.*>=
                        join_routine = public.scalarlejoinsel
                        negate_operator = public.*>
                        restrict_routine = public.scalarlesel
                *<>(record,record): binary operator (record, record) -> boolean [bound to public.record_image_ne]
                    --  not identical
                    . references
                        commute_operator = public.*<>
                        join_routine = public.neqjoinsel
                        negate_operator = public.*=
                        restrict_routine = public.neqsel
                *=(record,record): binary operator (record, record) -> boolean [bound to public.record_image_eq]
                    --  identical
                    . properties
                        merges +
                    . references
                        commute_operator = public.*=
                        join_routine = public.eqjoinsel
                        negate_operator = public.*<>
                        restrict_routine = public.eqsel
                *>(record,record): binary operator (record, record) -> boolean [bound to public.record_image_gt]
                    --  greater than
                    . references
                        commute_operator = public.*<
                        join_routine = public.scalargtjoinsel
                        negate_operator = public.*<=
                        restrict_routine = public.scalargtsel
                *>=(record,record): binary operator (record, record) -> boolean [bound to public.record_image_ge]
                    --  greater than or equal
                    . references
                        commute_operator = public.*<=
                        join_routine = public.scalargejoinsel
                        negate_operator = public.*<
                        restrict_routine = public.scalargesel
                +(aclitem[],aclitem): binary operator (aclitem[], aclitem) -> aclitem[] [bound to public.aclinsert]
                    --  add/update ACL item
                +(anyrange,anyrange): binary operator (anyrange, anyrange) -> anyrange [bound to public.range_union]
                    --  range union
                    . references
                        commute_operator = +
                +(bigint,bigint): binary operator (bigint, bigint) -> bigint [bound to public.int8pl]
                    --  add
                    . references
                        commute_operator = +
                +(bigint,inet): binary operator (bigint, inet) -> inet [bound to public.int8pl_inet]
                    --  add
                    . references
                        commute_operator = +
                +(bigint,integer): binary operator (bigint, integer) -> bigint [bound to public.int84pl]
                    --  add
                    . references
                        commute_operator = +
                +(bigint,smallint): binary operator (bigint, smallint) -> bigint [bound to public.int82pl]
                    --  add
                    . references
                        commute_operator = +
                +(box,point): binary operator (box, point) -> box [bound to public.box_add]
                    --  add point to box (translate)
                +(circle,point): binary operator (circle, point) -> circle [bound to public.circle_add_pt]
                    --  add
                +(date,integer): binary operator (date, integer) -> date [bound to public.date_pli]
                    --  add
                    . references
                        commute_operator = +
                +(date,interval): binary operator (date, interval) -> timestamp [bound to public.date_pl_interval]
                    --  add
                    . references
                        commute_operator = +
                +(date,time with time zone): binary operator (date, time with time zone) -> timestamp with time zone [bound to public.datetimetz_pl]
                    --  convert date and time with time zone to timestamp with time zone
                    . references
                        commute_operator = +
                +(date,time): binary operator (date, time) -> timestamp [bound to public.datetime_pl]
                    --  convert date and time to timestamp
                    . references
                        commute_operator = +
                +(double precision,double precision): binary operator (double precision, double precision) -> double precision [bound to public.float8pl]
                    --  add
                    . references
                        commute_operator = +
                +(double precision,real): binary operator (double precision, real) -> double precision [bound to public.float84pl]
                    --  add
                    . references
                        commute_operator = +
                +(inet,bigint): binary operator (inet, bigint) -> inet [bound to public.inetpl]
                    --  add
                    . references
                        commute_operator = +
                +(integer,bigint): binary operator (integer, bigint) -> bigint [bound to public.int48pl]
                    --  add
                    . references
                        commute_operator = +
                +(integer,date): binary operator (integer, date) -> date [bound to public.integer_pl_date]
                    --  add
                    . references
                        commute_operator = +
                +(integer,integer): binary operator (integer, integer) -> integer [bound to public.int4pl]
                    --  add
                    . references
                        commute_operator = +
                +(integer,smallint): binary operator (integer, smallint) -> integer [bound to public.int42pl]
                    --  add
                    . references
                        commute_operator = +
                +(interval,date): binary operator (interval, date) -> timestamp [bound to public.interval_pl_date]
                    --  add
                    . references
                        commute_operator = +
                +(interval,interval): binary operator (interval, interval) -> interval [bound to public.interval_pl]
                    --  add
                    . references
                        commute_operator = +
                +(interval,time with time zone): binary operator (interval, time with time zone) -> time with time zone [bound to public.interval_pl_timetz]
                    --  add
                    . references
                        commute_operator = +
                +(interval,time): binary operator (interval, time) -> time [bound to public.interval_pl_time]
                    --  add
                    . references
                        commute_operator = +
                +(interval,timestamp with time zone): binary operator (interval, timestamp with time zone) -> timestamp with time zone [bound to public.interval_pl_timestamptz]
                    --  add
                    . references
                        commute_operator = +
                +(interval,timestamp): binary operator (interval, timestamp) -> timestamp [bound to public.interval_pl_timestamp]
                    --  add
                    . references
                        commute_operator = +
                +(money,money): binary operator (money, money) -> money [bound to public.cash_pl]
                    --  add
                    . references
                        commute_operator = +
                +(numeric,numeric): binary operator (numeric, numeric) -> numeric [bound to public.numeric_add]
                    --  add
                    . references
                        commute_operator = +
                +(path,path): binary operator (path, path) -> path [bound to public.path_add]
                    --  concatenate
                    . references
                        commute_operator = +
                +(path,point): binary operator (path, point) -> path [bound to public.path_add_pt]
                    --  add (translate path)
                +(point,point): binary operator (point, point) -> point [bound to public.point_add]
                    --  add points (translate)
                    . references
                        commute_operator = +
                +(real,double precision): binary operator (real, double precision) -> double precision [bound to public.float48pl]
                    --  add
                    . references
                        commute_operator = +
                +(real,real): binary operator (real, real) -> real [bound to public.float4pl]
                    --  add
                    . references
                        commute_operator = +
                +(smallint,bigint): binary operator (smallint, bigint) -> bigint [bound to public.int28pl]
                    --  add
                    . references
                        commute_operator = +
                +(smallint,integer): binary operator (smallint, integer) -> integer [bound to public.int24pl]
                    --  add
                    . references
                        commute_operator = +
                +(smallint,smallint): binary operator (smallint, smallint) -> smallint [bound to public.int2pl]
                    --  add
                    . references
                        commute_operator = +
                +(time with time zone,date): binary operator (time with time zone, date) -> timestamp with time zone [bound to public.timetzdate_pl]
                    --  convert time with time zone and date to timestamp with time zone
                    . references
                        commute_operator = +
                +(time with time zone,interval): binary operator (time with time zone, interval) -> time with time zone [bound to public.timetz_pl_interval]
                    --  add
                    . references
                        commute_operator = +
                +(time,date): binary operator (time, date) -> timestamp [bound to public.timedate_pl]
                    --  convert time and date to timestamp
                    . references
                        commute_operator = +
                +(time,interval): binary operator (time, interval) -> time [bound to public.time_pl_interval]
                    --  add
                    . references
                        commute_operator = +
                +(timestamp with time zone,interval): binary operator (timestamp with time zone, interval) -> timestamp with time zone [bound to public.timestamptz_pl_interval]
                    --  add
                    . references
                        commute_operator = +
                +(timestamp,interval): binary operator (timestamp, interval) -> timestamp [bound to public.timestamp_pl_interval]
                    --  add
                    . references
                        commute_operator = +
                +(unknown,bigint): prefix operator (bigint) -> bigint [bound to public.int8up]
                    --  unary plus
                +(unknown,double precision): prefix operator (double precision) -> double precision [bound to public.float8up]
                    --  unary plus
                +(unknown,integer): prefix operator (integer) -> integer [bound to public.int4up]
                    --  unary plus
                +(unknown,numeric): prefix operator (numeric) -> numeric [bound to public.numeric_uplus]
                    --  unary plus
                +(unknown,real): prefix operator (real) -> real [bound to public.float4up]
                    --  unary plus
                +(unknown,smallint): prefix operator (smallint) -> smallint [bound to public.int2up]
                    --  unary plus
                -(aclitem[],aclitem): binary operator (aclitem[], aclitem) -> aclitem[] [bound to public.aclremove]
                    --  remove ACL item
                -(anyrange,anyrange): binary operator (anyrange, anyrange) -> anyrange [bound to public.range_minus]
                    --  range difference
                -(bigint,bigint): binary operator (bigint, bigint) -> bigint [bound to public.int8mi]
                    --  subtract
                -(bigint,integer): binary operator (bigint, integer) -> bigint [bound to public.int84mi]
                    --  subtract
                -(bigint,smallint): binary operator (bigint, smallint) -> bigint [bound to public.int82mi]
                    --  subtract
                -(box,point): binary operator (box, point) -> box [bound to public.box_sub]
                    --  subtract point from box (translate)
                -(circle,point): binary operator (circle, point) -> circle [bound to public.circle_sub_pt]
                    --  subtract
                -(date,date): binary operator (date, date) -> integer [bound to public.date_mi]
                    --  subtract
                -(date,integer): binary operator (date, integer) -> date [bound to public.date_mii]
                    --  subtract
                -(date,interval): binary operator (date, interval) -> timestamp [bound to public.date_mi_interval]
                    --  subtract
                -(double precision,double precision): binary operator (double precision, double precision) -> double precision [bound to public.float8mi]
                    --  subtract
                -(double precision,real): binary operator (double precision, real) -> double precision [bound to public.float84mi]
                    --  subtract
                -(inet,bigint): binary operator (inet, bigint) -> inet [bound to public.inetmi_int8]
                    --  subtract
                -(inet,inet): binary operator (inet, inet) -> bigint [bound to public.inetmi]
                    --  subtract
                -(integer,bigint): binary operator (integer, bigint) -> bigint [bound to public.int48mi]
                    --  subtract
                -(integer,integer): binary operator (integer, integer) -> integer [bound to public.int4mi]
                    --  subtract
                -(integer,smallint): binary operator (integer, smallint) -> integer [bound to public.int42mi]
                    --  subtract
                -(interval,interval): binary operator (interval, interval) -> interval [bound to public.interval_mi]
                    --  subtract
                -(jsonb,integer): binary operator (jsonb, integer) -> jsonb [bound to jsonb_delete]
                    --  delete array element
                -(jsonb,text): binary operator (jsonb, text) -> jsonb [bound to jsonb_delete]
                    --  delete object field
                -(jsonb,text[]): binary operator (jsonb, text[]) -> jsonb [bound to jsonb_delete]
                    --  delete object fields
                -(money,money): binary operator (money, money) -> money [bound to public.cash_mi]
                    --  subtract
                -(numeric,numeric): binary operator (numeric, numeric) -> numeric [bound to public.numeric_sub]
                    --  subtract
                -(path,point): binary operator (path, point) -> path [bound to public.path_sub_pt]
                    --  subtract (translate path)
                -(pg_lsn,pg_lsn): binary operator (pg_lsn, pg_lsn) -> numeric [bound to public.pg_lsn_mi]
                    --  minus
                -(point,point): binary operator (point, point) -> point [bound to public.point_sub]
                    --  subtract points (translate)
                -(real,double precision): binary operator (real, double precision) -> double precision [bound to public.float48mi]
                    --  subtract
                -(real,real): binary operator (real, real) -> real [bound to public.float4mi]
                    --  subtract
                -(smallint,bigint): binary operator (smallint, bigint) -> bigint [bound to public.int28mi]
                    --  subtract
                -(smallint,integer): binary operator (smallint, integer) -> integer [bound to public.int24mi]
                    --  subtract
                -(smallint,smallint): binary operator (smallint, smallint) -> smallint [bound to public.int2mi]
                    --  subtract
                -(time with time zone,interval): binary operator (time with time zone, interval) -> time with time zone [bound to public.timetz_mi_interval]
                    --  subtract
                -(time,interval): binary operator (time, interval) -> time [bound to public.time_mi_interval]
                    --  subtract
                -(time,time): binary operator (time, time) -> interval [bound to public.time_mi_time]
                    --  subtract
                -(timestamp with time zone,interval): binary operator (timestamp with time zone, interval) -> timestamp with time zone [bound to public.timestamptz_mi_interval]
                    --  subtract
                -(timestamp with time zone,timestamp with time zone): binary operator (timestamp with time zone, timestamp with time zone) -> interval [bound to public.timestamptz_mi]
                    --  subtract
                -(timestamp,interval): binary operator (timestamp, interval) -> timestamp [bound to public.timestamp_mi_interval]
                    --  subtract
                -(timestamp,timestamp): binary operator (timestamp, timestamp) -> interval [bound to public.timestamp_mi]
                    --  subtract
                -(unknown,bigint): prefix operator (bigint) -> bigint [bound to public.int8um]
                    --  negate
                -(unknown,double precision): prefix operator (double precision) -> double precision [bound to public.float8um]
                    --  negate
                -(unknown,integer): prefix operator (integer) -> integer [bound to public.int4um]
                    --  negate
                -(unknown,interval): prefix operator (interval) -> interval [bound to public.interval_um]
                    --  negate
                -(unknown,numeric): prefix operator (numeric) -> numeric [bound to public.numeric_uminus]
                    --  negate
                -(unknown,real): prefix operator (real) -> real [bound to public.float4um]
                    --  negate
                -(unknown,smallint): prefix operator (smallint) -> smallint [bound to public.int2um]
                    --  negate
                ->(json,integer): binary operator (json, integer) -> json [bound to public.json_array_element]
                    --  get json array element
                ->(json,text): binary operator (json, text) -> json [bound to public.json_object_field]
                    --  get json object field
                ->(jsonb,integer): binary operator (jsonb, integer) -> jsonb [bound to public.jsonb_array_element]
                    --  get jsonb array element
                ->(jsonb,text): binary operator (jsonb, text) -> jsonb [bound to public.jsonb_object_field]
                    --  get jsonb object field
                ->>(json,integer): binary operator (json, integer) -> text [bound to public.json_array_element_text]
                    --  get json array element as text
                ->>(json,text): binary operator (json, text) -> text [bound to public.json_object_field_text]
                    --  get json object field as text
                ->>(jsonb,integer): binary operator (jsonb, integer) -> text [bound to public.jsonb_array_element_text]
                    --  get jsonb array element as text
                ->>(jsonb,text): binary operator (jsonb, text) -> text [bound to public.jsonb_object_field_text]
                    --  get jsonb object field as text
                -|-(anyrange,anyrange): binary operator (anyrange, anyrange) -> boolean [bound to public.range_adjacent]
                    --  is adjacent to
                    . references
                        commute_operator = public.-|-
                        join_routine = public.contjoinsel
                        restrict_routine = public.contsel
                /(bigint,bigint): binary operator (bigint, bigint) -> bigint [bound to public.int8div]
                    --  divide
                /(bigint,integer): binary operator (bigint, integer) -> bigint [bound to public.int84div]
                    --  divide
                /(bigint,smallint): binary operator (bigint, smallint) -> bigint [bound to public.int82div]
                    --  divide
                /(box,point): binary operator (box, point) -> box [bound to public.box_div]
                    --  divide box by point (scale)
                /(circle,point): binary operator (circle, point) -> circle [bound to public.circle_div_pt]
                    --  divide
                /(double precision,double precision): binary operator (double precision, double precision) -> double precision [bound to public.float8div]
                    --  divide
                /(double precision,real): binary operator (double precision, real) -> double precision [bound to public.float84div]
                    --  divide
                /(integer,bigint): binary operator (integer, bigint) -> bigint [bound to public.int48div]
                    --  divide
                /(integer,integer): binary operator (integer, integer) -> integer [bound to public.int4div]
                    --  divide
                /(integer,smallint): binary operator (integer, smallint) -> integer [bound to public.int42div]
                    --  divide
                /(interval,double precision): binary operator (interval, double precision) -> interval [bound to public.interval_div]
                    --  divide
                /(money,bigint): binary operator (money, bigint) -> money [bound to public.cash_div_int8]
                    --  divide
                /(money,double precision): binary operator (money, double precision) -> money [bound to public.cash_div_flt8]
                    --  divide
                /(money,integer): binary operator (money, integer) -> money [bound to public.cash_div_int4]
                    --  divide
                /(money,money): binary operator (money, money) -> double precision [bound to public.cash_div_cash]
                    --  divide
                /(money,real): binary operator (money, real) -> money [bound to public.cash_div_flt4]
                    --  divide
                /(money,smallint): binary operator (money, smallint) -> money [bound to public.cash_div_int2]
                    --  divide
                /(numeric,numeric): binary operator (numeric, numeric) -> numeric [bound to public.numeric_div]
                    --  divide
                /(path,point): binary operator (path, point) -> path [bound to public.path_div_pt]
                    --  divide (rotate/scale path)
                /(point,point): binary operator (point, point) -> point [bound to public.point_div]
                    --  divide points (scale/rotate)
                /(real,double precision): binary operator (real, double precision) -> double precision [bound to public.float48div]
                    --  divide
                /(real,real): binary operator (real, real) -> real [bound to public.float4div]
                    --  divide
                /(smallint,bigint): binary operator (smallint, bigint) -> bigint [bound to public.int28div]
                    --  divide
                /(smallint,integer): binary operator (smallint, integer) -> integer [bound to public.int24div]
                    --  divide
                /(smallint,smallint): binary operator (smallint, smallint) -> smallint [bound to public.int2div]
                    --  divide
                <("char","char"): binary operator ("char", "char") -> boolean [bound to public.charlt]
                    --  less than
                    . references
                        commute_operator = >
                        join_routine = public.scalarltjoinsel
                        negate_operator = >=
                        restrict_routine = public.scalarltsel
                <(anyarray,anyarray): binary operator (anyarray, anyarray) -> boolean [bound to public.array_lt]
                    --  less than
                    . references
                        commute_operator = >
                        join_routine = public.scalarltjoinsel
                        negate_operator = >=
                        restrict_routine = public.scalarltsel
                <(anyenum,anyenum): binary operator (anyenum, anyenum) -> boolean [bound to public.enum_lt]
                    --  less than
                    . references
                        commute_operator = >
                        join_routine = public.scalarltjoinsel
                        negate_operator = >=
                        restrict_routine = public.scalarltsel
                <(anyrange,anyrange): binary operator (anyrange, anyrange) -> boolean [bound to public.range_lt]
                    --  less than
                    . references
                        commute_operator = >
                        join_routine = public.scalarltjoinsel
                        negate_operator = >=
                        restrict_routine = public.rangesel
                <(bigint,bigint): binary operator (bigint, bigint) -> boolean [bound to public.int8lt]
                    --  less than
                    . references
                        commute_operator = >
                        join_routine = public.scalarltjoinsel
                        negate_operator = >=
                        restrict_routine = public.scalarltsel
                <(bigint,integer): binary operator (bigint, integer) -> boolean [bound to public.int84lt]
                    --  less than
                    . references
                        commute_operator = >
                        join_routine = public.scalarltjoinsel
                        negate_operator = >=
                        restrict_routine = public.scalarltsel
                <(bigint,smallint): binary operator (bigint, smallint) -> boolean [bound to public.int82lt]
                    --  less than
                    . references
                        commute_operator = >
                        join_routine = public.scalarltjoinsel
                        negate_operator = >=
                        restrict_routine = public.scalarltsel
                <(bit varying,bit varying): binary operator (bit varying, bit varying) -> boolean [bound to public.varbitlt]
                    --  less than
                    . references
                        commute_operator = >
                        join_routine = public.scalarltjoinsel
                        negate_operator = >=
                        restrict_routine = public.scalarltsel
                <(bit,bit): binary operator (bit, bit) -> boolean [bound to public.bitlt]
                    --  less than
                    . references
                        commute_operator = >
                        join_routine = public.scalarltjoinsel
                        negate_operator = >=
                        restrict_routine = public.scalarltsel
                <(boolean,boolean): binary operator (boolean, boolean) -> boolean [bound to public.boollt]
                    --  less than
                    . references
                        commute_operator = >
                        join_routine = public.scalarltjoinsel
                        negate_operator = >=
                        restrict_routine = public.scalarltsel
                <(box,box): binary operator (box, box) -> boolean [bound to public.box_lt]
                    --  less than by area
                    . references
                        commute_operator = >
                        join_routine = public.areajoinsel
                        negate_operator = >=
                        restrict_routine = public.areasel
                <(bytea,bytea): binary operator (bytea, bytea) -> boolean [bound to public.bytealt]
                    --  less than
                    . references
                        commute_operator = >
                        join_routine = public.scalarltjoinsel
                        negate_operator = >=
                        restrict_routine = public.scalarltsel
                <(char,char): binary operator (char, char) -> boolean [bound to public.bpcharlt]
                    --  less than
                    . references
                        commute_operator = >
                        join_routine = public.scalarltjoinsel
                        negate_operator = >=
                        restrict_routine = public.scalarltsel
                <(circle,circle): binary operator (circle, circle) -> boolean [bound to public.circle_lt]
                    --  less than by area
                    . references
                        commute_operator = >
                        join_routine = public.areajoinsel
                        negate_operator = >=
                        restrict_routine = public.areasel
                <(date,date): binary operator (date, date) -> boolean [bound to public.date_lt]
                    --  less than
                    . references
                        commute_operator = >
                        join_routine = public.scalarltjoinsel
                        negate_operator = >=
                        restrict_routine = public.scalarltsel
                <(date,timestamp with time zone): binary operator (date, timestamp with time zone) -> boolean [bound to public.date_lt_timestamptz]
                    --  less than
                    . references
                        commute_operator = >
                        join_routine = public.scalarltjoinsel
                        negate_operator = >=
                        restrict_routine = public.scalarltsel
                <(date,timestamp): binary operator (date, timestamp) -> boolean [bound to public.date_lt_timestamp]
                    --  less than
                    . references
                        commute_operator = >
                        join_routine = public.scalarltjoinsel
                        negate_operator = >=
                        restrict_routine = public.scalarltsel
                <(double precision,double precision): binary operator (double precision, double precision) -> boolean [bound to public.float8lt]
                    --  less than
                    . references
                        commute_operator = >
                        join_routine = public.scalarltjoinsel
                        negate_operator = >=
                        restrict_routine = public.scalarltsel
                <(double precision,real): binary operator (double precision, real) -> boolean [bound to public.float84lt]
                    --  less than
                    . references
                        commute_operator = >
                        join_routine = public.scalarltjoinsel
                        negate_operator = >=
                        restrict_routine = public.scalarltsel
                <(inet,inet): binary operator (inet, inet) -> boolean [bound to public.network_lt]
                    --  less than
                    . references
                        commute_operator = >
                        join_routine = public.scalarltjoinsel
                        negate_operator = >=
                        restrict_routine = public.scalarltsel
                <(integer,bigint): binary operator (integer, bigint) -> boolean [bound to public.int48lt]
                    --  less than
                    . references
                        commute_operator = >
                        join_routine = public.scalarltjoinsel
                        negate_operator = >=
                        restrict_routine = public.scalarltsel
                <(integer,integer): binary operator (integer, integer) -> boolean [bound to public.int4lt]
                    --  less than
                    . references
                        commute_operator = >
                        join_routine = public.scalarltjoinsel
                        negate_operator = >=
                        restrict_routine = public.scalarltsel
                <(integer,smallint): binary operator (integer, smallint) -> boolean [bound to public.int42lt]
                    --  less than
                    . references
                        commute_operator = >
                        join_routine = public.scalarltjoinsel
                        negate_operator = >=
                        restrict_routine = public.scalarltsel
                <(interval,interval): binary operator (interval, interval) -> boolean [bound to public.interval_lt]
                    --  less than
                    . references
                        commute_operator = >
                        join_routine = public.scalarltjoinsel
                        negate_operator = >=
                        restrict_routine = public.scalarltsel
                <(jsonb,jsonb): binary operator (jsonb, jsonb) -> boolean [bound to public.jsonb_lt]
                    --  less than
                    . references
                        commute_operator = >
                        join_routine = public.scalarltjoinsel
                        negate_operator = >=
                        restrict_routine = public.scalarltsel
                <(lseg,lseg): binary operator (lseg, lseg) -> boolean [bound to public.lseg_lt]
                    --  less than by length
                    . references
                        commute_operator = >
                        negate_operator = >=
                <(macaddr,macaddr): binary operator (macaddr, macaddr) -> boolean [bound to public.macaddr_lt]
                    --  less than
                    . references
                        commute_operator = >
                        join_routine = public.scalarltjoinsel
                        negate_operator = >=
                        restrict_routine = public.scalarltsel
                <(macaddr8,macaddr8): binary operator (macaddr8, macaddr8) -> boolean [bound to public.macaddr8_lt]
                    --  less than
                    . references
                        commute_operator = >
                        join_routine = public.scalarltjoinsel
                        negate_operator = >=
                        restrict_routine = public.scalarltsel
                <(money,money): binary operator (money, money) -> boolean [bound to public.cash_lt]
                    --  less than
                    . references
                        commute_operator = >
                        join_routine = public.scalarltjoinsel
                        negate_operator = >=
                        restrict_routine = public.scalarltsel
                <(name,name): binary operator (name, name) -> boolean [bound to public.namelt]
                    --  less than
                    . references
                        commute_operator = >
                        join_routine = public.scalarltjoinsel
                        negate_operator = >=
                        restrict_routine = public.scalarltsel
                <(name,text): binary operator (name, text) -> boolean [bound to public.namelttext]
                    --  less than
                    . references
                        commute_operator = >
                        join_routine = public.scalarltjoinsel
                        negate_operator = >=
                        restrict_routine = public.scalarltsel
                <(numeric,numeric): binary operator (numeric, numeric) -> boolean [bound to public.numeric_lt]
                    --  less than
                    . references
                        commute_operator = >
                        join_routine = public.scalarltjoinsel
                        negate_operator = >=
                        restrict_routine = public.scalarltsel
                <(oid,oid): binary operator (oid, oid) -> boolean [bound to public.oidlt]
                    --  less than
                    . references
                        commute_operator = >
                        join_routine = public.scalarltjoinsel
                        negate_operator = >=
                        restrict_routine = public.scalarltsel
                <(oidvector,oidvector): binary operator (oidvector, oidvector) -> boolean [bound to public.oidvectorlt]
                    --  less than
                    . references
                        commute_operator = >
                        join_routine = public.scalarltjoinsel
                        negate_operator = >=
                        restrict_routine = public.scalarltsel
                <(path,path): binary operator (path, path) -> boolean [bound to public.path_n_lt]
                    --  less than
                    . references
                        commute_operator = >
                <(pg_lsn,pg_lsn): binary operator (pg_lsn, pg_lsn) -> boolean [bound to public.pg_lsn_lt]
                    --  less than
                    . references
                        commute_operator = >
                        join_routine = public.scalarltjoinsel
                        negate_operator = >=
                        restrict_routine = public.scalarltsel
                <(real,double precision): binary operator (real, double precision) -> boolean [bound to public.float48lt]
                    --  less than
                    . references
                        commute_operator = >
                        join_routine = public.scalarltjoinsel
                        negate_operator = >=
                        restrict_routine = public.scalarltsel
                <(real,real): binary operator (real, real) -> boolean [bound to public.float4lt]
                    --  less than
                    . references
                        commute_operator = >
                        join_routine = public.scalarltjoinsel
                        negate_operator = >=
                        restrict_routine = public.scalarltsel
                <(record,record): binary operator (record, record) -> boolean [bound to public.record_lt]
                    --  less than
                    . references
                        commute_operator = >
                        join_routine = public.scalarltjoinsel
                        negate_operator = >=
                        restrict_routine = public.scalarltsel
                <(smallint,bigint): binary operator (smallint, bigint) -> boolean [bound to public.int28lt]
                    --  less than
                    . references
                        commute_operator = >
                        join_routine = public.scalarltjoinsel
                        negate_operator = >=
                        restrict_routine = public.scalarltsel
                <(smallint,integer): binary operator (smallint, integer) -> boolean [bound to public.int24lt]
                    --  less than
                    . references
                        commute_operator = >
                        join_routine = public.scalarltjoinsel
                        negate_operator = >=
                        restrict_routine = public.scalarltsel
                <(smallint,smallint): binary operator (smallint, smallint) -> boolean [bound to public.int2lt]
                    --  less than
                    . references
                        commute_operator = >
                        join_routine = public.scalarltjoinsel
                        negate_operator = >=
                        restrict_routine = public.scalarltsel
                <(text,name): binary operator (text, name) -> boolean [bound to public.textltname]
                    --  less than
                    . references
                        commute_operator = >
                        join_routine = public.scalarltjoinsel
                        negate_operator = >=
                        restrict_routine = public.scalarltsel
                <(text,text): binary operator (text, text) -> boolean [bound to public.text_lt]
                    --  less than
                    . references
                        commute_operator = >
                        join_routine = public.scalarltjoinsel
                        negate_operator = >=
                        restrict_routine = public.scalarltsel
                <(tid,tid): binary operator (tid, tid) -> boolean [bound to public.tidlt]
                    --  less than
                    . references
                        commute_operator = >
                        join_routine = public.scalarltjoinsel
                        negate_operator = >=
                        restrict_routine = public.scalarltsel
                <(time with time zone,time with time zone): binary operator (time with time zone, time with time zone) -> boolean [bound to public.timetz_lt]
                    --  less than
                    . references
                        commute_operator = >
                        join_routine = public.scalarltjoinsel
                        negate_operator = >=
                        restrict_routine = public.scalarltsel
                <(time,time): binary operator (time, time) -> boolean [bound to public.time_lt]
                    --  less than
                    . references
                        commute_operator = >
                        join_routine = public.scalarltjoinsel
                        negate_operator = >=
                        restrict_routine = public.scalarltsel
                <(timestamp with time zone,date): binary operator (timestamp with time zone, date) -> boolean [bound to public.timestamptz_lt_date]
                    --  less than
                    . references
                        commute_operator = >
                        join_routine = public.scalarltjoinsel
                        negate_operator = >=
                        restrict_routine = public.scalarltsel
                <(timestamp with time zone,timestamp with time zone): binary operator (timestamp with time zone, timestamp with time zone) -> boolean [bound to public.timestamptz_lt]
                    --  less than
                    . references
                        commute_operator = >
                        join_routine = public.scalarltjoinsel
                        negate_operator = >=
                        restrict_routine = public.scalarltsel
                <(timestamp with time zone,timestamp): binary operator (timestamp with time zone, timestamp) -> boolean [bound to public.timestamptz_lt_timestamp]
                    --  less than
                    . references
                        commute_operator = >
                        join_routine = public.scalarltjoinsel
                        negate_operator = >=
                        restrict_routine = public.scalarltsel
                <(timestamp,date): binary operator (timestamp, date) -> boolean [bound to public.timestamp_lt_date]
                    --  less than
                    . references
                        commute_operator = >
                        join_routine = public.scalarltjoinsel
                        negate_operator = >=
                        restrict_routine = public.scalarltsel
                <(timestamp,timestamp with time zone): binary operator (timestamp, timestamp with time zone) -> boolean [bound to public.timestamp_lt_timestamptz]
                    --  less than
                    . references
                        commute_operator = >
                        join_routine = public.scalarltjoinsel
                        negate_operator = >=
                        restrict_routine = public.scalarltsel
                <(timestamp,timestamp): binary operator (timestamp, timestamp) -> boolean [bound to public.timestamp_lt]
                    --  less than
                    . references
                        commute_operator = >
                        join_routine = public.scalarltjoinsel
                        negate_operator = >=
                        restrict_routine = public.scalarltsel
                <(tsquery,tsquery): binary operator (tsquery, tsquery) -> boolean [bound to public.tsquery_lt]
                    --  less than
                    . references
                        commute_operator = >
                        join_routine = public.scalarltjoinsel
                        negate_operator = >=
                        restrict_routine = public.scalarltsel
                <(tsvector,tsvector): binary operator (tsvector, tsvector) -> boolean [bound to public.tsvector_lt]
                    --  less than
                    . references
                        commute_operator = >
                        join_routine = public.scalarltjoinsel
                        negate_operator = >=
                        restrict_routine = public.scalarltsel
                <(uuid,uuid): binary operator (uuid, uuid) -> boolean [bound to public.uuid_lt]
                    --  less than
                    . references
                        commute_operator = >
                        join_routine = public.scalarltjoinsel
                        negate_operator = >=
                        restrict_routine = public.scalarltsel
                <->(box,box): binary operator (box, box) -> double precision [bound to public.box_distance]
                    --  distance between
                    . references
                        commute_operator = <->
                <->(circle,circle): binary operator (circle, circle) -> double precision [bound to public.circle_distance]
                    --  distance between
                    . references
                        commute_operator = <->
                <->(circle,point): binary operator (circle, point) -> double precision [bound to public.dist_cpoint]
                    --  distance between
                    . references
                        commute_operator = <->
                <->(circle,polygon): binary operator (circle, polygon) -> double precision [bound to public.dist_cpoly]
                    --  distance between
                <->(line,box): binary operator (line, box) -> double precision [bound to public.dist_lb]
                    --  distance between
                <->(line,line): binary operator (line, line) -> double precision [bound to public.line_distance]
                    --  distance between
                    . references
                        commute_operator = <->
                <->(lseg,box): binary operator (lseg, box) -> double precision [bound to public.dist_sb]
                    --  distance between
                <->(lseg,line): binary operator (lseg, line) -> double precision [bound to public.dist_sl]
                    --  distance between
                <->(lseg,lseg): binary operator (lseg, lseg) -> double precision [bound to public.lseg_distance]
                    --  distance between
                    . references
                        commute_operator = <->
                <->(path,path): binary operator (path, path) -> double precision [bound to public.path_distance]
                    --  distance between
                    . references
                        commute_operator = <->
                <->(point,box): binary operator (point, box) -> double precision [bound to public.dist_pb]
                    --  distance between
                <->(point,circle): binary operator (point, circle) -> double precision [bound to public.dist_pc]
                    --  distance between
                    . references
                        commute_operator = <->
                <->(point,line): binary operator (point, line) -> double precision [bound to public.dist_pl]
                    --  distance between
                <->(point,lseg): binary operator (point, lseg) -> double precision [bound to public.dist_ps]
                    --  distance between
                <->(point,path): binary operator (point, path) -> double precision [bound to public.dist_ppath]
                    --  distance between
                <->(point,point): binary operator (point, point) -> double precision [bound to public.point_distance]
                    --  distance between
                    . references
                        commute_operator = <->
                <->(point,polygon): binary operator (point, polygon) -> double precision [bound to public.dist_ppoly]
                    --  distance between
                    . references
                        commute_operator = <->
                <->(polygon,point): binary operator (polygon, point) -> double precision [bound to public.dist_polyp]
                    --  distance between
                    . references
                        commute_operator = <->
                <->(polygon,polygon): binary operator (polygon, polygon) -> double precision [bound to public.poly_distance]
                    --  distance between
                    . references
                        commute_operator = <->
                <->(tsquery,tsquery): binary operator (tsquery, tsquery) -> tsquery [bound to tsquery_phrase]
                    --  phrase-concatenate
                <<(anyrange,anyrange): binary operator (anyrange, anyrange) -> boolean [bound to public.range_before]
                    --  is left of
                    . references
                        commute_operator = >>
                        join_routine = public.scalarltjoinsel
                        restrict_routine = public.rangesel
                <<(bigint,integer): binary operator (bigint, integer) -> bigint [bound to public.int8shl]
                    --  bitwise shift left
                <<(bit,integer): binary operator (bit, integer) -> bit [bound to public.bitshiftleft]
                    --  bitwise shift left
                <<(box,box): binary operator (box, box) -> boolean [bound to public.box_left]
                    --  is left of
                    . references
                        join_routine = public.positionjoinsel
                        restrict_routine = public.positionsel
                <<(circle,circle): binary operator (circle, circle) -> boolean [bound to public.circle_left]
                    --  is left of
                    . references
                        join_routine = public.positionjoinsel
                        restrict_routine = public.positionsel
                <<(inet,inet): binary operator (inet, inet) -> boolean [bound to public.network_sub]
                    --  is subnet
                    . references
                        commute_operator = >>
                        join_routine = public.networkjoinsel
                        restrict_routine = public.networksel
                <<(integer,integer): binary operator (integer, integer) -> integer [bound to public.int4shl]
                    --  bitwise shift left
                <<(point,point): binary operator (point, point) -> boolean [bound to public.point_left]
                    --  is left of
                    . references
                        join_routine = public.positionjoinsel
                        restrict_routine = public.positionsel
                <<(polygon,polygon): binary operator (polygon, polygon) -> boolean [bound to public.poly_left]
                    --  is left of
                    . references
                        join_routine = public.positionjoinsel
                        restrict_routine = public.positionsel
                <<(smallint,integer): binary operator (smallint, integer) -> smallint [bound to public.int2shl]
                    --  bitwise shift left
                <<=(inet,inet): binary operator (inet, inet) -> boolean [bound to public.network_subeq]
                    --  is subnet or equal
                    . references
                        commute_operator = public.>>=
                        join_routine = public.networkjoinsel
                        restrict_routine = public.networksel
                <<|(box,box): binary operator (box, box) -> boolean [bound to public.box_below]
                    --  is below
                    . references
                        join_routine = public.positionjoinsel
                        restrict_routine = public.positionsel
                <<|(circle,circle): binary operator (circle, circle) -> boolean [bound to public.circle_below]
                    --  is below
                    . references
                        join_routine = public.positionjoinsel
                        restrict_routine = public.positionsel
                <<|(polygon,polygon): binary operator (polygon, polygon) -> boolean [bound to public.poly_below]
                    --  is below
                    . references
                        join_routine = public.positionjoinsel
                        restrict_routine = public.positionsel
                <=("char","char"): binary operator ("char", "char") -> boolean [bound to public.charle]
                    --  less than or equal
                    . references
                        commute_operator = >=
                        join_routine = public.scalarlejoinsel
                        negate_operator = >
                        restrict_routine = public.scalarlesel
                <=(anyarray,anyarray): binary operator (anyarray, anyarray) -> boolean [bound to public.array_le]
                    --  less than or equal
                    . references
                        commute_operator = >=
                        join_routine = public.scalarlejoinsel
                        negate_operator = >
                        restrict_routine = public.scalarlesel
                <=(anyenum,anyenum): binary operator (anyenum, anyenum) -> boolean [bound to public.enum_le]
                    --  less than or equal
                    . references
                        commute_operator = >=
                        join_routine = public.scalarlejoinsel
                        negate_operator = >
                        restrict_routine = public.scalarlesel
                <=(anyrange,anyrange): binary operator (anyrange, anyrange) -> boolean [bound to public.range_le]
                    --  less than or equal
                    . references
                        commute_operator = >=
                        join_routine = public.scalarlejoinsel
                        negate_operator = >
                        restrict_routine = public.rangesel
                <=(bigint,bigint): binary operator (bigint, bigint) -> boolean [bound to public.int8le]
                    --  less than or equal
                    . references
                        commute_operator = >=
                        join_routine = public.scalarlejoinsel
                        negate_operator = >
                        restrict_routine = public.scalarlesel
                <=(bigint,integer): binary operator (bigint, integer) -> boolean [bound to public.int84le]
                    --  less than or equal
                    . references
                        commute_operator = >=
                        join_routine = public.scalarlejoinsel
                        negate_operator = >
                        restrict_routine = public.scalarlesel
                <=(bigint,smallint): binary operator (bigint, smallint) -> boolean [bound to public.int82le]
                    --  less than or equal
                    . references
                        commute_operator = >=
                        join_routine = public.scalarlejoinsel
                        negate_operator = >
                        restrict_routine = public.scalarlesel
                <=(bit varying,bit varying): binary operator (bit varying, bit varying) -> boolean [bound to public.varbitle]
                    --  less than or equal
                    . references
                        commute_operator = >=
                        join_routine = public.scalarlejoinsel
                        negate_operator = >
                        restrict_routine = public.scalarlesel
                <=(bit,bit): binary operator (bit, bit) -> boolean [bound to public.bitle]
                    --  less than or equal
                    . references
                        commute_operator = >=
                        join_routine = public.scalarlejoinsel
                        negate_operator = >
                        restrict_routine = public.scalarlesel
                <=(boolean,boolean): binary operator (boolean, boolean) -> boolean [bound to public.boolle]
                    --  less than or equal
                    . references
                        commute_operator = >=
                        join_routine = public.scalarlejoinsel
                        negate_operator = >
                        restrict_routine = public.scalarlesel
                <=(box,box): binary operator (box, box) -> boolean [bound to public.box_le]
                    --  less than or equal by area
                    . references
                        commute_operator = >=
                        join_routine = public.areajoinsel
                        negate_operator = >
                        restrict_routine = public.areasel
                <=(bytea,bytea): binary operator (bytea, bytea) -> boolean [bound to public.byteale]
                    --  less than or equal
                    . references
                        commute_operator = >=
                        join_routine = public.scalarlejoinsel
                        negate_operator = >
                        restrict_routine = public.scalarlesel
                <=(char,char): binary operator (char, char) -> boolean [bound to public.bpcharle]
                    --  less than or equal
                    . references
                        commute_operator = >=
                        join_routine = public.scalarlejoinsel
                        negate_operator = >
                        restrict_routine = public.scalarlesel
                <=(circle,circle): binary operator (circle, circle) -> boolean [bound to public.circle_le]
                    --  less than or equal by area
                    . references
                        commute_operator = >=
                        join_routine = public.areajoinsel
                        negate_operator = >
                        restrict_routine = public.areasel
                <=(date,date): binary operator (date, date) -> boolean [bound to public.date_le]
                    --  less than or equal
                    . references
                        commute_operator = >=
                        join_routine = public.scalarlejoinsel
                        negate_operator = >
                        restrict_routine = public.scalarlesel
                <=(date,timestamp with time zone): binary operator (date, timestamp with time zone) -> boolean [bound to public.date_le_timestamptz]
                    --  less than or equal
                    . references
                        commute_operator = >=
                        join_routine = public.scalarlejoinsel
                        negate_operator = >
                        restrict_routine = public.scalarlesel
                <=(date,timestamp): binary operator (date, timestamp) -> boolean [bound to public.date_le_timestamp]
                    --  less than or equal
                    . references
                        commute_operator = >=
                        join_routine = public.scalarlejoinsel
                        negate_operator = >
                        restrict_routine = public.scalarlesel
                <=(double precision,double precision): binary operator (double precision, double precision) -> boolean [bound to public.float8le]
                    --  less than or equal
                    . references
                        commute_operator = >=
                        join_routine = public.scalarlejoinsel
                        negate_operator = >
                        restrict_routine = public.scalarlesel
                <=(double precision,real): binary operator (double precision, real) -> boolean [bound to public.float84le]
                    --  less than or equal
                    . references
                        commute_operator = >=
                        join_routine = public.scalarlejoinsel
                        negate_operator = >
                        restrict_routine = public.scalarlesel
                <=(inet,inet): binary operator (inet, inet) -> boolean [bound to public.network_le]
                    --  less than or equal
                    . references
                        commute_operator = >=
                        join_routine = public.scalarlejoinsel
                        negate_operator = >
                        restrict_routine = public.scalarlesel
                <=(integer,bigint): binary operator (integer, bigint) -> boolean [bound to public.int48le]
                    --  less than or equal
                    . references
                        commute_operator = >=
                        join_routine = public.scalarlejoinsel
                        negate_operator = >
                        restrict_routine = public.scalarlesel
                <=(integer,integer): binary operator (integer, integer) -> boolean [bound to public.int4le]
                    --  less than or equal
                    . references
                        commute_operator = >=
                        join_routine = public.scalarlejoinsel
                        negate_operator = >
                        restrict_routine = public.scalarlesel
                <=(integer,smallint): binary operator (integer, smallint) -> boolean [bound to public.int42le]
                    --  less than or equal
                    . references
                        commute_operator = >=
                        join_routine = public.scalarlejoinsel
                        negate_operator = >
                        restrict_routine = public.scalarlesel
                <=(interval,interval): binary operator (interval, interval) -> boolean [bound to public.interval_le]
                    --  less than or equal
                    . references
                        commute_operator = >=
                        join_routine = public.scalarlejoinsel
                        negate_operator = >
                        restrict_routine = public.scalarlesel
                <=(jsonb,jsonb): binary operator (jsonb, jsonb) -> boolean [bound to public.jsonb_le]
                    --  less than or equal
                    . references
                        commute_operator = >=
                        join_routine = public.scalarlejoinsel
                        negate_operator = >
                        restrict_routine = public.scalarlesel
                <=(lseg,lseg): binary operator (lseg, lseg) -> boolean [bound to public.lseg_le]
                    --  less than or equal by length
                    . references
                        commute_operator = >=
                        negate_operator = >
                <=(macaddr,macaddr): binary operator (macaddr, macaddr) -> boolean [bound to public.macaddr_le]
                    --  less than or equal
                    . references
                        commute_operator = >=
                        join_routine = public.scalarlejoinsel
                        negate_operator = >
                        restrict_routine = public.scalarlesel
                <=(macaddr8,macaddr8): binary operator (macaddr8, macaddr8) -> boolean [bound to public.macaddr8_le]
                    --  less than or equal
                    . references
                        commute_operator = >=
                        join_routine = public.scalarlejoinsel
                        negate_operator = >
                        restrict_routine = public.scalarlesel
                <=(money,money): binary operator (money, money) -> boolean [bound to public.cash_le]
                    --  less than or equal
                    . references
                        commute_operator = >=
                        join_routine = public.scalarlejoinsel
                        negate_operator = >
                        restrict_routine = public.scalarlesel
                <=(name,name): binary operator (name, name) -> boolean [bound to public.namele]
                    --  less than or equal
                    . references
                        commute_operator = >=
                        join_routine = public.scalarlejoinsel
                        negate_operator = >
                        restrict_routine = public.scalarlesel
                <=(name,text): binary operator (name, text) -> boolean [bound to public.nameletext]
                    --  less than or equal
                    . references
                        commute_operator = >=
                        join_routine = public.scalarlejoinsel
                        negate_operator = >
                        restrict_routine = public.scalarlesel
                <=(numeric,numeric): binary operator (numeric, numeric) -> boolean [bound to public.numeric_le]
                    --  less than or equal
                    . references
                        commute_operator = >=
                        join_routine = public.scalarlejoinsel
                        negate_operator = >
                        restrict_routine = public.scalarlesel
                <=(oid,oid): binary operator (oid, oid) -> boolean [bound to public.oidle]
                    --  less than or equal
                    . references
                        commute_operator = >=
                        join_routine = public.scalarlejoinsel
                        negate_operator = >
                        restrict_routine = public.scalarlesel
                <=(oidvector,oidvector): binary operator (oidvector, oidvector) -> boolean [bound to public.oidvectorle]
                    --  less than or equal
                    . references
                        commute_operator = >=
                        join_routine = public.scalarlejoinsel
                        negate_operator = >
                        restrict_routine = public.scalarlesel
                <=(path,path): binary operator (path, path) -> boolean [bound to public.path_n_le]
                    --  less than or equal
                    . references
                        commute_operator = >=
                <=(pg_lsn,pg_lsn): binary operator (pg_lsn, pg_lsn) -> boolean [bound to public.pg_lsn_le]
                    --  less than or equal
                    . references
                        commute_operator = >=
                        join_routine = public.scalarlejoinsel
                        negate_operator = >
                        restrict_routine = public.scalarlesel
                <=(real,double precision): binary operator (real, double precision) -> boolean [bound to public.float48le]
                    --  less than or equal
                    . references
                        commute_operator = >=
                        join_routine = public.scalarlejoinsel
                        negate_operator = >
                        restrict_routine = public.scalarlesel
                <=(real,real): binary operator (real, real) -> boolean [bound to public.float4le]
                    --  less than or equal
                    . references
                        commute_operator = >=
                        join_routine = public.scalarlejoinsel
                        negate_operator = >
                        restrict_routine = public.scalarlesel
                <=(record,record): binary operator (record, record) -> boolean [bound to public.record_le]
                    --  less than or equal
                    . references
                        commute_operator = >=
                        join_routine = public.scalarlejoinsel
                        negate_operator = >
                        restrict_routine = public.scalarlesel
                <=(smallint,bigint): binary operator (smallint, bigint) -> boolean [bound to public.int28le]
                    --  less than or equal
                    . references
                        commute_operator = >=
                        join_routine = public.scalarlejoinsel
                        negate_operator = >
                        restrict_routine = public.scalarlesel
                <=(smallint,integer): binary operator (smallint, integer) -> boolean [bound to public.int24le]
                    --  less than or equal
                    . references
                        commute_operator = >=
                        join_routine = public.scalarlejoinsel
                        negate_operator = >
                        restrict_routine = public.scalarlesel
                <=(smallint,smallint): binary operator (smallint, smallint) -> boolean [bound to public.int2le]
                    --  less than or equal
                    . references
                        commute_operator = >=
                        join_routine = public.scalarlejoinsel
                        negate_operator = >
                        restrict_routine = public.scalarlesel
                <=(text,name): binary operator (text, name) -> boolean [bound to public.textlename]
                    --  less than or equal
                    . references
                        commute_operator = >=
                        join_routine = public.scalarlejoinsel
                        negate_operator = >
                        restrict_routine = public.scalarlesel
                <=(text,text): binary operator (text, text) -> boolean [bound to public.text_le]
                    --  less than or equal
                    . references
                        commute_operator = >=
                        join_routine = public.scalarlejoinsel
                        negate_operator = >
                        restrict_routine = public.scalarlesel
                <=(tid,tid): binary operator (tid, tid) -> boolean [bound to public.tidle]
                    --  less than or equal
                    . references
                        commute_operator = >=
                        join_routine = public.scalarlejoinsel
                        negate_operator = >
                        restrict_routine = public.scalarlesel
                <=(time with time zone,time with time zone): binary operator (time with time zone, time with time zone) -> boolean [bound to public.timetz_le]
                    --  less than or equal
                    . references
                        commute_operator = >=
                        join_routine = public.scalarlejoinsel
                        negate_operator = >
                        restrict_routine = public.scalarlesel
                <=(time,time): binary operator (time, time) -> boolean [bound to public.time_le]
                    --  less than or equal
                    . references
                        commute_operator = >=
                        join_routine = public.scalarlejoinsel
                        negate_operator = >
                        restrict_routine = public.scalarlesel
                <=(timestamp with time zone,date): binary operator (timestamp with time zone, date) -> boolean [bound to public.timestamptz_le_date]
                    --  less than or equal
                    . references
                        commute_operator = >=
                        join_routine = public.scalarlejoinsel
                        negate_operator = >
                        restrict_routine = public.scalarlesel
                <=(timestamp with time zone,timestamp with time zone): binary operator (timestamp with time zone, timestamp with time zone) -> boolean [bound to public.timestamptz_le]
                    --  less than or equal
                    . references
                        commute_operator = >=
                        join_routine = public.scalarlejoinsel
                        negate_operator = >
                        restrict_routine = public.scalarlesel
                <=(timestamp with time zone,timestamp): binary operator (timestamp with time zone, timestamp) -> boolean [bound to public.timestamptz_le_timestamp]
                    --  less than or equal
                    . references
                        commute_operator = >=
                        join_routine = public.scalarlejoinsel
                        negate_operator = >
                        restrict_routine = public.scalarlesel
                <=(timestamp,date): binary operator (timestamp, date) -> boolean [bound to public.timestamp_le_date]
                    --  less than or equal
                    . references
                        commute_operator = >=
                        join_routine = public.scalarlejoinsel
                        negate_operator = >
                        restrict_routine = public.scalarlesel
                <=(timestamp,timestamp with time zone): binary operator (timestamp, timestamp with time zone) -> boolean [bound to public.timestamp_le_timestamptz]
                    --  less than or equal
                    . references
                        commute_operator = >=
                        join_routine = public.scalarlejoinsel
                        negate_operator = >
                        restrict_routine = public.scalarlesel
                <=(timestamp,timestamp): binary operator (timestamp, timestamp) -> boolean [bound to public.timestamp_le]
                    --  less than or equal
                    . references
                        commute_operator = >=
                        join_routine = public.scalarlejoinsel
                        negate_operator = >
                        restrict_routine = public.scalarlesel
                <=(tsquery,tsquery): binary operator (tsquery, tsquery) -> boolean [bound to public.tsquery_le]
                    --  less than or equal
                    . references
                        commute_operator = >=
                        join_routine = public.scalarlejoinsel
                        negate_operator = >
                        restrict_routine = public.scalarlesel
                <=(tsvector,tsvector): binary operator (tsvector, tsvector) -> boolean [bound to public.tsvector_le]
                    --  less than or equal
                    . references
                        commute_operator = >=
                        join_routine = public.scalarlejoinsel
                        negate_operator = >
                        restrict_routine = public.scalarlesel
                <=(uuid,uuid): binary operator (uuid, uuid) -> boolean [bound to public.uuid_le]
                    --  less than or equal
                    . references
                        commute_operator = >=
                        join_routine = public.scalarlejoinsel
                        negate_operator = >
                        restrict_routine = public.scalarlesel
                <>("char","char"): binary operator ("char", "char") -> boolean [bound to public.charne]
                    --  not equal
                    . references
                        commute_operator = <>
                        join_routine = public.neqjoinsel
                        negate_operator = =
                        restrict_routine = public.neqsel
                <>(anyarray,anyarray): binary operator (anyarray, anyarray) -> boolean [bound to public.array_ne]
                    --  not equal
                    . references
                        commute_operator = <>
                        join_routine = public.neqjoinsel
                        negate_operator = =
                        restrict_routine = public.neqsel
                <>(anyenum,anyenum): binary operator (anyenum, anyenum) -> boolean [bound to public.enum_ne]
                    --  not equal
                    . references
                        commute_operator = <>
                        join_routine = public.neqjoinsel
                        negate_operator = =
                        restrict_routine = public.neqsel
                <>(anyrange,anyrange): binary operator (anyrange, anyrange) -> boolean [bound to public.range_ne]
                    --  not equal
                    . references
                        commute_operator = <>
                        join_routine = public.neqjoinsel
                        negate_operator = =
                        restrict_routine = public.neqsel
                <>(bigint,bigint): binary operator (bigint, bigint) -> boolean [bound to public.int8ne]
                    --  not equal
                    . references
                        commute_operator = <>
                        join_routine = public.neqjoinsel
                        negate_operator = =
                        restrict_routine = public.neqsel
                <>(bigint,integer): binary operator (bigint, integer) -> boolean [bound to public.int84ne]
                    --  not equal
                    . references
                        commute_operator = <>
                        join_routine = public.neqjoinsel
                        negate_operator = =
                        restrict_routine = public.neqsel
                <>(bigint,smallint): binary operator (bigint, smallint) -> boolean [bound to public.int82ne]
                    --  not equal
                    . references
                        commute_operator = <>
                        join_routine = public.neqjoinsel
                        negate_operator = =
                        restrict_routine = public.neqsel
                <>(bit varying,bit varying): binary operator (bit varying, bit varying) -> boolean [bound to public.varbitne]
                    --  not equal
                    . references
                        commute_operator = <>
                        join_routine = public.neqjoinsel
                        negate_operator = =
                        restrict_routine = public.neqsel
                <>(bit,bit): binary operator (bit, bit) -> boolean [bound to public.bitne]
                    --  not equal
                    . references
                        commute_operator = <>
                        join_routine = public.neqjoinsel
                        negate_operator = =
                        restrict_routine = public.neqsel
                <>(boolean,boolean): binary operator (boolean, boolean) -> boolean [bound to public.boolne]
                    --  not equal
                    . references
                        commute_operator = <>
                        join_routine = public.neqjoinsel
                        negate_operator = =
                        restrict_routine = public.neqsel
                <>(bytea,bytea): binary operator (bytea, bytea) -> boolean [bound to public.byteane]
                    --  not equal
                    . references
                        commute_operator = <>
                        join_routine = public.neqjoinsel
                        negate_operator = =
                        restrict_routine = public.neqsel
                <>(char,char): binary operator (char, char) -> boolean [bound to public.bpcharne]
                    --  not equal
                    . references
                        commute_operator = <>
                        join_routine = public.neqjoinsel
                        negate_operator = =
                        restrict_routine = public.neqsel
                <>(circle,circle): binary operator (circle, circle) -> boolean [bound to public.circle_ne]
                    --  not equal by area
                    . references
                        commute_operator = <>
                        join_routine = public.neqjoinsel
                        negate_operator = =
                        restrict_routine = public.neqsel
                <>(date,date): binary operator (date, date) -> boolean [bound to public.date_ne]
                    --  not equal
                    . references
                        commute_operator = <>
                        join_routine = public.neqjoinsel
                        negate_operator = =
                        restrict_routine = public.neqsel
                <>(date,timestamp with time zone): binary operator (date, timestamp with time zone) -> boolean [bound to public.date_ne_timestamptz]
                    --  not equal
                    . references
                        commute_operator = <>
                        join_routine = public.neqjoinsel
                        negate_operator = =
                        restrict_routine = public.neqsel
                <>(date,timestamp): binary operator (date, timestamp) -> boolean [bound to public.date_ne_timestamp]
                    --  not equal
                    . references
                        commute_operator = <>
                        join_routine = public.neqjoinsel
                        negate_operator = =
                        restrict_routine = public.neqsel
                <>(double precision,double precision): binary operator (double precision, double precision) -> boolean [bound to public.float8ne]
                    --  not equal
                    . references
                        commute_operator = <>
                        join_routine = public.neqjoinsel
                        negate_operator = =
                        restrict_routine = public.neqsel
                <>(double precision,real): binary operator (double precision, real) -> boolean [bound to public.float84ne]
                    --  not equal
                    . references
                        commute_operator = <>
                        join_routine = public.neqjoinsel
                        negate_operator = =
                        restrict_routine = public.neqsel
                <>(inet,inet): binary operator (inet, inet) -> boolean [bound to public.network_ne]
                    --  not equal
                    . references
                        commute_operator = <>
                        join_routine = public.neqjoinsel
                        negate_operator = =
                        restrict_routine = public.neqsel
                <>(integer,bigint): binary operator (integer, bigint) -> boolean [bound to public.int48ne]
                    --  not equal
                    . references
                        commute_operator = <>
                        join_routine = public.neqjoinsel
                        negate_operator = =
                        restrict_routine = public.neqsel
                <>(integer,integer): binary operator (integer, integer) -> boolean [bound to public.int4ne]
                    --  not equal
                    . references
                        commute_operator = <>
                        join_routine = public.neqjoinsel
                        negate_operator = =
                        restrict_routine = public.neqsel
                <>(integer,smallint): binary operator (integer, smallint) -> boolean [bound to public.int42ne]
                    --  not equal
                    . references
                        commute_operator = <>
                        join_routine = public.neqjoinsel
                        negate_operator = =
                        restrict_routine = public.neqsel
                <>(interval,interval): binary operator (interval, interval) -> boolean [bound to public.interval_ne]
                    --  not equal
                    . references
                        commute_operator = <>
                        join_routine = public.neqjoinsel
                        negate_operator = =
                        restrict_routine = public.neqsel
                <>(jsonb,jsonb): binary operator (jsonb, jsonb) -> boolean [bound to public.jsonb_ne]
                    --  not equal
                    . references
                        commute_operator = <>
                        join_routine = public.neqjoinsel
                        negate_operator = =
                        restrict_routine = public.neqsel
                <>(lseg,lseg): binary operator (lseg, lseg) -> boolean [bound to public.lseg_ne]
                    --  not equal
                    . references
                        commute_operator = <>
                        join_routine = public.neqjoinsel
                        negate_operator = =
                        restrict_routine = public.neqsel
                <>(macaddr,macaddr): binary operator (macaddr, macaddr) -> boolean [bound to public.macaddr_ne]
                    --  not equal
                    . references
                        commute_operator = <>
                        join_routine = public.neqjoinsel
                        negate_operator = =
                        restrict_routine = public.neqsel
                <>(macaddr8,macaddr8): binary operator (macaddr8, macaddr8) -> boolean [bound to public.macaddr8_ne]
                    --  not equal
                    . references
                        commute_operator = <>
                        join_routine = public.neqjoinsel
                        negate_operator = =
                        restrict_routine = public.neqsel
                <>(money,money): binary operator (money, money) -> boolean [bound to public.cash_ne]
                    --  not equal
                    . references
                        commute_operator = <>
                        join_routine = public.neqjoinsel
                        negate_operator = =
                        restrict_routine = public.neqsel
                <>(name,name): binary operator (name, name) -> boolean [bound to public.namene]
                    --  not equal
                    . references
                        commute_operator = <>
                        join_routine = public.neqjoinsel
                        negate_operator = =
                        restrict_routine = public.neqsel
                <>(name,text): binary operator (name, text) -> boolean [bound to public.namenetext]
                    --  not equal
                    . references
                        commute_operator = <>
                        join_routine = public.neqjoinsel
                        negate_operator = =
                        restrict_routine = public.neqsel
                <>(numeric,numeric): binary operator (numeric, numeric) -> boolean [bound to public.numeric_ne]
                    --  not equal
                    . references
                        commute_operator = <>
                        join_routine = public.neqjoinsel
                        negate_operator = =
                        restrict_routine = public.neqsel
                <>(oid,oid): binary operator (oid, oid) -> boolean [bound to public.oidne]
                    --  not equal
                    . references
                        commute_operator = <>
                        join_routine = public.neqjoinsel
                        negate_operator = =
                        restrict_routine = public.neqsel
                <>(oidvector,oidvector): binary operator (oidvector, oidvector) -> boolean [bound to public.oidvectorne]
                    --  not equal
                    . references
                        commute_operator = <>
                        join_routine = public.neqjoinsel
                        negate_operator = =
                        restrict_routine = public.neqsel
                <>(pg_lsn,pg_lsn): binary operator (pg_lsn, pg_lsn) -> boolean [bound to public.pg_lsn_ne]
                    --  not equal
                    . references
                        commute_operator = <>
                        join_routine = public.neqjoinsel
                        negate_operator = =
                        restrict_routine = public.neqsel
                <>(point,point): binary operator (point, point) -> boolean [bound to public.point_ne]
                    --  not equal
                    . references
                        commute_operator = <>
                        join_routine = public.neqjoinsel
                        negate_operator = ~=
                        restrict_routine = public.neqsel
                <>(real,double precision): binary operator (real, double precision) -> boolean [bound to public.float48ne]
                    --  not equal
                    . references
                        commute_operator = <>
                        join_routine = public.neqjoinsel
                        negate_operator = =
                        restrict_routine = public.neqsel
                <>(real,real): binary operator (real, real) -> boolean [bound to public.float4ne]
                    --  not equal
                    . references
                        commute_operator = <>
                        join_routine = public.neqjoinsel
                        negate_operator = =
                        restrict_routine = public.neqsel
                <>(record,record): binary operator (record, record) -> boolean [bound to public.record_ne]
                    --  not equal
                    . references
                        commute_operator = <>
                        join_routine = public.neqjoinsel
                        negate_operator = =
                        restrict_routine = public.neqsel
                <>(smallint,bigint): binary operator (smallint, bigint) -> boolean [bound to public.int28ne]
                    --  not equal
                    . references
                        commute_operator = <>
                        join_routine = public.neqjoinsel
                        negate_operator = =
                        restrict_routine = public.neqsel
                <>(smallint,integer): binary operator (smallint, integer) -> boolean [bound to public.int24ne]
                    --  not equal
                    . references
                        commute_operator = <>
                        join_routine = public.neqjoinsel
                        negate_operator = =
                        restrict_routine = public.neqsel
                <>(smallint,smallint): binary operator (smallint, smallint) -> boolean [bound to public.int2ne]
                    --  not equal
                    . references
                        commute_operator = <>
                        join_routine = public.neqjoinsel
                        negate_operator = =
                        restrict_routine = public.neqsel
                <>(text,name): binary operator (text, name) -> boolean [bound to public.textnename]
                    --  not equal
                    . references
                        commute_operator = <>
                        join_routine = public.neqjoinsel
                        negate_operator = =
                        restrict_routine = public.neqsel
                <>(text,text): binary operator (text, text) -> boolean [bound to public.textne]
                    --  not equal
                    . references
                        commute_operator = <>
                        join_routine = public.neqjoinsel
                        negate_operator = =
                        restrict_routine = public.neqsel
                <>(tid,tid): binary operator (tid, tid) -> boolean [bound to public.tidne]
                    --  not equal
                    . references
                        commute_operator = <>
                        join_routine = public.neqjoinsel
                        negate_operator = =
                        restrict_routine = public.neqsel
                <>(time with time zone,time with time zone): binary operator (time with time zone, time with time zone) -> boolean [bound to public.timetz_ne]
                    --  not equal
                    . references
                        commute_operator = <>
                        join_routine = public.neqjoinsel
                        negate_operator = =
                        restrict_routine = public.neqsel
                <>(time,time): binary operator (time, time) -> boolean [bound to public.time_ne]
                    --  not equal
                    . references
                        commute_operator = <>
                        join_routine = public.neqjoinsel
                        negate_operator = =
                        restrict_routine = public.neqsel
                <>(timestamp with time zone,date): binary operator (timestamp with time zone, date) -> boolean [bound to public.timestamptz_ne_date]
                    --  not equal
                    . references
                        commute_operator = <>
                        join_routine = public.neqjoinsel
                        negate_operator = =
                        restrict_routine = public.neqsel
                <>(timestamp with time zone,timestamp with time zone): binary operator (timestamp with time zone, timestamp with time zone) -> boolean [bound to public.timestamptz_ne]
                    --  not equal
                    . references
                        commute_operator = <>
                        join_routine = public.neqjoinsel
                        negate_operator = =
                        restrict_routine = public.neqsel
                <>(timestamp with time zone,timestamp): binary operator (timestamp with time zone, timestamp) -> boolean [bound to public.timestamptz_ne_timestamp]
                    --  not equal
                    . references
                        commute_operator = <>
                        join_routine = public.neqjoinsel
                        negate_operator = =
                        restrict_routine = public.neqsel
                <>(timestamp,date): binary operator (timestamp, date) -> boolean [bound to public.timestamp_ne_date]
                    --  not equal
                    . references
                        commute_operator = <>
                        join_routine = public.neqjoinsel
                        negate_operator = =
                        restrict_routine = public.neqsel
                <>(timestamp,timestamp with time zone): binary operator (timestamp, timestamp with time zone) -> boolean [bound to public.timestamp_ne_timestamptz]
                    --  not equal
                    . references
                        commute_operator = <>
                        join_routine = public.neqjoinsel
                        negate_operator = =
                        restrict_routine = public.neqsel
                <>(timestamp,timestamp): binary operator (timestamp, timestamp) -> boolean [bound to public.timestamp_ne]
                    --  not equal
                    . references
                        commute_operator = <>
                        join_routine = public.neqjoinsel
                        negate_operator = =
                        restrict_routine = public.neqsel
                <>(tsquery,tsquery): binary operator (tsquery, tsquery) -> boolean [bound to public.tsquery_ne]
                    --  not equal
                    . references
                        commute_operator = <>
                        join_routine = public.neqjoinsel
                        negate_operator = =
                        restrict_routine = public.neqsel
                <>(tsvector,tsvector): binary operator (tsvector, tsvector) -> boolean [bound to public.tsvector_ne]
                    --  not equal
                    . references
                        commute_operator = <>
                        join_routine = public.neqjoinsel
                        negate_operator = =
                        restrict_routine = public.neqsel
                <>(uuid,uuid): binary operator (uuid, uuid) -> boolean [bound to public.uuid_ne]
                    --  not equal
                    . references
                        commute_operator = <>
                        join_routine = public.neqjoinsel
                        negate_operator = =
                        restrict_routine = public.neqsel
                <>(xid,integer): binary operator (xid, integer) -> boolean [bound to public.xidneqint4]
                    --  not equal
                    . references
                        join_routine = public.neqjoinsel
                        negate_operator = =
                        restrict_routine = public.neqsel
                <>(xid,xid): binary operator (xid, xid) -> boolean [bound to public.xidneq]
                    --  not equal
                    . references
                        commute_operator = <>
                        join_routine = public.neqjoinsel
                        negate_operator = =
                        restrict_routine = public.neqsel
                <@(anyarray,anyarray): binary operator (anyarray, anyarray) -> boolean [bound to public.arraycontained]
                    --  is contained by
                    . references
                        commute_operator = @>
                        join_routine = public.arraycontjoinsel
                        restrict_routine = public.arraycontsel
                <@(anyelement,anyrange): binary operator (anyelement, anyrange) -> boolean [bound to public.elem_contained_by_range]
                    --  is contained by
                    . references
                        commute_operator = @>
                        join_routine = public.contjoinsel
                        restrict_routine = public.rangesel
                <@(anyrange,anyrange): binary operator (anyrange, anyrange) -> boolean [bound to public.range_contained_by]
                    --  is contained by
                    . references
                        commute_operator = @>
                        join_routine = public.contjoinsel
                        restrict_routine = public.rangesel
                <@(box,box): binary operator (box, box) -> boolean [bound to public.box_contained]
                    --  is contained by
                    . references
                        commute_operator = @>
                        join_routine = public.contjoinsel
                        restrict_routine = public.contsel
                <@(circle,circle): binary operator (circle, circle) -> boolean [bound to public.circle_contained]
                    --  is contained by
                    . references
                        commute_operator = @>
                        join_routine = public.contjoinsel
                        restrict_routine = public.contsel
                <@(jsonb,jsonb): binary operator (jsonb, jsonb) -> boolean [bound to public.jsonb_contained]
                    --  is contained by
                    . references
                        commute_operator = @>
                        join_routine = public.contjoinsel
                        restrict_routine = public.contsel
                <@(lseg,box): binary operator (lseg, box) -> boolean [bound to public.on_sb]
                    --  is contained by
                <@(lseg,line): binary operator (lseg, line) -> boolean [bound to public.on_sl]
                    --  lseg on line
                <@(point,box): binary operator (point, box) -> boolean [bound to public.on_pb]
                    --  point inside box
                    . references
                        commute_operator = @>
                        join_routine = public.contjoinsel
                        restrict_routine = public.contsel
                <@(point,circle): binary operator (point, circle) -> boolean [bound to public.pt_contained_circle]
                    --  is contained by
                    . references
                        commute_operator = @>
                        join_routine = public.contjoinsel
                        restrict_routine = public.contsel
                <@(point,line): binary operator (point, line) -> boolean [bound to public.on_pl]
                    --  point on line
                <@(point,lseg): binary operator (point, lseg) -> boolean [bound to public.on_ps]
                    --  is contained by
                <@(point,path): binary operator (point, path) -> boolean [bound to public.on_ppath]
                    --  point within closed path, or point on open path
                    . references
                        commute_operator = @>
                <@(point,polygon): binary operator (point, polygon) -> boolean [bound to public.pt_contained_poly]
                    --  is contained by
                    . references
                        commute_operator = @>
                        join_routine = public.contjoinsel
                        restrict_routine = public.contsel
                <@(polygon,polygon): binary operator (polygon, polygon) -> boolean [bound to public.poly_contained]
                    --  is contained by
                    . references
                        commute_operator = @>
                        join_routine = public.contjoinsel
                        restrict_routine = public.contsel
                <@(tsquery,tsquery): binary operator (tsquery, tsquery) -> boolean [bound to public.tsq_mcontained]
                    --  is contained by
                    . references
                        commute_operator = @>
                        join_routine = public.contjoinsel
                        restrict_routine = public.contsel
                <^(box,box): binary operator (box, box) -> boolean [bound to public.box_below_eq]
                    --  is below (allows touching)
                    . references
                        join_routine = public.positionjoinsel
                        restrict_routine = public.positionsel
                <^(point,point): binary operator (point, point) -> boolean [bound to public.point_below]
                    --  is below
                    . references
                        join_routine = public.positionjoinsel
                        restrict_routine = public.positionsel
                =("char","char"): binary operator ("char", "char") -> boolean [bound to public.chareq]
                    --  equal
                    . properties
                        hashes +
                        merges +
                    . references
                        commute_operator = =
                        join_routine = public.eqjoinsel
                        negate_operator = <>
                        restrict_routine = public.eqsel
                =(aclitem,aclitem): binary operator (aclitem, aclitem) -> boolean [bound to public.aclitemeq]
                    --  equal
                    . properties
                        hashes +
                    . references
                        commute_operator = =
                        join_routine = public.eqjoinsel
                        restrict_routine = public.eqsel
                =(anyarray,anyarray): binary operator (anyarray, anyarray) -> boolean [bound to public.array_eq]
                    --  equal
                    . properties
                        hashes +
                        merges +
                    . references
                        commute_operator = =
                        join_routine = public.eqjoinsel
                        negate_operator = <>
                        restrict_routine = public.eqsel
                =(anyenum,anyenum): binary operator (anyenum, anyenum) -> boolean [bound to public.enum_eq]
                    --  equal
                    . properties
                        hashes +
                        merges +
                    . references
                        commute_operator = =
                        join_routine = public.eqjoinsel
                        negate_operator = <>
                        restrict_routine = public.eqsel
                =(anyrange,anyrange): binary operator (anyrange, anyrange) -> boolean [bound to public.range_eq]
                    --  equal
                    . properties
                        hashes +
                        merges +
                    . references
                        commute_operator = =
                        join_routine = public.eqjoinsel
                        negate_operator = <>
                        restrict_routine = public.eqsel
                =(bigint,bigint): binary operator (bigint, bigint) -> boolean [bound to public.int8eq]
                    --  equal
                    . properties
                        hashes +
                        merges +
                    . references
                        commute_operator = =
                        join_routine = public.eqjoinsel
                        negate_operator = <>
                        restrict_routine = public.eqsel
                =(bigint,integer): binary operator (bigint, integer) -> boolean [bound to public.int84eq]
                    --  equal
                    . properties
                        hashes +
                        merges +
                    . references
                        commute_operator = =
                        join_routine = public.eqjoinsel
                        negate_operator = <>
                        restrict_routine = public.eqsel
                =(bigint,smallint): binary operator (bigint, smallint) -> boolean [bound to public.int82eq]
                    --  equal
                    . properties
                        hashes +
                        merges +
                    . references
                        commute_operator = =
                        join_routine = public.eqjoinsel
                        negate_operator = <>
                        restrict_routine = public.eqsel
                =(bit varying,bit varying): binary operator (bit varying, bit varying) -> boolean [bound to public.varbiteq]
                    --  equal
                    . properties
                        merges +
                    . references
                        commute_operator = =
                        join_routine = public.eqjoinsel
                        negate_operator = <>
                        restrict_routine = public.eqsel
                =(bit,bit): binary operator (bit, bit) -> boolean [bound to public.biteq]
                    --  equal
                    . properties
                        merges +
                    . references
                        commute_operator = =
                        join_routine = public.eqjoinsel
                        negate_operator = <>
                        restrict_routine = public.eqsel
                =(boolean,boolean): binary operator (boolean, boolean) -> boolean [bound to public.booleq]
                    --  equal
                    . properties
                        hashes +
                        merges +
                    . references
                        commute_operator = =
                        join_routine = public.eqjoinsel
                        negate_operator = <>
                        restrict_routine = public.eqsel
                =(box,box): binary operator (box, box) -> boolean [bound to public.box_eq]
                    --  equal by area
                    . references
                        commute_operator = =
                        join_routine = public.eqjoinsel
                        restrict_routine = public.eqsel
                =(bytea,bytea): binary operator (bytea, bytea) -> boolean [bound to public.byteaeq]
                    --  equal
                    . properties
                        hashes +
                        merges +
                    . references
                        commute_operator = =
                        join_routine = public.eqjoinsel
                        negate_operator = <>
                        restrict_routine = public.eqsel
                =(char,char): binary operator (char, char) -> boolean [bound to public.bpchareq]
                    --  equal
                    . properties
                        hashes +
                        merges +
                    . references
                        commute_operator = =
                        join_routine = public.eqjoinsel
                        negate_operator = <>
                        restrict_routine = public.eqsel
                =(cid,cid): binary operator (cid, cid) -> boolean [bound to public.cideq]
                    --  equal
                    . properties
                        hashes +
                    . references
                        commute_operator = =
                        join_routine = public.eqjoinsel
                        restrict_routine = public.eqsel
                =(circle,circle): binary operator (circle, circle) -> boolean [bound to public.circle_eq]
                    --  equal by area
                    . references
                        commute_operator = =
                        join_routine = public.eqjoinsel
                        negate_operator = <>
                        restrict_routine = public.eqsel
                =(date,date): binary operator (date, date) -> boolean [bound to public.date_eq]
                    --  equal
                    . properties
                        hashes +
                        merges +
                    . references
                        commute_operator = =
                        join_routine = public.eqjoinsel
                        negate_operator = <>
                        restrict_routine = public.eqsel
                =(date,timestamp with time zone): binary operator (date, timestamp with time zone) -> boolean [bound to public.date_eq_timestamptz]
                    --  equal
                    . properties
                        merges +
                    . references
                        commute_operator = =
                        join_routine = public.eqjoinsel
                        negate_operator = <>
                        restrict_routine = public.eqsel
                =(date,timestamp): binary operator (date, timestamp) -> boolean [bound to public.date_eq_timestamp]
                    --  equal
                    . properties
                        merges +
                    . references
                        commute_operator = =
                        join_routine = public.eqjoinsel
                        negate_operator = <>
                        restrict_routine = public.eqsel
                =(double precision,double precision): binary operator (double precision, double precision) -> boolean [bound to public.float8eq]
                    --  equal
                    . properties
                        hashes +
                        merges +
                    . references
                        commute_operator = =
                        join_routine = public.eqjoinsel
                        negate_operator = <>
                        restrict_routine = public.eqsel
                =(double precision,real): binary operator (double precision, real) -> boolean [bound to public.float84eq]
                    --  equal
                    . properties
                        hashes +
                        merges +
                    . references
                        commute_operator = =
                        join_routine = public.eqjoinsel
                        negate_operator = <>
                        restrict_routine = public.eqsel
                =(inet,inet): binary operator (inet, inet) -> boolean [bound to public.network_eq]
                    --  equal
                    . properties
                        hashes +
                        merges +
                    . references
                        commute_operator = =
                        join_routine = public.eqjoinsel
                        negate_operator = <>
                        restrict_routine = public.eqsel
                =(integer,bigint): binary operator (integer, bigint) -> boolean [bound to public.int48eq]
                    --  equal
                    . properties
                        hashes +
                        merges +
                    . references
                        commute_operator = =
                        join_routine = public.eqjoinsel
                        negate_operator = <>
                        restrict_routine = public.eqsel
                =(integer,integer): binary operator (integer, integer) -> boolean [bound to public.int4eq]
                    --  equal
                    . properties
                        hashes +
                        merges +
                    . references
                        commute_operator = =
                        join_routine = public.eqjoinsel
                        negate_operator = <>
                        restrict_routine = public.eqsel
                =(integer,smallint): binary operator (integer, smallint) -> boolean [bound to public.int42eq]
                    --  equal
                    . properties
                        hashes +
                        merges +
                    . references
                        commute_operator = =
                        join_routine = public.eqjoinsel
                        negate_operator = <>
                        restrict_routine = public.eqsel
                =(interval,interval): binary operator (interval, interval) -> boolean [bound to public.interval_eq]
                    --  equal
                    . properties
                        hashes +
                        merges +
                    . references
                        commute_operator = =
                        join_routine = public.eqjoinsel
                        negate_operator = <>
                        restrict_routine = public.eqsel
                =(jsonb,jsonb): binary operator (jsonb, jsonb) -> boolean [bound to public.jsonb_eq]
                    --  equal
                    . properties
                        hashes +
                        merges +
                    . references
                        commute_operator = =
                        join_routine = public.eqjoinsel
                        negate_operator = <>
                        restrict_routine = public.eqsel
                =(line,line): binary operator (line, line) -> boolean [bound to public.line_eq]
                    --  equal
                    . references
                        commute_operator = =
                        join_routine = public.eqjoinsel
                        restrict_routine = public.eqsel
                =(lseg,lseg): binary operator (lseg, lseg) -> boolean [bound to public.lseg_eq]
                    --  equal
                    . references
                        commute_operator = =
                        join_routine = public.eqjoinsel
                        negate_operator = <>
                        restrict_routine = public.eqsel
                =(macaddr,macaddr): binary operator (macaddr, macaddr) -> boolean [bound to public.macaddr_eq]
                    --  equal
                    . properties
                        hashes +
                        merges +
                    . references
                        commute_operator = =
                        join_routine = public.eqjoinsel
                        negate_operator = <>
                        restrict_routine = public.eqsel
                =(macaddr8,macaddr8): binary operator (macaddr8, macaddr8) -> boolean [bound to public.macaddr8_eq]
                    --  equal
                    . properties
                        hashes +
                        merges +
                    . references
                        commute_operator = =
                        join_routine = public.eqjoinsel
                        negate_operator = <>
                        restrict_routine = public.eqsel
                =(money,money): binary operator (money, money) -> boolean [bound to public.cash_eq]
                    --  equal
                    . properties
                        merges +
                    . references
                        commute_operator = =
                        join_routine = public.eqjoinsel
                        negate_operator = <>
                        restrict_routine = public.eqsel
                =(name,name): binary operator (name, name) -> boolean [bound to public.nameeq]
                    --  equal
                    . properties
                        hashes +
                        merges +
                    . references
                        commute_operator = =
                        join_routine = public.eqjoinsel
                        negate_operator = <>
                        restrict_routine = public.eqsel
                =(name,text): binary operator (name, text) -> boolean [bound to public.nameeqtext]
                    --  equal
                    . properties
                        hashes +
                        merges +
                    . references
                        commute_operator = =
                        join_routine = public.eqjoinsel
                        negate_operator = <>
                        restrict_routine = public.eqsel
                =(numeric,numeric): binary operator (numeric, numeric) -> boolean [bound to public.numeric_eq]
                    --  equal
                    . properties
                        hashes +
                        merges +
                    . references
                        commute_operator = =
                        join_routine = public.eqjoinsel
                        negate_operator = <>
                        restrict_routine = public.eqsel
                =(oid,oid): binary operator (oid, oid) -> boolean [bound to public.oideq]
                    --  equal
                    . properties
                        hashes +
                        merges +
                    . references
                        commute_operator = =
                        join_routine = public.eqjoinsel
                        negate_operator = <>
                        restrict_routine = public.eqsel
                =(oidvector,oidvector): binary operator (oidvector, oidvector) -> boolean [bound to public.oidvectoreq]
                    --  equal
                    . properties
                        hashes +
                        merges +
                    . references
                        commute_operator = =
                        join_routine = public.eqjoinsel
                        negate_operator = <>
                        restrict_routine = public.eqsel
                =(path,path): binary operator (path, path) -> boolean [bound to public.path_n_eq]
                    --  equal
                    . references
                        commute_operator = =
                        join_routine = public.eqjoinsel
                        restrict_routine = public.eqsel
                =(pg_lsn,pg_lsn): binary operator (pg_lsn, pg_lsn) -> boolean [bound to public.pg_lsn_eq]
                    --  equal
                    . properties
                        hashes +
                        merges +
                    . references
                        commute_operator = =
                        join_routine = public.eqjoinsel
                        negate_operator = <>
                        restrict_routine = public.eqsel
                =(real,double precision): binary operator (real, double precision) -> boolean [bound to public.float48eq]
                    --  equal
                    . properties
                        hashes +
                        merges +
                    . references
                        commute_operator = =
                        join_routine = public.eqjoinsel
                        negate_operator = <>
                        restrict_routine = public.eqsel
                =(real,real): binary operator (real, real) -> boolean [bound to public.float4eq]
                    --  equal
                    . properties
                        hashes +
                        merges +
                    . references
                        commute_operator = =
                        join_routine = public.eqjoinsel
                        negate_operator = <>
                        restrict_routine = public.eqsel
                =(record,record): binary operator (record, record) -> boolean [bound to public.record_eq]
                    --  equal
                    . properties
                        merges +
                    . references
                        commute_operator = =
                        join_routine = public.eqjoinsel
                        negate_operator = <>
                        restrict_routine = public.eqsel
                =(smallint,bigint): binary operator (smallint, bigint) -> boolean [bound to public.int28eq]
                    --  equal
                    . properties
                        hashes +
                        merges +
                    . references
                        commute_operator = =
                        join_routine = public.eqjoinsel
                        negate_operator = <>
                        restrict_routine = public.eqsel
                =(smallint,integer): binary operator (smallint, integer) -> boolean [bound to public.int24eq]
                    --  equal
                    . properties
                        hashes +
                        merges +
                    . references
                        commute_operator = =
                        join_routine = public.eqjoinsel
                        negate_operator = <>
                        restrict_routine = public.eqsel
                =(smallint,smallint): binary operator (smallint, smallint) -> boolean [bound to public.int2eq]
                    --  equal
                    . properties
                        hashes +
                        merges +
                    . references
                        commute_operator = =
                        join_routine = public.eqjoinsel
                        negate_operator = <>
                        restrict_routine = public.eqsel
                =(text,name): binary operator (text, name) -> boolean [bound to public.texteqname]
                    --  equal
                    . properties
                        hashes +
                        merges +
                    . references
                        commute_operator = =
                        join_routine = public.eqjoinsel
                        negate_operator = <>
                        restrict_routine = public.eqsel
                =(text,text): binary operator (text, text) -> boolean [bound to public.texteq]
                    --  equal
                    . properties
                        hashes +
                        merges +
                    . references
                        commute_operator = =
                        join_routine = public.eqjoinsel
                        negate_operator = <>
                        restrict_routine = public.eqsel
                =(tid,tid): binary operator (tid, tid) -> boolean [bound to public.tideq]
                    --  equal
                    . properties
                        hashes +
                        merges +
                    . references
                        commute_operator = =
                        join_routine = public.eqjoinsel
                        negate_operator = <>
                        restrict_routine = public.eqsel
                =(time with time zone,time with time zone): binary operator (time with time zone, time with time zone) -> boolean [bound to public.timetz_eq]
                    --  equal
                    . properties
                        hashes +
                        merges +
                    . references
                        commute_operator = =
                        join_routine = public.eqjoinsel
                        negate_operator = <>
                        restrict_routine = public.eqsel
                =(time,time): binary operator (time, time) -> boolean [bound to public.time_eq]
                    --  equal
                    . properties
                        hashes +
                        merges +
                    . references
                        commute_operator = =
                        join_routine = public.eqjoinsel
                        negate_operator = <>
                        restrict_routine = public.eqsel
                =(timestamp with time zone,date): binary operator (timestamp with time zone, date) -> boolean [bound to public.timestamptz_eq_date]
                    --  equal
                    . properties
                        merges +
                    . references
                        commute_operator = =
                        join_routine = public.eqjoinsel
                        negate_operator = <>
                        restrict_routine = public.eqsel
                =(timestamp with time zone,timestamp with time zone): binary operator (timestamp with time zone, timestamp with time zone) -> boolean [bound to public.timestamptz_eq]
                    --  equal
                    . properties
                        hashes +
                        merges +
                    . references
                        commute_operator = =
                        join_routine = public.eqjoinsel
                        negate_operator = <>
                        restrict_routine = public.eqsel
                =(timestamp with time zone,timestamp): binary operator (timestamp with time zone, timestamp) -> boolean [bound to public.timestamptz_eq_timestamp]
                    --  equal
                    . properties
                        merges +
                    . references
                        commute_operator = =
                        join_routine = public.eqjoinsel
                        negate_operator = <>
                        restrict_routine = public.eqsel
                =(timestamp,date): binary operator (timestamp, date) -> boolean [bound to public.timestamp_eq_date]
                    --  equal
                    . properties
                        merges +
                    . references
                        commute_operator = =
                        join_routine = public.eqjoinsel
                        negate_operator = <>
                        restrict_routine = public.eqsel
                =(timestamp,timestamp with time zone): binary operator (timestamp, timestamp with time zone) -> boolean [bound to public.timestamp_eq_timestamptz]
                    --  equal
                    . properties
                        merges +
                    . references
                        commute_operator = =
                        join_routine = public.eqjoinsel
                        negate_operator = <>
                        restrict_routine = public.eqsel
                =(timestamp,timestamp): binary operator (timestamp, timestamp) -> boolean [bound to public.timestamp_eq]
                    --  equal
                    . properties
                        hashes +
                        merges +
                    . references
                        commute_operator = =
                        join_routine = public.eqjoinsel
                        negate_operator = <>
                        restrict_routine = public.eqsel
                =(tsquery,tsquery): binary operator (tsquery, tsquery) -> boolean [bound to public.tsquery_eq]
                    --  equal
                    . properties
                        merges +
                    . references
                        commute_operator = =
                        join_routine = public.eqjoinsel
                        negate_operator = <>
                        restrict_routine = public.eqsel
                =(tsvector,tsvector): binary operator (tsvector, tsvector) -> boolean [bound to public.tsvector_eq]
                    --  equal
                    . properties
                        merges +
                    . references
                        commute_operator = =
                        join_routine = public.eqjoinsel
                        negate_operator = <>
                        restrict_routine = public.eqsel
                =(uuid,uuid): binary operator (uuid, uuid) -> boolean [bound to public.uuid_eq]
                    --  equal
                    . properties
                        hashes +
                        merges +
                    . references
                        commute_operator = =
                        join_routine = public.eqjoinsel
                        negate_operator = <>
                        restrict_routine = public.eqsel
                =(xid,integer): binary operator (xid, integer) -> boolean [bound to public.xideqint4]
                    --  equal
                    . references
                        join_routine = public.eqjoinsel
                        negate_operator = <>
                        restrict_routine = public.eqsel
                =(xid,xid): binary operator (xid, xid) -> boolean [bound to public.xideq]
                    --  equal
                    . properties
                        hashes +
                    . references
                        commute_operator = =
                        join_routine = public.eqjoinsel
                        negate_operator = <>
                        restrict_routine = public.eqsel
                >("char","char"): binary operator ("char", "char") -> boolean [bound to public.chargt]
                    --  greater than
                    . references
                        commute_operator = <
                        join_routine = public.scalargtjoinsel
                        negate_operator = <=
                        restrict_routine = public.scalargtsel
                >(anyarray,anyarray): binary operator (anyarray, anyarray) -> boolean [bound to public.array_gt]
                    --  greater than
                    . references
                        commute_operator = <
                        join_routine = public.scalargtjoinsel
                        negate_operator = <=
                        restrict_routine = public.scalargtsel
                >(anyenum,anyenum): binary operator (anyenum, anyenum) -> boolean [bound to public.enum_gt]
                    --  greater than
                    . references
                        commute_operator = <
                        join_routine = public.scalargtjoinsel
                        negate_operator = <=
                        restrict_routine = public.scalargtsel
                >(anyrange,anyrange): binary operator (anyrange, anyrange) -> boolean [bound to public.range_gt]
                    --  greater than
                    . references
                        commute_operator = <
                        join_routine = public.scalargtjoinsel
                        negate_operator = <=
                        restrict_routine = public.rangesel
                >(bigint,bigint): binary operator (bigint, bigint) -> boolean [bound to public.int8gt]
                    --  greater than
                    . references
                        commute_operator = <
                        join_routine = public.scalargtjoinsel
                        negate_operator = <=
                        restrict_routine = public.scalargtsel
                >(bigint,integer): binary operator (bigint, integer) -> boolean [bound to public.int84gt]
                    --  greater than
                    . references
                        commute_operator = <
                        join_routine = public.scalargtjoinsel
                        negate_operator = <=
                        restrict_routine = public.scalargtsel
                >(bigint,smallint): binary operator (bigint, smallint) -> boolean [bound to public.int82gt]
                    --  greater than
                    . references
                        commute_operator = <
                        join_routine = public.scalargtjoinsel
                        negate_operator = <=
                        restrict_routine = public.scalargtsel
                >(bit varying,bit varying): binary operator (bit varying, bit varying) -> boolean [bound to public.varbitgt]
                    --  greater than
                    . references
                        commute_operator = <
                        join_routine = public.scalargtjoinsel
                        negate_operator = <=
                        restrict_routine = public.scalargtsel
                >(bit,bit): binary operator (bit, bit) -> boolean [bound to public.bitgt]
                    --  greater than
                    . references
                        commute_operator = <
                        join_routine = public.scalargtjoinsel
                        negate_operator = <=
                        restrict_routine = public.scalargtsel
                >(boolean,boolean): binary operator (boolean, boolean) -> boolean [bound to public.boolgt]
                    --  greater than
                    . references
                        commute_operator = <
                        join_routine = public.scalargtjoinsel
                        negate_operator = <=
                        restrict_routine = public.scalargtsel
                >(box,box): binary operator (box, box) -> boolean [bound to public.box_gt]
                    --  greater than by area
                    . references
                        commute_operator = <
                        join_routine = public.areajoinsel
                        negate_operator = <=
                        restrict_routine = public.areasel
                >(bytea,bytea): binary operator (bytea, bytea) -> boolean [bound to public.byteagt]
                    --  greater than
                    . references
                        commute_operator = <
                        join_routine = public.scalargtjoinsel
                        negate_operator = <=
                        restrict_routine = public.scalargtsel
                >(char,char): binary operator (char, char) -> boolean [bound to public.bpchargt]
                    --  greater than
                    . references
                        commute_operator = <
                        join_routine = public.scalargtjoinsel
                        negate_operator = <=
                        restrict_routine = public.scalargtsel
                >(circle,circle): binary operator (circle, circle) -> boolean [bound to public.circle_gt]
                    --  greater than by area
                    . references
                        commute_operator = <
                        join_routine = public.areajoinsel
                        negate_operator = <=
                        restrict_routine = public.areasel
                >(date,date): binary operator (date, date) -> boolean [bound to public.date_gt]
                    --  greater than
                    . references
                        commute_operator = <
                        join_routine = public.scalargtjoinsel
                        negate_operator = <=
                        restrict_routine = public.scalargtsel
                >(date,timestamp with time zone): binary operator (date, timestamp with time zone) -> boolean [bound to public.date_gt_timestamptz]
                    --  greater than
                    . references
                        commute_operator = <
                        join_routine = public.scalargtjoinsel
                        negate_operator = <=
                        restrict_routine = public.scalargtsel
                >(date,timestamp): binary operator (date, timestamp) -> boolean [bound to public.date_gt_timestamp]
                    --  greater than
                    . references
                        commute_operator = <
                        join_routine = public.scalargtjoinsel
                        negate_operator = <=
                        restrict_routine = public.scalargtsel
                >(double precision,double precision): binary operator (double precision, double precision) -> boolean [bound to public.float8gt]
                    --  greater than
                    . references
                        commute_operator = <
                        join_routine = public.scalargtjoinsel
                        negate_operator = <=
                        restrict_routine = public.scalargtsel
                >(double precision,real): binary operator (double precision, real) -> boolean [bound to public.float84gt]
                    --  greater than
                    . references
                        commute_operator = <
                        join_routine = public.scalargtjoinsel
                        negate_operator = <=
                        restrict_routine = public.scalargtsel
                >(inet,inet): binary operator (inet, inet) -> boolean [bound to public.network_gt]
                    --  greater than
                    . references
                        commute_operator = <
                        join_routine = public.scalargtjoinsel
                        negate_operator = <=
                        restrict_routine = public.scalargtsel
                >(integer,bigint): binary operator (integer, bigint) -> boolean [bound to public.int48gt]
                    --  greater than
                    . references
                        commute_operator = <
                        join_routine = public.scalargtjoinsel
                        negate_operator = <=
                        restrict_routine = public.scalargtsel
                >(integer,integer): binary operator (integer, integer) -> boolean [bound to public.int4gt]
                    --  greater than
                    . references
                        commute_operator = <
                        join_routine = public.scalargtjoinsel
                        negate_operator = <=
                        restrict_routine = public.scalargtsel
                >(integer,smallint): binary operator (integer, smallint) -> boolean [bound to public.int42gt]
                    --  greater than
                    . references
                        commute_operator = <
                        join_routine = public.scalargtjoinsel
                        negate_operator = <=
                        restrict_routine = public.scalargtsel
                >(interval,interval): binary operator (interval, interval) -> boolean [bound to public.interval_gt]
                    --  greater than
                    . references
                        commute_operator = <
                        join_routine = public.scalargtjoinsel
                        negate_operator = <=
                        restrict_routine = public.scalargtsel
                >(jsonb,jsonb): binary operator (jsonb, jsonb) -> boolean [bound to public.jsonb_gt]
                    --  greater than
                    . references
                        commute_operator = <
                        join_routine = public.scalargtjoinsel
                        negate_operator = <=
                        restrict_routine = public.scalargtsel
                >(lseg,lseg): binary operator (lseg, lseg) -> boolean [bound to public.lseg_gt]
                    --  greater than by length
                    . references
                        commute_operator = <
                        negate_operator = <=
                >(macaddr,macaddr): binary operator (macaddr, macaddr) -> boolean [bound to public.macaddr_gt]
                    --  greater than
                    . references
                        commute_operator = <
                        join_routine = public.scalargtjoinsel
                        negate_operator = <=
                        restrict_routine = public.scalargtsel
                >(macaddr8,macaddr8): binary operator (macaddr8, macaddr8) -> boolean [bound to public.macaddr8_gt]
                    --  greater than
                    . references
                        commute_operator = <
                        join_routine = public.scalargtjoinsel
                        negate_operator = <=
                        restrict_routine = public.scalargtsel
                >(money,money): binary operator (money, money) -> boolean [bound to public.cash_gt]
                    --  greater than
                    . references
                        commute_operator = <
                        join_routine = public.scalargtjoinsel
                        negate_operator = <=
                        restrict_routine = public.scalargtsel
                >(name,name): binary operator (name, name) -> boolean [bound to public.namegt]
                    --  greater than
                    . references
                        commute_operator = <
                        join_routine = public.scalargtjoinsel
                        negate_operator = <=
                        restrict_routine = public.scalargtsel
                >(name,text): binary operator (name, text) -> boolean [bound to public.namegttext]
                    --  greater than
                    . references
                        commute_operator = <
                        join_routine = public.scalargtjoinsel
                        negate_operator = <=
                        restrict_routine = public.scalargtsel
                >(numeric,numeric): binary operator (numeric, numeric) -> boolean [bound to public.numeric_gt]
                    --  greater than
                    . references
                        commute_operator = <
                        join_routine = public.scalargtjoinsel
                        negate_operator = <=
                        restrict_routine = public.scalargtsel
                >(oid,oid): binary operator (oid, oid) -> boolean [bound to public.oidgt]
                    --  greater than
                    . references
                        commute_operator = <
                        join_routine = public.scalargtjoinsel
                        negate_operator = <=
                        restrict_routine = public.scalargtsel
                >(oidvector,oidvector): binary operator (oidvector, oidvector) -> boolean [bound to public.oidvectorgt]
                    --  greater than
                    . references
                        commute_operator = <
                        join_routine = public.scalargtjoinsel
                        negate_operator = <=
                        restrict_routine = public.scalargtsel
                >(path,path): binary operator (path, path) -> boolean [bound to public.path_n_gt]
                    --  greater than
                    . references
                        commute_operator = <
                >(pg_lsn,pg_lsn): binary operator (pg_lsn, pg_lsn) -> boolean [bound to public.pg_lsn_gt]
                    --  greater than
                    . references
                        commute_operator = <
                        join_routine = public.scalargtjoinsel
                        negate_operator = <=
                        restrict_routine = public.scalargtsel
                >(real,double precision): binary operator (real, double precision) -> boolean [bound to public.float48gt]
                    --  greater than
                    . references
                        commute_operator = <
                        join_routine = public.scalargtjoinsel
                        negate_operator = <=
                        restrict_routine = public.scalargtsel
                >(real,real): binary operator (real, real) -> boolean [bound to public.float4gt]
                    --  greater than
                    . references
                        commute_operator = <
                        join_routine = public.scalargtjoinsel
                        negate_operator = <=
                        restrict_routine = public.scalargtsel
                >(record,record): binary operator (record, record) -> boolean [bound to public.record_gt]
                    --  greater than
                    . references
                        commute_operator = <
                        join_routine = public.scalargtjoinsel
                        negate_operator = <=
                        restrict_routine = public.scalargtsel
                >(smallint,bigint): binary operator (smallint, bigint) -> boolean [bound to public.int28gt]
                    --  greater than
                    . references
                        commute_operator = <
                        join_routine = public.scalargtjoinsel
                        negate_operator = <=
                        restrict_routine = public.scalargtsel
                >(smallint,integer): binary operator (smallint, integer) -> boolean [bound to public.int24gt]
                    --  greater than
                    . references
                        commute_operator = <
                        join_routine = public.scalargtjoinsel
                        negate_operator = <=
                        restrict_routine = public.scalargtsel
                >(smallint,smallint): binary operator (smallint, smallint) -> boolean [bound to public.int2gt]
                    --  greater than
                    . references
                        commute_operator = <
                        join_routine = public.scalargtjoinsel
                        negate_operator = <=
                        restrict_routine = public.scalargtsel
                >(text,name): binary operator (text, name) -> boolean [bound to public.textgtname]
                    --  greater than
                    . references
                        commute_operator = <
                        join_routine = public.scalargtjoinsel
                        negate_operator = <=
                        restrict_routine = public.scalargtsel
                >(text,text): binary operator (text, text) -> boolean [bound to public.text_gt]
                    --  greater than
                    . references
                        commute_operator = <
                        join_routine = public.scalargtjoinsel
                        negate_operator = <=
                        restrict_routine = public.scalargtsel
                >(tid,tid): binary operator (tid, tid) -> boolean [bound to public.tidgt]
                    --  greater than
                    . references
                        commute_operator = <
                        join_routine = public.scalargtjoinsel
                        negate_operator = <=
                        restrict_routine = public.scalargtsel
                >(time with time zone,time with time zone): binary operator (time with time zone, time with time zone) -> boolean [bound to public.timetz_gt]
                    --  greater than
                    . references
                        commute_operator = <
                        join_routine = public.scalargtjoinsel
                        negate_operator = <=
                        restrict_routine = public.scalargtsel
                >(time,time): binary operator (time, time) -> boolean [bound to public.time_gt]
                    --  greater than
                    . references
                        commute_operator = <
                        join_routine = public.scalargtjoinsel
                        negate_operator = <=
                        restrict_routine = public.scalargtsel
                >(timestamp with time zone,date): binary operator (timestamp with time zone, date) -> boolean [bound to public.timestamptz_gt_date]
                    --  greater than
                    . references
                        commute_operator = <
                        join_routine = public.scalargtjoinsel
                        negate_operator = <=
                        restrict_routine = public.scalargtsel
                >(timestamp with time zone,timestamp with time zone): binary operator (timestamp with time zone, timestamp with time zone) -> boolean [bound to public.timestamptz_gt]
                    --  greater than
                    . references
                        commute_operator = <
                        join_routine = public.scalargtjoinsel
                        negate_operator = <=
                        restrict_routine = public.scalargtsel
                >(timestamp with time zone,timestamp): binary operator (timestamp with time zone, timestamp) -> boolean [bound to public.timestamptz_gt_timestamp]
                    --  greater than
                    . references
                        commute_operator = <
                        join_routine = public.scalargtjoinsel
                        negate_operator = <=
                        restrict_routine = public.scalargtsel
                >(timestamp,date): binary operator (timestamp, date) -> boolean [bound to public.timestamp_gt_date]
                    --  greater than
                    . references
                        commute_operator = <
                        join_routine = public.scalargtjoinsel
                        negate_operator = <=
                        restrict_routine = public.scalargtsel
                >(timestamp,timestamp with time zone): binary operator (timestamp, timestamp with time zone) -> boolean [bound to public.timestamp_gt_timestamptz]
                    --  greater than
                    . references
                        commute_operator = <
                        join_routine = public.scalargtjoinsel
                        negate_operator = <=
                        restrict_routine = public.scalargtsel
                >(timestamp,timestamp): binary operator (timestamp, timestamp) -> boolean [bound to public.timestamp_gt]
                    --  greater than
                    . references
                        commute_operator = <
                        join_routine = public.scalargtjoinsel
                        negate_operator = <=
                        restrict_routine = public.scalargtsel
                >(tsquery,tsquery): binary operator (tsquery, tsquery) -> boolean [bound to public.tsquery_gt]
                    --  greater than
                    . references
                        commute_operator = <
                        join_routine = public.scalargtjoinsel
                        negate_operator = <=
                        restrict_routine = public.scalargtsel
                >(tsvector,tsvector): binary operator (tsvector, tsvector) -> boolean [bound to public.tsvector_gt]
                    --  greater than
                    . references
                        commute_operator = <
                        join_routine = public.scalargtjoinsel
                        negate_operator = <=
                        restrict_routine = public.scalargtsel
                >(uuid,uuid): binary operator (uuid, uuid) -> boolean [bound to public.uuid_gt]
                    --  greater than
                    . references
                        commute_operator = <
                        join_routine = public.scalargtjoinsel
                        negate_operator = <=
                        restrict_routine = public.scalargtsel
                >=("char","char"): binary operator ("char", "char") -> boolean [bound to public.charge]
                    --  greater than or equal
                    . references
                        commute_operator = <=
                        join_routine = public.scalargejoinsel
                        negate_operator = <
                        restrict_routine = public.scalargesel
                >=(anyarray,anyarray): binary operator (anyarray, anyarray) -> boolean [bound to public.array_ge]
                    --  greater than or equal
                    . references
                        commute_operator = <=
                        join_routine = public.scalargejoinsel
                        negate_operator = <
                        restrict_routine = public.scalargesel
                >=(anyenum,anyenum): binary operator (anyenum, anyenum) -> boolean [bound to public.enum_ge]
                    --  greater than or equal
                    . references
                        commute_operator = <=
                        join_routine = public.scalargejoinsel
                        negate_operator = <
                        restrict_routine = public.scalargesel
                >=(anyrange,anyrange): binary operator (anyrange, anyrange) -> boolean [bound to public.range_ge]
                    --  greater than or equal
                    . references
                        commute_operator = <=
                        join_routine = public.scalargejoinsel
                        negate_operator = <
                        restrict_routine = public.rangesel
                >=(bigint,bigint): binary operator (bigint, bigint) -> boolean [bound to public.int8ge]
                    --  greater than or equal
                    . references
                        commute_operator = <=
                        join_routine = public.scalargejoinsel
                        negate_operator = <
                        restrict_routine = public.scalargesel
                >=(bigint,integer): binary operator (bigint, integer) -> boolean [bound to public.int84ge]
                    --  greater than or equal
                    . references
                        commute_operator = <=
                        join_routine = public.scalargejoinsel
                        negate_operator = <
                        restrict_routine = public.scalargesel
                >=(bigint,smallint): binary operator (bigint, smallint) -> boolean [bound to public.int82ge]
                    --  greater than or equal
                    . references
                        commute_operator = <=
                        join_routine = public.scalargejoinsel
                        negate_operator = <
                        restrict_routine = public.scalargesel
                >=(bit varying,bit varying): binary operator (bit varying, bit varying) -> boolean [bound to public.varbitge]
                    --  greater than or equal
                    . references
                        commute_operator = <=
                        join_routine = public.scalargejoinsel
                        negate_operator = <
                        restrict_routine = public.scalargesel
                >=(bit,bit): binary operator (bit, bit) -> boolean [bound to public.bitge]
                    --  greater than or equal
                    . references
                        commute_operator = <=
                        join_routine = public.scalargejoinsel
                        negate_operator = <
                        restrict_routine = public.scalargesel
                >=(boolean,boolean): binary operator (boolean, boolean) -> boolean [bound to public.boolge]
                    --  greater than or equal
                    . references
                        commute_operator = <=
                        join_routine = public.scalargejoinsel
                        negate_operator = <
                        restrict_routine = public.scalargesel
                >=(box,box): binary operator (box, box) -> boolean [bound to public.box_ge]
                    --  greater than or equal by area
                    . references
                        commute_operator = <=
                        join_routine = public.areajoinsel
                        negate_operator = <
                        restrict_routine = public.areasel
                >=(bytea,bytea): binary operator (bytea, bytea) -> boolean [bound to public.byteage]
                    --  greater than or equal
                    . references
                        commute_operator = <=
                        join_routine = public.scalargejoinsel
                        negate_operator = <
                        restrict_routine = public.scalargesel
                >=(char,char): binary operator (char, char) -> boolean [bound to public.bpcharge]
                    --  greater than or equal
                    . references
                        commute_operator = <=
                        join_routine = public.scalargejoinsel
                        negate_operator = <
                        restrict_routine = public.scalargesel
                >=(circle,circle): binary operator (circle, circle) -> boolean [bound to public.circle_ge]
                    --  greater than or equal by area
                    . references
                        commute_operator = <=
                        join_routine = public.areajoinsel
                        negate_operator = <
                        restrict_routine = public.areasel
                >=(date,date): binary operator (date, date) -> boolean [bound to public.date_ge]
                    --  greater than or equal
                    . references
                        commute_operator = <=
                        join_routine = public.scalargejoinsel
                        negate_operator = <
                        restrict_routine = public.scalargesel
                >=(date,timestamp with time zone): binary operator (date, timestamp with time zone) -> boolean [bound to public.date_ge_timestamptz]
                    --  greater than or equal
                    . references
                        commute_operator = <=
                        join_routine = public.scalargejoinsel
                        negate_operator = <
                        restrict_routine = public.scalargesel
                >=(date,timestamp): binary operator (date, timestamp) -> boolean [bound to public.date_ge_timestamp]
                    --  greater than or equal
                    . references
                        commute_operator = <=
                        join_routine = public.scalargejoinsel
                        negate_operator = <
                        restrict_routine = public.scalargesel
                >=(double precision,double precision): binary operator (double precision, double precision) -> boolean [bound to public.float8ge]
                    --  greater than or equal
                    . references
                        commute_operator = <=
                        join_routine = public.scalargejoinsel
                        negate_operator = <
                        restrict_routine = public.scalargesel
                >=(double precision,real): binary operator (double precision, real) -> boolean [bound to public.float84ge]
                    --  greater than or equal
                    . references
                        commute_operator = <=
                        join_routine = public.scalargejoinsel
                        negate_operator = <
                        restrict_routine = public.scalargesel
                >=(inet,inet): binary operator (inet, inet) -> boolean [bound to public.network_ge]
                    --  greater than or equal
                    . references
                        commute_operator = <=
                        join_routine = public.scalargejoinsel
                        negate_operator = <
                        restrict_routine = public.scalargesel
                >=(integer,bigint): binary operator (integer, bigint) -> boolean [bound to public.int48ge]
                    --  greater than or equal
                    . references
                        commute_operator = <=
                        join_routine = public.scalargejoinsel
                        negate_operator = <
                        restrict_routine = public.scalargesel
                >=(integer,integer): binary operator (integer, integer) -> boolean [bound to public.int4ge]
                    --  greater than or equal
                    . references
                        commute_operator = <=
                        join_routine = public.scalargejoinsel
                        negate_operator = <
                        restrict_routine = public.scalargesel
                >=(integer,smallint): binary operator (integer, smallint) -> boolean [bound to public.int42ge]
                    --  greater than or equal
                    . references
                        commute_operator = <=
                        join_routine = public.scalargejoinsel
                        negate_operator = <
                        restrict_routine = public.scalargesel
                >=(interval,interval): binary operator (interval, interval) -> boolean [bound to public.interval_ge]
                    --  greater than or equal
                    . references
                        commute_operator = <=
                        join_routine = public.scalargejoinsel
                        negate_operator = <
                        restrict_routine = public.scalargesel
                >=(jsonb,jsonb): binary operator (jsonb, jsonb) -> boolean [bound to public.jsonb_ge]
                    --  greater than or equal
                    . references
                        commute_operator = <=
                        join_routine = public.scalargejoinsel
                        negate_operator = <
                        restrict_routine = public.scalargesel
                >=(lseg,lseg): binary operator (lseg, lseg) -> boolean [bound to public.lseg_ge]
                    --  greater than or equal by length
                    . references
                        commute_operator = <=
                        negate_operator = <
                >=(macaddr,macaddr): binary operator (macaddr, macaddr) -> boolean [bound to public.macaddr_ge]
                    --  greater than or equal
                    . references
                        commute_operator = <=
                        join_routine = public.scalargejoinsel
                        negate_operator = <
                        restrict_routine = public.scalargesel
                >=(macaddr8,macaddr8): binary operator (macaddr8, macaddr8) -> boolean [bound to public.macaddr8_ge]
                    --  greater than or equal
                    . references
                        commute_operator = <=
                        join_routine = public.scalargejoinsel
                        negate_operator = <
                        restrict_routine = public.scalargesel
                >=(money,money): binary operator (money, money) -> boolean [bound to public.cash_ge]
                    --  greater than or equal
                    . references
                        commute_operator = <=
                        join_routine = public.scalargejoinsel
                        negate_operator = <
                        restrict_routine = public.scalargesel
                >=(name,name): binary operator (name, name) -> boolean [bound to public.namege]
                    --  greater than or equal
                    . references
                        commute_operator = <=
                        join_routine = public.scalargejoinsel
                        negate_operator = <
                        restrict_routine = public.scalargesel
                >=(name,text): binary operator (name, text) -> boolean [bound to public.namegetext]
                    --  greater than or equal
                    . references
                        commute_operator = <=
                        join_routine = public.scalargejoinsel
                        negate_operator = <
                        restrict_routine = public.scalargesel
                >=(numeric,numeric): binary operator (numeric, numeric) -> boolean [bound to public.numeric_ge]
                    --  greater than or equal
                    . references
                        commute_operator = <=
                        join_routine = public.scalargejoinsel
                        negate_operator = <
                        restrict_routine = public.scalargesel
                >=(oid,oid): binary operator (oid, oid) -> boolean [bound to public.oidge]
                    --  greater than or equal
                    . references
                        commute_operator = <=
                        join_routine = public.scalargejoinsel
                        negate_operator = <
                        restrict_routine = public.scalargesel
                >=(oidvector,oidvector): binary operator (oidvector, oidvector) -> boolean [bound to public.oidvectorge]
                    --  greater than or equal
                    . references
                        commute_operator = <=
                        join_routine = public.scalargejoinsel
                        negate_operator = <
                        restrict_routine = public.scalargesel
                >=(path,path): binary operator (path, path) -> boolean [bound to public.path_n_ge]
                    --  greater than or equal
                    . references
                        commute_operator = <=
                >=(pg_lsn,pg_lsn): binary operator (pg_lsn, pg_lsn) -> boolean [bound to public.pg_lsn_ge]
                    --  greater than or equal
                    . references
                        commute_operator = <=
                        join_routine = public.scalargejoinsel
                        negate_operator = <
                        restrict_routine = public.scalargesel
                >=(real,double precision): binary operator (real, double precision) -> boolean [bound to public.float48ge]
                    --  greater than or equal
                    . references
                        commute_operator = <=
                        join_routine = public.scalargejoinsel
                        negate_operator = <
                        restrict_routine = public.scalargesel
                >=(real,real): binary operator (real, real) -> boolean [bound to public.float4ge]
                    --  greater than or equal
                    . references
                        commute_operator = <=
                        join_routine = public.scalargejoinsel
                        negate_operator = <
                        restrict_routine = public.scalargesel
                >=(record,record): binary operator (record, record) -> boolean [bound to public.record_ge]
                    --  greater than or equal
                    . references
                        commute_operator = <=
                        join_routine = public.scalargejoinsel
                        negate_operator = <
                        restrict_routine = public.scalargesel
                >=(smallint,bigint): binary operator (smallint, bigint) -> boolean [bound to public.int28ge]
                    --  greater than or equal
                    . references
                        commute_operator = <=
                        join_routine = public.scalargejoinsel
                        negate_operator = <
                        restrict_routine = public.scalargesel
                >=(smallint,integer): binary operator (smallint, integer) -> boolean [bound to public.int24ge]
                    --  greater than or equal
                    . references
                        commute_operator = <=
                        join_routine = public.scalargejoinsel
                        negate_operator = <
                        restrict_routine = public.scalargesel
                >=(smallint,smallint): binary operator (smallint, smallint) -> boolean [bound to public.int2ge]
                    --  greater than or equal
                    . references
                        commute_operator = <=
                        join_routine = public.scalargejoinsel
                        negate_operator = <
                        restrict_routine = public.scalargesel
                >=(text,name): binary operator (text, name) -> boolean [bound to public.textgename]
                    --  greater than or equal
                    . references
                        commute_operator = <=
                        join_routine = public.scalargejoinsel
                        negate_operator = <
                        restrict_routine = public.scalargesel
                >=(text,text): binary operator (text, text) -> boolean [bound to public.text_ge]
                    --  greater than or equal
                    . references
                        commute_operator = <=
                        join_routine = public.scalargejoinsel
                        negate_operator = <
                        restrict_routine = public.scalargesel
                >=(tid,tid): binary operator (tid, tid) -> boolean [bound to public.tidge]
                    --  greater than or equal
                    . references
                        commute_operator = <=
                        join_routine = public.scalargejoinsel
                        negate_operator = <
                        restrict_routine = public.scalargesel
                >=(time with time zone,time with time zone): binary operator (time with time zone, time with time zone) -> boolean [bound to public.timetz_ge]
                    --  greater than or equal
                    . references
                        commute_operator = <=
                        join_routine = public.scalargejoinsel
                        negate_operator = <
                        restrict_routine = public.scalargesel
                >=(time,time): binary operator (time, time) -> boolean [bound to public.time_ge]
                    --  greater than or equal
                    . references
                        commute_operator = <=
                        join_routine = public.scalargejoinsel
                        negate_operator = <
                        restrict_routine = public.scalargesel
                >=(timestamp with time zone,date): binary operator (timestamp with time zone, date) -> boolean [bound to public.timestamptz_ge_date]
                    --  greater than or equal
                    . references
                        commute_operator = <=
                        join_routine = public.scalargejoinsel
                        negate_operator = <
                        restrict_routine = public.scalargesel
                >=(timestamp with time zone,timestamp with time zone): binary operator (timestamp with time zone, timestamp with time zone) -> boolean [bound to public.timestamptz_ge]
                    --  greater than or equal
                    . references
                        commute_operator = <=
                        join_routine = public.scalargejoinsel
                        negate_operator = <
                        restrict_routine = public.scalargesel
                >=(timestamp with time zone,timestamp): binary operator (timestamp with time zone, timestamp) -> boolean [bound to public.timestamptz_ge_timestamp]
                    --  greater than or equal
                    . references
                        commute_operator = <=
                        join_routine = public.scalargejoinsel
                        negate_operator = <
                        restrict_routine = public.scalargesel
                >=(timestamp,date): binary operator (timestamp, date) -> boolean [bound to public.timestamp_ge_date]
                    --  greater than or equal
                    . references
                        commute_operator = <=
                        join_routine = public.scalargejoinsel
                        negate_operator = <
                        restrict_routine = public.scalargesel
                >=(timestamp,timestamp with time zone): binary operator (timestamp, timestamp with time zone) -> boolean [bound to public.timestamp_ge_timestamptz]
                    --  greater than or equal
                    . references
                        commute_operator = <=
                        join_routine = public.scalargejoinsel
                        negate_operator = <
                        restrict_routine = public.scalargesel
                >=(timestamp,timestamp): binary operator (timestamp, timestamp) -> boolean [bound to public.timestamp_ge]
                    --  greater than or equal
                    . references
                        commute_operator = <=
                        join_routine = public.scalargejoinsel
                        negate_operator = <
                        restrict_routine = public.scalargesel
                >=(tsquery,tsquery): binary operator (tsquery, tsquery) -> boolean [bound to public.tsquery_ge]
                    --  greater than or equal
                    . references
                        commute_operator = <=
                        join_routine = public.scalargejoinsel
                        negate_operator = <
                        restrict_routine = public.scalargesel
                >=(tsvector,tsvector): binary operator (tsvector, tsvector) -> boolean [bound to public.tsvector_ge]
                    --  greater than or equal
                    . references
                        commute_operator = <=
                        join_routine = public.scalargejoinsel
                        negate_operator = <
                        restrict_routine = public.scalargesel
                >=(uuid,uuid): binary operator (uuid, uuid) -> boolean [bound to public.uuid_ge]
                    --  greater than or equal
                    . references
                        commute_operator = <=
                        join_routine = public.scalargejoinsel
                        negate_operator = <
                        restrict_routine = public.scalargesel
                >>(anyrange,anyrange): binary operator (anyrange, anyrange) -> boolean [bound to public.range_after]
                    --  is right of
                    . references
                        commute_operator = <<
                        join_routine = public.scalargtjoinsel
                        restrict_routine = public.rangesel
                >>(bigint,integer): binary operator (bigint, integer) -> bigint [bound to public.int8shr]
                    --  bitwise shift right
                >>(bit,integer): binary operator (bit, integer) -> bit [bound to public.bitshiftright]
                    --  bitwise shift right
                >>(box,box): binary operator (box, box) -> boolean [bound to public.box_right]
                    --  is right of
                    . references
                        join_routine = public.positionjoinsel
                        restrict_routine = public.positionsel
                >>(circle,circle): binary operator (circle, circle) -> boolean [bound to public.circle_right]
                    --  is right of
                    . references
                        join_routine = public.positionjoinsel
                        restrict_routine = public.positionsel
                >>(inet,inet): binary operator (inet, inet) -> boolean [bound to public.network_sup]
                    --  is supernet
                    . references
                        commute_operator = <<
                        join_routine = public.networkjoinsel
                        restrict_routine = public.networksel
                >>(integer,integer): binary operator (integer, integer) -> integer [bound to public.int4shr]
                    --  bitwise shift right
                >>(point,point): binary operator (point, point) -> boolean [bound to public.point_right]
                    --  is right of
                    . references
                        join_routine = public.positionjoinsel
                        restrict_routine = public.positionsel
                >>(polygon,polygon): binary operator (polygon, polygon) -> boolean [bound to public.poly_right]
                    --  is right of
                    . references
                        join_routine = public.positionjoinsel
                        restrict_routine = public.positionsel
                >>(smallint,integer): binary operator (smallint, integer) -> smallint [bound to public.int2shr]
                    --  bitwise shift right
                >>=(inet,inet): binary operator (inet, inet) -> boolean [bound to public.network_supeq]
                    --  is supernet or equal
                    . references
                        commute_operator = public.<<=
                        join_routine = public.networkjoinsel
                        restrict_routine = public.networksel
                >^(box,box): binary operator (box, box) -> boolean [bound to public.box_above_eq]
                    --  is above (allows touching)
                    . references
                        join_routine = public.positionjoinsel
                        restrict_routine = public.positionsel
                >^(point,point): binary operator (point, point) -> boolean [bound to public.point_above]
                    --  is above
                    . references
                        join_routine = public.positionjoinsel
                        restrict_routine = public.positionsel
                ?#(box,box): binary operator (box, box) -> boolean [bound to public.box_overlap]
                    --  deprecated, use && instead
                    . references
                        join_routine = public.areajoinsel
                        restrict_routine = public.areasel
                ?#(line,box): binary operator (line, box) -> boolean [bound to public.inter_lb]
                    --  intersect
                ?#(line,line): binary operator (line, line) -> boolean [bound to public.line_intersect]
                    --  intersect
                    . references
                        commute_operator = ?#
                ?#(lseg,box): binary operator (lseg, box) -> boolean [bound to public.inter_sb]
                    --  intersect
                ?#(lseg,line): binary operator (lseg, line) -> boolean [bound to public.inter_sl]
                    --  intersect
                ?#(lseg,lseg): binary operator (lseg, lseg) -> boolean [bound to public.lseg_intersect]
                    --  intersect
                    . references
                        commute_operator = ?#
                ?#(path,path): binary operator (path, path) -> boolean [bound to public.path_inter]
                    --  intersect
                ?&(jsonb,text[]): binary operator (jsonb, text[]) -> boolean [bound to public.jsonb_exists_all]
                    --  all keys exist
                    . references
                        join_routine = public.contjoinsel
                        restrict_routine = public.contsel
                ?(jsonb,text): binary operator (jsonb, text) -> boolean [bound to public.jsonb_exists]
                    --  key exists
                    . references
                        join_routine = public.contjoinsel
                        restrict_routine = public.contsel
                ?-(point,point): binary operator (point, point) -> boolean [bound to public.point_horiz]
                    --  horizontally aligned
                    . references
                        commute_operator = ?-
                ?-(unknown,line): prefix operator (line) -> boolean [bound to public.line_horizontal]
                    --  horizontal
                ?-(unknown,lseg): prefix operator (lseg) -> boolean [bound to public.lseg_horizontal]
                    --  horizontal
                ?-|(line,line): binary operator (line, line) -> boolean [bound to public.line_perp]
                    --  perpendicular
                    . references
                        commute_operator = ?-|
                ?-|(lseg,lseg): binary operator (lseg, lseg) -> boolean [bound to public.lseg_perp]
                    --  perpendicular
                    . references
                        commute_operator = ?-|
                ?|(jsonb,text[]): binary operator (jsonb, text[]) -> boolean [bound to public.jsonb_exists_any]
                    --  any key exists
                    . references
                        join_routine = public.contjoinsel
                        restrict_routine = public.contsel
                ?|(point,point): binary operator (point, point) -> boolean [bound to public.point_vert]
                    --  vertically aligned
                    . references
                        commute_operator = ?|
                ?|(unknown,line): prefix operator (line) -> boolean [bound to public.line_vertical]
                    --  vertical
                ?|(unknown,lseg): prefix operator (lseg) -> boolean [bound to public.lseg_vertical]
                    --  vertical
                ?||(line,line): binary operator (line, line) -> boolean [bound to public.line_parallel]
                    --  parallel
                    . references
                        commute_operator = ?||
                ?||(lseg,lseg): binary operator (lseg, lseg) -> boolean [bound to public.lseg_parallel]
                    --  parallel
                    . references
                        commute_operator = ?||
                @(box,box): binary operator (box, box) -> boolean [bound to public.box_contained]
                    --  deprecated, use <@ instead
                    . references
                        commute_operator = ~
                        join_routine = public.contjoinsel
                        restrict_routine = public.contsel
                @(circle,circle): binary operator (circle, circle) -> boolean [bound to public.circle_contained]
                    --  deprecated, use <@ instead
                    . references
                        commute_operator = ~
                        join_routine = public.contjoinsel
                        restrict_routine = public.contsel
                @(lseg,box): binary operator (lseg, box) -> boolean [bound to public.on_sb]
                    --  deprecated, use <@ instead
                @(lseg,line): binary operator (lseg, line) -> boolean [bound to public.on_sl]
                    --  deprecated, use <@ instead
                @(point,box): binary operator (point, box) -> boolean [bound to public.on_pb]
                    --  deprecated, use <@ instead
                @(point,circle): binary operator (point, circle) -> boolean [bound to public.pt_contained_circle]
                    --  deprecated, use <@ instead
                    . references
                        commute_operator = ~
                @(point,line): binary operator (point, line) -> boolean [bound to public.on_pl]
                    --  deprecated, use <@ instead
                @(point,lseg): binary operator (point, lseg) -> boolean [bound to public.on_ps]
                    --  deprecated, use <@ instead
                @(point,path): binary operator (point, path) -> boolean [bound to public.on_ppath]
                    --  deprecated, use <@ instead
                    . references
                        commute_operator = ~
                @(point,polygon): binary operator (point, polygon) -> boolean [bound to public.pt_contained_poly]
                    --  deprecated, use <@ instead
                    . references
                        commute_operator = ~
                @(polygon,polygon): binary operator (polygon, polygon) -> boolean [bound to public.poly_contained]
                    --  deprecated, use <@ instead
                    . references
                        commute_operator = ~
                        join_routine = public.contjoinsel
                        restrict_routine = public.contsel
                @(unknown,bigint): prefix operator (bigint) -> bigint [bound to public.int8abs]
                    --  absolute value
                @(unknown,double precision): prefix operator (double precision) -> double precision [bound to public.float8abs]
                    --  absolute value
                @(unknown,integer): prefix operator (integer) -> integer [bound to public.int4abs]
                    --  absolute value
                @(unknown,numeric): prefix operator (numeric) -> numeric [bound to public.numeric_abs]
                    --  absolute value
                @(unknown,real): prefix operator (real) -> real [bound to public.float4abs]
                    --  absolute value
                @(unknown,smallint): prefix operator (smallint) -> smallint [bound to public.int2abs]
                    --  absolute value
                @-@(unknown,lseg): prefix operator (lseg) -> double precision [bound to public.lseg_length]
                    --  distance between endpoints
                @-@(unknown,path): prefix operator (path) -> double precision [bound to public.path_length]
                    --  sum of path segment lengths
                @>(aclitem[],aclitem): binary operator (aclitem[], aclitem) -> boolean [bound to public.aclcontains]
                    --  contains
                @>(anyarray,anyarray): binary operator (anyarray, anyarray) -> boolean [bound to public.arraycontains]
                    --  contains
                    . references
                        commute_operator = <@
                        join_routine = public.arraycontjoinsel
                        restrict_routine = public.arraycontsel
                @>(anyrange,anyelement): binary operator (anyrange, anyelement) -> boolean [bound to public.range_contains_elem]
                    --  contains
                    . references
                        commute_operator = <@
                        join_routine = public.contjoinsel
                        restrict_routine = public.rangesel
                @>(anyrange,anyrange): binary operator (anyrange, anyrange) -> boolean [bound to public.range_contains]
                    --  contains
                    . references
                        commute_operator = <@
                        join_routine = public.contjoinsel
                        restrict_routine = public.rangesel
                @>(box,box): binary operator (box, box) -> boolean [bound to public.box_contain]
                    --  contains
                    . references
                        commute_operator = <@
                        join_routine = public.contjoinsel
                        restrict_routine = public.contsel
                @>(box,point): binary operator (box, point) -> boolean [bound to public.box_contain_pt]
                    --  contains
                    . references
                        commute_operator = <@
                        join_routine = public.contjoinsel
                        restrict_routine = public.contsel
                @>(circle,circle): binary operator (circle, circle) -> boolean [bound to public.circle_contain]
                    --  contains
                    . references
                        commute_operator = <@
                        join_routine = public.contjoinsel
                        restrict_routine = public.contsel
                @>(circle,point): binary operator (circle, point) -> boolean [bound to public.circle_contain_pt]
                    --  contains
                    . references
                        commute_operator = <@
                        join_routine = public.contjoinsel
                        restrict_routine = public.contsel
                @>(jsonb,jsonb): binary operator (jsonb, jsonb) -> boolean [bound to public.jsonb_contains]
                    --  contains
                    . references
                        commute_operator = <@
                        join_routine = public.contjoinsel
                        restrict_routine = public.contsel
                @>(path,point): binary operator (path, point) -> boolean [bound to public.path_contain_pt]
                    --  contains
                    . references
                        commute_operator = <@
                @>(polygon,point): binary operator (polygon, point) -> boolean [bound to public.poly_contain_pt]
                    --  contains
                    . references
                        commute_operator = <@
                        join_routine = public.contjoinsel
                        restrict_routine = public.contsel
                @>(polygon,polygon): binary operator (polygon, polygon) -> boolean [bound to public.poly_contain]
                    --  contains
                    . references
                        commute_operator = <@
                        join_routine = public.contjoinsel
                        restrict_routine = public.contsel
                @>(tsquery,tsquery): binary operator (tsquery, tsquery) -> boolean [bound to public.tsq_mcontains]
                    --  contains
                    . references
                        commute_operator = <@
                        join_routine = public.contjoinsel
                        restrict_routine = public.contsel
                @?(jsonb,jsonpath): binary operator (jsonb, jsonpath) -> boolean [bound to public.jsonb_path_exists_opr]
                    --  jsonpath exists
                    . references
                        join_routine = public.contjoinsel
                        restrict_routine = public.contsel
                @@(jsonb,jsonpath): binary operator (jsonb, jsonpath) -> boolean [bound to public.jsonb_path_match_opr]
                    --  jsonpath match
                    . references
                        join_routine = public.contjoinsel
                        restrict_routine = public.contsel
                @@(text,text): binary operator (text, text) -> boolean [bound to public.ts_match_tt]
                    --  text search match
                    . references
                        join_routine = public.contjoinsel
                        restrict_routine = public.contsel
                @@(text,tsquery): binary operator (text, tsquery) -> boolean [bound to public.ts_match_tq]
                    --  text search match
                    . references
                        join_routine = public.contjoinsel
                        restrict_routine = public.contsel
                @@(tsquery,tsvector): binary operator (tsquery, tsvector) -> boolean [bound to public.ts_match_qv]
                    --  text search match
                    . references
                        commute_operator = @@
                        join_routine = public.tsmatchjoinsel
                        restrict_routine = public.tsmatchsel
                @@(tsvector,tsquery): binary operator (tsvector, tsquery) -> boolean [bound to public.ts_match_vq]
                    --  text search match
                    . references
                        commute_operator = @@
                        join_routine = public.tsmatchjoinsel
                        restrict_routine = public.tsmatchsel
                @@(unknown,box): prefix operator (box) -> point [bound to public.box_center]
                    --  center of
                @@(unknown,circle): prefix operator (circle) -> point [bound to public.circle_center]
                    --  center of
                @@(unknown,lseg): prefix operator (lseg) -> point [bound to public.lseg_center]
                    --  center of
                @@(unknown,path): prefix operator (path) -> point [bound to public.path_center]
                    --  center of
                @@(unknown,polygon): prefix operator (polygon) -> point [bound to public.poly_center]
                    --  center of
                @@@(tsquery,tsvector): binary operator (tsquery, tsvector) -> boolean [bound to public.ts_match_qv]
                    --  deprecated, use @@ instead
                    . references
                        commute_operator = @@@
                        join_routine = public.tsmatchjoinsel
                        restrict_routine = public.tsmatchsel
                @@@(tsvector,tsquery): binary operator (tsvector, tsquery) -> boolean [bound to public.ts_match_vq]
                    --  deprecated, use @@ instead
                    . references
                        commute_operator = @@@
                        join_routine = public.tsmatchjoinsel
                        restrict_routine = public.tsmatchsel
                ^(double precision,double precision): binary operator (double precision, double precision) -> double precision [bound to public.dpow]
                    --  exponentiation
                ^(numeric,numeric): binary operator (numeric, numeric) -> numeric [bound to public.numeric_power]
                    --  exponentiation
                ^@(text,text): binary operator (text, text) -> boolean [bound to public.starts_with]
                    --  starts with
                    . references
                        join_routine = public.prefixjoinsel
                        restrict_routine = public.prefixsel
                |&>(box,box): binary operator (box, box) -> boolean [bound to public.box_overabove]
                    --  overlaps or is above
                    . references
                        join_routine = public.positionjoinsel
                        restrict_routine = public.positionsel
                |&>(circle,circle): binary operator (circle, circle) -> boolean [bound to public.circle_overabove]
                    --  overlaps or is above
                    . references
                        join_routine = public.positionjoinsel
                        restrict_routine = public.positionsel
                |&>(polygon,polygon): binary operator (polygon, polygon) -> boolean [bound to public.poly_overabove]
                    --  overlaps or is above
                    . references
                        join_routine = public.positionjoinsel
                        restrict_routine = public.positionsel
                |(bigint,bigint): binary operator (bigint, bigint) -> bigint [bound to public.int8or]
                    --  bitwise or
                    . references
                        commute_operator = |
                |(bit,bit): binary operator (bit, bit) -> bit [bound to public.bitor]
                    --  bitwise or
                    . references
                        commute_operator = |
                |(inet,inet): binary operator (inet, inet) -> inet [bound to public.inetor]
                    --  bitwise or
                |(integer,integer): binary operator (integer, integer) -> integer [bound to public.int4or]
                    --  bitwise or
                    . references
                        commute_operator = |
                |(macaddr,macaddr): binary operator (macaddr, macaddr) -> macaddr [bound to public.macaddr_or]
                    --  bitwise or
                |(macaddr8,macaddr8): binary operator (macaddr8, macaddr8) -> macaddr8 [bound to public.macaddr8_or]
                    --  bitwise or
                |(smallint,smallint): binary operator (smallint, smallint) -> smallint [bound to public.int2or]
                    --  bitwise or
                    . references
                        commute_operator = |
                |/(unknown,double precision): prefix operator (double precision) -> double precision [bound to public.dsqrt]
                    --  square root
                |>>(box,box): binary operator (box, box) -> boolean [bound to public.box_above]
                    --  is above
                    . references
                        join_routine = public.positionjoinsel
                        restrict_routine = public.positionsel
                |>>(circle,circle): binary operator (circle, circle) -> boolean [bound to public.circle_above]
                    --  is above
                    . references
                        join_routine = public.positionjoinsel
                        restrict_routine = public.positionsel
                |>>(polygon,polygon): binary operator (polygon, polygon) -> boolean [bound to public.poly_above]
                    --  is above
                    . references
                        join_routine = public.positionjoinsel
                        restrict_routine = public.positionsel
                ||(anyarray,anyarray): binary operator (anyarray, anyarray) -> anyarray [bound to public.array_cat]
                    --  concatenate
                ||(anyarray,anyelement): binary operator (anyarray, anyelement) -> anyarray [bound to public.array_append]
                    --  append element onto end of array
                ||(anyelement,anyarray): binary operator (anyelement, anyarray) -> anyarray [bound to public.array_prepend]
                    --  prepend element onto front of array
                ||(anynonarray,text): binary operator (anynonarray, text) -> text [bound to public.anytextcat]
                    --  concatenate
                ||(bit varying,bit varying): binary operator (bit varying, bit varying) -> bit varying [bound to public.bitcat]
                    --  concatenate
                ||(bytea,bytea): binary operator (bytea, bytea) -> bytea [bound to public.byteacat]
                    --  concatenate
                ||(jsonb,jsonb): binary operator (jsonb, jsonb) -> jsonb [bound to public.jsonb_concat]
                    --  concatenate
                ||(text,anynonarray): binary operator (text, anynonarray) -> text [bound to public.textanycat]
                    --  concatenate
                ||(text,text): binary operator (text, text) -> text [bound to public.textcat]
                    --  concatenate
                ||(tsquery,tsquery): binary operator (tsquery, tsquery) -> tsquery [bound to public.tsquery_or]
                    --  OR-concatenate
                ||(tsvector,tsvector): binary operator (tsvector, tsvector) -> tsvector [bound to public.tsvector_concat]
                    --  concatenate
                ||/(unknown,double precision): prefix operator (double precision) -> double precision [bound to public.dcbrt]
                    --  cube root
                ~(aclitem[],aclitem): binary operator (aclitem[], aclitem) -> boolean [bound to public.aclcontains]
                    --  deprecated, use @> instead
                ~(box,box): binary operator (box, box) -> boolean [bound to public.box_contain]
                    --  deprecated, use @> instead
                    . references
                        commute_operator = @
                        join_routine = public.contjoinsel
                        restrict_routine = public.contsel
                ~(char,text): binary operator (char, text) -> boolean [bound to public.bpcharregexeq]
                    --  matches regular expression, case-sensitive
                    . references
                        join_routine = public.regexeqjoinsel
                        negate_operator = !~
                        restrict_routine = public.regexeqsel
                ~(circle,circle): binary operator (circle, circle) -> boolean [bound to public.circle_contain]
                    --  deprecated, use @> instead
                    . references
                        commute_operator = @
                        join_routine = public.contjoinsel
                        restrict_routine = public.contsel
                ~(circle,point): binary operator (circle, point) -> boolean [bound to public.circle_contain_pt]
                    --  deprecated, use @> instead
                    . references
                        commute_operator = @
                ~(name,text): binary operator (name, text) -> boolean [bound to public.nameregexeq]
                    --  matches regular expression, case-sensitive
                    . references
                        join_routine = public.regexeqjoinsel
                        negate_operator = !~
                        restrict_routine = public.regexeqsel
                ~(path,point): binary operator (path, point) -> boolean [bound to public.path_contain_pt]
                    --  deprecated, use @> instead
                    . references
                        commute_operator = @
                ~(polygon,point): binary operator (polygon, point) -> boolean [bound to public.poly_contain_pt]
                    --  deprecated, use @> instead
                    . references
                        commute_operator = @
                ~(polygon,polygon): binary operator (polygon, polygon) -> boolean [bound to public.poly_contain]
                    --  deprecated, use @> instead
                    . references
                        commute_operator = @
                        join_routine = public.contjoinsel
                        restrict_routine = public.contsel
                ~(text,text): binary operator (text, text) -> boolean [bound to public.textregexeq]
                    --  matches regular expression, case-sensitive
                    . references
                        join_routine = public.regexeqjoinsel
                        negate_operator = !~
                        restrict_routine = public.regexeqsel
                ~(unknown,bigint): prefix operator (bigint) -> bigint [bound to public.int8not]
                    --  bitwise not
                ~(unknown,bit): prefix operator (bit) -> bit [bound to public.bitnot]
                    --  bitwise not
                ~(unknown,inet): prefix operator (inet) -> inet [bound to public.inetnot]
                    --  bitwise not
                ~(unknown,integer): prefix operator (integer) -> integer [bound to public.int4not]
                    --  bitwise not
                ~(unknown,macaddr): prefix operator (macaddr) -> macaddr [bound to public.macaddr_not]
                    --  bitwise not
                ~(unknown,macaddr8): prefix operator (macaddr8) -> macaddr8 [bound to public.macaddr8_not]
                    --  bitwise not
                ~(unknown,smallint): prefix operator (smallint) -> smallint [bound to public.int2not]
                    --  bitwise not
                ~*(char,text): binary operator (char, text) -> boolean [bound to public.bpcharicregexeq]
                    --  matches regular expression, case-insensitive
                    . references
                        join_routine = public.icregexeqjoinsel
                        negate_operator = !~*
                        restrict_routine = public.icregexeqsel
                ~*(name,text): binary operator (name, text) -> boolean [bound to public.nameicregexeq]
                    --  matches regular expression, case-insensitive
                    . references
                        join_routine = public.icregexeqjoinsel
                        negate_operator = !~*
                        restrict_routine = public.icregexeqsel
                ~*(text,text): binary operator (text, text) -> boolean [bound to public.texticregexeq]
                    --  matches regular expression, case-insensitive
                    . references
                        join_routine = public.icregexeqjoinsel
                        negate_operator = !~*
                        restrict_routine = public.icregexeqsel
                ~<=~(char,char): binary operator (char, char) -> boolean [bound to public.bpchar_pattern_le]
                    --  less than or equal
                    . references
                        commute_operator = ~>=~
                        join_routine = public.scalarlejoinsel
                        negate_operator = ~>~
                        restrict_routine = public.scalarlesel
                ~<=~(text,text): binary operator (text, text) -> boolean [bound to public.text_pattern_le]
                    --  less than or equal
                    . references
                        commute_operator = ~>=~
                        join_routine = public.scalarlejoinsel
                        negate_operator = ~>~
                        restrict_routine = public.scalarlesel
                ~<~(char,char): binary operator (char, char) -> boolean [bound to public.bpchar_pattern_lt]
                    --  less than
                    . references
                        commute_operator = ~>~
                        join_routine = public.scalarltjoinsel
                        negate_operator = ~>=~
                        restrict_routine = public.scalarltsel
                ~<~(text,text): binary operator (text, text) -> boolean [bound to public.text_pattern_lt]
                    --  less than
                    . references
                        commute_operator = ~>~
                        join_routine = public.scalarltjoinsel
                        negate_operator = ~>=~
                        restrict_routine = public.scalarltsel
                ~=(box,box): binary operator (box, box) -> boolean [bound to public.box_same]
                    --  same as
                    . references
                        commute_operator = ~=
                        join_routine = public.eqjoinsel
                        restrict_routine = public.eqsel
                ~=(circle,circle): binary operator (circle, circle) -> boolean [bound to public.circle_same]
                    --  same as
                    . references
                        commute_operator = ~=
                        join_routine = public.eqjoinsel
                        restrict_routine = public.eqsel
                ~=(point,point): binary operator (point, point) -> boolean [bound to public.point_eq]
                    --  same as
                    . references
                        commute_operator = ~=
                        join_routine = public.eqjoinsel
                        negate_operator = <>
                        restrict_routine = public.eqsel
                ~=(polygon,polygon): binary operator (polygon, polygon) -> boolean [bound to public.poly_same]
                    --  same as
                    . references
                        commute_operator = ~=
                        join_routine = public.eqjoinsel
                        restrict_routine = public.eqsel
                ~>=~(char,char): binary operator (char, char) -> boolean [bound to public.bpchar_pattern_ge]
                    --  greater than or equal
                    . references
                        commute_operator = ~<=~
                        join_routine = public.scalargejoinsel
                        negate_operator = ~<~
                        restrict_routine = public.scalargesel
                ~>=~(text,text): binary operator (text, text) -> boolean [bound to public.text_pattern_ge]
                    --  greater than or equal
                    . references
                        commute_operator = ~<=~
                        join_routine = public.scalargejoinsel
                        negate_operator = ~<~
                        restrict_routine = public.scalargesel
                ~>~(char,char): binary operator (char, char) -> boolean [bound to public.bpchar_pattern_gt]
                    --  greater than
                    . references
                        commute_operator = ~<~
                        join_routine = public.scalargtjoinsel
                        negate_operator = ~<=~
                        restrict_routine = public.scalargtsel
                ~>~(text,text): binary operator (text, text) -> boolean [bound to public.text_pattern_gt]
                    --  greater than
                    . references
                        commute_operator = ~<~
                        join_routine = public.scalargtjoinsel
                        negate_operator = ~<=~
                        restrict_routine = public.scalargtsel
                ~~(bytea,bytea): binary operator (bytea, bytea) -> boolean [bound to public.bytealike]
                    --  matches LIKE expression
                    . references
                        join_routine = public.likejoinsel
                        negate_operator = !~~
                        restrict_routine = public.likesel
                ~~(char,text): binary operator (char, text) -> boolean [bound to public.bpcharlike]
                    --  matches LIKE expression
                    . references
                        join_routine = public.likejoinsel
                        negate_operator = !~~
                        restrict_routine = public.likesel
                ~~(name,text): binary operator (name, text) -> boolean [bound to public.namelike]
                    --  matches LIKE expression
                    . references
                        join_routine = public.likejoinsel
                        negate_operator = !~~
                        restrict_routine = public.likesel
                ~~(text,text): binary operator (text, text) -> boolean [bound to public.textlike]
                    --  matches LIKE expression
                    . references
                        join_routine = public.likejoinsel
                        negate_operator = !~~
                        restrict_routine = public.likesel
                ~~*(char,text): binary operator (char, text) -> boolean [bound to public.bpchariclike]
                    --  matches LIKE expression, case-insensitive
                    . references
                        join_routine = public.iclikejoinsel
                        negate_operator = !~~*
                        restrict_routine = public.iclikesel
                ~~*(name,text): binary operator (name, text) -> boolean [bound to public.nameiclike]
                    --  matches LIKE expression, case-insensitive
                    . references
                        join_routine = public.iclikejoinsel
                        negate_operator = !~~*
                        restrict_routine = public.iclikesel
                ~~*(text,text): binary operator (text, text) -> boolean [bound to public.texticlike]
                    --  matches LIKE expression, case-insensitive
                    . references
                        join_routine = public.iclikejoinsel
                        negate_operator = !~~*
                        restrict_routine = public.iclikesel
            + collations
                C: lc_collate: C, lc_ctype: C
                    --  standard C collation
                C.UTF-8: lc_collate: C.UTF-8, lc_ctype: C.UTF-8
                POSIX: lc_collate: POSIX, lc_ctype: POSIX
                    --  standard POSIX collation
                af-NA-x-icu: lc_collate: af-NA, lc_ctype: af-NA
                    --  Afrikaans (Namibia)
                af-ZA-x-icu: lc_collate: af-ZA, lc_ctype: af-ZA
                    --  Afrikaans (South Africa)
                af-x-icu: lc_collate: af, lc_ctype: af
                    --  Afrikaans
                agq-CM-x-icu: lc_collate: agq-CM, lc_ctype: agq-CM
                    --  Aghem (Cameroon)
                agq-x-icu: lc_collate: agq, lc_ctype: agq
                    --  Aghem
                ak-GH-x-icu: lc_collate: ak-GH, lc_ctype: ak-GH
                    --  Akan (Ghana)
                ak-x-icu: lc_collate: ak, lc_ctype: ak
                    --  Akan
                am-ET-x-icu: lc_collate: am-ET, lc_ctype: am-ET
                    --  Amharic (Ethiopia)
                am-x-icu: lc_collate: am, lc_ctype: am
                    --  Amharic
                ar-001-x-icu: lc_collate: ar-001, lc_ctype: ar-001
                    --  Arabic (World)
                ar-AE-x-icu: lc_collate: ar-AE, lc_ctype: ar-AE
                    --  Arabic (United Arab Emirates)
                ar-BH-x-icu: lc_collate: ar-BH, lc_ctype: ar-BH
                    --  Arabic (Bahrain)
                ar-DJ-x-icu: lc_collate: ar-DJ, lc_ctype: ar-DJ
                    --  Arabic (Djibouti)
                ar-DZ-x-icu: lc_collate: ar-DZ, lc_ctype: ar-DZ
                    --  Arabic (Algeria)
                ar-EG-x-icu: lc_collate: ar-EG, lc_ctype: ar-EG
                    --  Arabic (Egypt)
                ar-EH-x-icu: lc_collate: ar-EH, lc_ctype: ar-EH
                    --  Arabic (Western Sahara)
                ar-ER-x-icu: lc_collate: ar-ER, lc_ctype: ar-ER
                    --  Arabic (Eritrea)
                ar-IL-x-icu: lc_collate: ar-IL, lc_ctype: ar-IL
                    --  Arabic (Israel)
                ar-IQ-x-icu: lc_collate: ar-IQ, lc_ctype: ar-IQ
                    --  Arabic (Iraq)
                ar-JO-x-icu: lc_collate: ar-JO, lc_ctype: ar-JO
                    --  Arabic (Jordan)
                ar-KM-x-icu: lc_collate: ar-KM, lc_ctype: ar-KM
                    --  Arabic (Comoros)
                ar-KW-x-icu: lc_collate: ar-KW, lc_ctype: ar-KW
                    --  Arabic (Kuwait)
                ar-LB-x-icu: lc_collate: ar-LB, lc_ctype: ar-LB
                    --  Arabic (Lebanon)
                ar-LY-x-icu: lc_collate: ar-LY, lc_ctype: ar-LY
                    --  Arabic (Libya)
                ar-MA-x-icu: lc_collate: ar-MA, lc_ctype: ar-MA
                    --  Arabic (Morocco)
                ar-MR-x-icu: lc_collate: ar-MR, lc_ctype: ar-MR
                    --  Arabic (Mauritania)
                ar-OM-x-icu: lc_collate: ar-OM, lc_ctype: ar-OM
                    --  Arabic (Oman)
                ar-PS-x-icu: lc_collate: ar-PS, lc_ctype: ar-PS
                    --  Arabic (Palestinian Territories)
                ar-QA-x-icu: lc_collate: ar-QA, lc_ctype: ar-QA
                    --  Arabic (Qatar)
                ar-SA-x-icu: lc_collate: ar-SA, lc_ctype: ar-SA
                    --  Arabic (Saudi Arabia)
                ar-SD-x-icu: lc_collate: ar-SD, lc_ctype: ar-SD
                    --  Arabic (Sudan)
                ar-SO-x-icu: lc_collate: ar-SO, lc_ctype: ar-SO
                    --  Arabic (Somalia)
                ar-SS-x-icu: lc_collate: ar-SS, lc_ctype: ar-SS
                    --  Arabic (South Sudan)
                ar-SY-x-icu: lc_collate: ar-SY, lc_ctype: ar-SY
                    --  Arabic (Syria)
                ar-TD-x-icu: lc_collate: ar-TD, lc_ctype: ar-TD
                    --  Arabic (Chad)
                ar-TN-x-icu: lc_collate: ar-TN, lc_ctype: ar-TN
                    --  Arabic (Tunisia)
                ar-YE-x-icu: lc_collate: ar-YE, lc_ctype: ar-YE
                    --  Arabic (Yemen)
                ar-x-icu: lc_collate: ar, lc_ctype: ar
                    --  Arabic
                as-IN-x-icu: lc_collate: as-IN, lc_ctype: as-IN
                    --  Assamese (India)
                as-x-icu: lc_collate: as, lc_ctype: as
                    --  Assamese
                asa-TZ-x-icu: lc_collate: asa-TZ, lc_ctype: asa-TZ
                    --  Asu (Tanzania)
                asa-x-icu: lc_collate: asa, lc_ctype: asa
                    --  Asu
                ast-ES-x-icu: lc_collate: ast-ES, lc_ctype: ast-ES
                    --  Asturian (Spain)
                ast-x-icu: lc_collate: ast, lc_ctype: ast
                    --  Asturian
                az-Cyrl-AZ-x-icu: lc_collate: az-Cyrl-AZ, lc_ctype: az-Cyrl-AZ
                    --  Azerbaijani (Cyrillic, Azerbaijan)
                az-Cyrl-x-icu: lc_collate: az-Cyrl, lc_ctype: az-Cyrl
                    --  Azerbaijani (Cyrillic)
                az-Latn-AZ-x-icu: lc_collate: az-Latn-AZ, lc_ctype: az-Latn-AZ
                    --  Azerbaijani (Latin, Azerbaijan)
                az-Latn-x-icu: lc_collate: az-Latn, lc_ctype: az-Latn
                    --  Azerbaijani (Latin)
                az-x-icu: lc_collate: az, lc_ctype: az
                    --  Azerbaijani
                bas-CM-x-icu: lc_collate: bas-CM, lc_ctype: bas-CM
                    --  Basaa (Cameroon)
                bas-x-icu: lc_collate: bas, lc_ctype: bas
                    --  Basaa
                be-BY-x-icu: lc_collate: be-BY, lc_ctype: be-BY
                    --  Belarusian (Belarus)
                be-x-icu: lc_collate: be, lc_ctype: be
                    --  Belarusian
                bem-ZM-x-icu: lc_collate: bem-ZM, lc_ctype: bem-ZM
                    --  Bemba (Zambia)
                bem-x-icu: lc_collate: bem, lc_ctype: bem
                    --  Bemba
                bez-TZ-x-icu: lc_collate: bez-TZ, lc_ctype: bez-TZ
                    --  Bena (Tanzania)
                bez-x-icu: lc_collate: bez, lc_ctype: bez
                    --  Bena
                bg-BG-x-icu: lc_collate: bg-BG, lc_ctype: bg-BG
                    --  Bulgarian (Bulgaria)
                bg-x-icu: lc_collate: bg, lc_ctype: bg
                    --  Bulgarian
                bm-ML-x-icu: lc_collate: bm-ML, lc_ctype: bm-ML
                    --  Bambara (Mali)
                bm-x-icu: lc_collate: bm, lc_ctype: bm
                    --  Bambara
                bn-BD-x-icu: lc_collate: bn-BD, lc_ctype: bn-BD
                    --  Bangla (Bangladesh)
                bn-IN-x-icu: lc_collate: bn-IN, lc_ctype: bn-IN
                    --  Bangla (India)
                bn-x-icu: lc_collate: bn, lc_ctype: bn
                    --  Bangla
                bo-CN-x-icu: lc_collate: bo-CN, lc_ctype: bo-CN
                    --  Tibetan (China)
                bo-IN-x-icu: lc_collate: bo-IN, lc_ctype: bo-IN
                    --  Tibetan (India)
                bo-x-icu: lc_collate: bo, lc_ctype: bo
                    --  Tibetan
                br-FR-x-icu: lc_collate: br-FR, lc_ctype: br-FR
                    --  Breton (France)
                br-x-icu: lc_collate: br, lc_ctype: br
                    --  Breton
                brx-IN-x-icu: lc_collate: brx-IN, lc_ctype: brx-IN
                    --  Bodo (India)
                brx-x-icu: lc_collate: brx, lc_ctype: brx
                    --  Bodo
                bs-Cyrl-BA-x-icu: lc_collate: bs-Cyrl-BA, lc_ctype: bs-Cyrl-BA
                    --  Bosnian (Cyrillic, Bosnia & Herzegovina)
                bs-Cyrl-x-icu: lc_collate: bs-Cyrl, lc_ctype: bs-Cyrl
                    --  Bosnian (Cyrillic)
                bs-Latn-BA-x-icu: lc_collate: bs-Latn-BA, lc_ctype: bs-Latn-BA
                    --  Bosnian (Latin, Bosnia & Herzegovina)
                bs-Latn-x-icu: lc_collate: bs-Latn, lc_ctype: bs-Latn
                    --  Bosnian (Latin)
                bs-x-icu: lc_collate: bs, lc_ctype: bs
                    --  Bosnian
                ca-AD-x-icu: lc_collate: ca-AD, lc_ctype: ca-AD
                    --  Catalan (Andorra)
                ca-ES-x-icu: lc_collate: ca-ES, lc_ctype: ca-ES
                    --  Catalan (Spain)
                ca-FR-x-icu: lc_collate: ca-FR, lc_ctype: ca-FR
                    --  Catalan (France)
                ca-IT-x-icu: lc_collate: ca-IT, lc_ctype: ca-IT
                    --  Catalan (Italy)
                ca-x-icu: lc_collate: ca, lc_ctype: ca
                    --  Catalan
                ccp-BD-x-icu: lc_collate: ccp-BD, lc_ctype: ccp-BD
                    --  Chakma (Bangladesh)
                ccp-IN-x-icu: lc_collate: ccp-IN, lc_ctype: ccp-IN
                    --  Chakma (India)
                ccp-x-icu: lc_collate: ccp, lc_ctype: ccp
                    --  Chakma
                ce-RU-x-icu: lc_collate: ce-RU, lc_ctype: ce-RU
                    --  Chechen (Russia)
                ce-x-icu: lc_collate: ce, lc_ctype: ce
                    --  Chechen
                ceb-PH-x-icu: lc_collate: ceb-PH, lc_ctype: ceb-PH
                    --  Cebuano (Philippines)
                ceb-x-icu: lc_collate: ceb, lc_ctype: ceb
                    --  Cebuano
                cgg-UG-x-icu: lc_collate: cgg-UG, lc_ctype: cgg-UG
                    --  Chiga (Uganda)
                cgg-x-icu: lc_collate: cgg, lc_ctype: cgg
                    --  Chiga
                chr-US-x-icu: lc_collate: chr-US, lc_ctype: chr-US
                    --  Cherokee (United States)
                chr-x-icu: lc_collate: chr, lc_ctype: chr
                    --  Cherokee
                ckb-IQ-x-icu: lc_collate: ckb-IQ, lc_ctype: ckb-IQ
                    --  Central Kurdish (Iraq)
                ckb-IR-x-icu: lc_collate: ckb-IR, lc_ctype: ckb-IR
                    --  Central Kurdish (Iran)
                ckb-x-icu: lc_collate: ckb, lc_ctype: ckb
                    --  Central Kurdish
                cs-CZ-x-icu: lc_collate: cs-CZ, lc_ctype: cs-CZ
                    --  Czech (Czechia)
                cs-x-icu: lc_collate: cs, lc_ctype: cs
                    --  Czech
                cy-GB-x-icu: lc_collate: cy-GB, lc_ctype: cy-GB
                    --  Welsh (United Kingdom)
                cy-x-icu: lc_collate: cy, lc_ctype: cy
                    --  Welsh
                da-DK-x-icu: lc_collate: da-DK, lc_ctype: da-DK
                    --  Danish (Denmark)
                da-GL-x-icu: lc_collate: da-GL, lc_ctype: da-GL
                    --  Danish (Greenland)
                da-x-icu: lc_collate: da, lc_ctype: da
                    --  Danish
                dav-KE-x-icu: lc_collate: dav-KE, lc_ctype: dav-KE
                    --  Taita (Kenya)
                dav-x-icu: lc_collate: dav, lc_ctype: dav
                    --  Taita
                de-AT-x-icu: lc_collate: de-AT, lc_ctype: de-AT
                    --  German (Austria)
                de-BE-x-icu: lc_collate: de-BE, lc_ctype: de-BE
                    --  German (Belgium)
                de-CH-x-icu: lc_collate: de-CH, lc_ctype: de-CH
                    --  German (Switzerland)
                de-DE-x-icu: lc_collate: de-DE, lc_ctype: de-DE
                    --  German (Germany)
                de-IT-x-icu: lc_collate: de-IT, lc_ctype: de-IT
                    --  German (Italy)
                de-LI-x-icu: lc_collate: de-LI, lc_ctype: de-LI
                    --  German (Liechtenstein)
                de-LU-x-icu: lc_collate: de-LU, lc_ctype: de-LU
                    --  German (Luxembourg)
                de-x-icu: lc_collate: de, lc_ctype: de
                    --  German
                default: lc_collate: null, lc_ctype: null
                    --  database's default collation
                dje-NE-x-icu: lc_collate: dje-NE, lc_ctype: dje-NE
                    --  Zarma (Niger)
                dje-x-icu: lc_collate: dje, lc_ctype: dje
                    --  Zarma
                dsb-DE-x-icu: lc_collate: dsb-DE, lc_ctype: dsb-DE
                    --  Lower Sorbian (Germany)
                dsb-x-icu: lc_collate: dsb, lc_ctype: dsb
                    --  Lower Sorbian
                dua-CM-x-icu: lc_collate: dua-CM, lc_ctype: dua-CM
                    --  Duala (Cameroon)
                dua-x-icu: lc_collate: dua, lc_ctype: dua
                    --  Duala
                dyo-SN-x-icu: lc_collate: dyo-SN, lc_ctype: dyo-SN
                    --  Jola-Fonyi (Senegal)
                dyo-x-icu: lc_collate: dyo, lc_ctype: dyo
                    --  Jola-Fonyi
                dz-BT-x-icu: lc_collate: dz-BT, lc_ctype: dz-BT
                    --  Dzongkha (Bhutan)
                dz-x-icu: lc_collate: dz, lc_ctype: dz
                    --  Dzongkha
                ebu-KE-x-icu: lc_collate: ebu-KE, lc_ctype: ebu-KE
                    --  Embu (Kenya)
                ebu-x-icu: lc_collate: ebu, lc_ctype: ebu
                    --  Embu
                ee-GH-x-icu: lc_collate: ee-GH, lc_ctype: ee-GH
                    --  Ewe (Ghana)
                ee-TG-x-icu: lc_collate: ee-TG, lc_ctype: ee-TG
                    --  Ewe (Togo)
                ee-x-icu: lc_collate: ee, lc_ctype: ee
                    --  Ewe
                el-CY-x-icu: lc_collate: el-CY, lc_ctype: el-CY
                    --  Greek (Cyprus)
                el-GR-x-icu: lc_collate: el-GR, lc_ctype: el-GR
                    --  Greek (Greece)
                el-x-icu: lc_collate: el, lc_ctype: el
                    --  Greek
                en-001-x-icu: lc_collate: en-001, lc_ctype: en-001
                    --  English (World)
                en-150-x-icu: lc_collate: en-150, lc_ctype: en-150
                    --  English (Europe)
                en-AE-x-icu: lc_collate: en-AE, lc_ctype: en-AE
                    --  English (United Arab Emirates)
                en-AG-x-icu: lc_collate: en-AG, lc_ctype: en-AG
                    --  English (Antigua & Barbuda)
                en-AI-x-icu: lc_collate: en-AI, lc_ctype: en-AI
                    --  English (Anguilla)
                en-AS-x-icu: lc_collate: en-AS, lc_ctype: en-AS
                    --  English (American Samoa)
                en-AT-x-icu: lc_collate: en-AT, lc_ctype: en-AT
                    --  English (Austria)
                en-AU-x-icu: lc_collate: en-AU, lc_ctype: en-AU
                    --  English (Australia)
                en-BB-x-icu: lc_collate: en-BB, lc_ctype: en-BB
                    --  English (Barbados)
                en-BE-x-icu: lc_collate: en-BE, lc_ctype: en-BE
                    --  English (Belgium)
                en-BI-x-icu: lc_collate: en-BI, lc_ctype: en-BI
                    --  English (Burundi)
                en-BM-x-icu: lc_collate: en-BM, lc_ctype: en-BM
                    --  English (Bermuda)
                en-BS-x-icu: lc_collate: en-BS, lc_ctype: en-BS
                    --  English (Bahamas)
                en-BW-x-icu: lc_collate: en-BW, lc_ctype: en-BW
                    --  English (Botswana)
                en-BZ-x-icu: lc_collate: en-BZ, lc_ctype: en-BZ
                    --  English (Belize)
                en-CA-x-icu: lc_collate: en-CA, lc_ctype: en-CA
                    --  English (Canada)
                en-CC-x-icu: lc_collate: en-CC, lc_ctype: en-CC
                    --  English (Cocos [Keeling] Islands)
                en-CH-x-icu: lc_collate: en-CH, lc_ctype: en-CH
                    --  English (Switzerland)
                en-CK-x-icu: lc_collate: en-CK, lc_ctype: en-CK
                    --  English (Cook Islands)
                en-CM-x-icu: lc_collate: en-CM, lc_ctype: en-CM
                    --  English (Cameroon)
                en-CX-x-icu: lc_collate: en-CX, lc_ctype: en-CX
                    --  English (Christmas Island)
                en-CY-x-icu: lc_collate: en-CY, lc_ctype: en-CY
                    --  English (Cyprus)
                en-DE-x-icu: lc_collate: en-DE, lc_ctype: en-DE
                    --  English (Germany)
                en-DG-x-icu: lc_collate: en-DG, lc_ctype: en-DG
                    --  English (Diego Garcia)
                en-DK-x-icu: lc_collate: en-DK, lc_ctype: en-DK
                    --  English (Denmark)
                en-DM-x-icu: lc_collate: en-DM, lc_ctype: en-DM
                    --  English (Dominica)
                en-ER-x-icu: lc_collate: en-ER, lc_ctype: en-ER
                    --  English (Eritrea)
                en-FI-x-icu: lc_collate: en-FI, lc_ctype: en-FI
                    --  English (Finland)
                en-FJ-x-icu: lc_collate: en-FJ, lc_ctype: en-FJ
                    --  English (Fiji)
                en-FK-x-icu: lc_collate: en-FK, lc_ctype: en-FK
                    --  English (Falkland Islands)
                en-FM-x-icu: lc_collate: en-FM, lc_ctype: en-FM
                    --  English (Micronesia)
                en-GB-x-icu: lc_collate: en-GB, lc_ctype: en-GB
                    --  English (United Kingdom)
                en-GD-x-icu: lc_collate: en-GD, lc_ctype: en-GD
                    --  English (Grenada)
                en-GG-x-icu: lc_collate: en-GG, lc_ctype: en-GG
                    --  English (Guernsey)
                en-GH-x-icu: lc_collate: en-GH, lc_ctype: en-GH
                    --  English (Ghana)
                en-GI-x-icu: lc_collate: en-GI, lc_ctype: en-GI
                    --  English (Gibraltar)
                en-GM-x-icu: lc_collate: en-GM, lc_ctype: en-GM
                    --  English (Gambia)
                en-GU-x-icu: lc_collate: en-GU, lc_ctype: en-GU
                    --  English (Guam)
                en-GY-x-icu: lc_collate: en-GY, lc_ctype: en-GY
                    --  English (Guyana)
                en-HK-x-icu: lc_collate: en-HK, lc_ctype: en-HK
                    --  English (Hong Kong SAR China)
                en-IE-x-icu: lc_collate: en-IE, lc_ctype: en-IE
                    --  English (Ireland)
                en-IL-x-icu: lc_collate: en-IL, lc_ctype: en-IL
                    --  English (Israel)
                en-IM-x-icu: lc_collate: en-IM, lc_ctype: en-IM
                    --  English (Isle of Man)
                en-IN-x-icu: lc_collate: en-IN, lc_ctype: en-IN
                    --  English (India)
                en-IO-x-icu: lc_collate: en-IO, lc_ctype: en-IO
                    --  English (British Indian Ocean Territory)
                en-JE-x-icu: lc_collate: en-JE, lc_ctype: en-JE
                    --  English (Jersey)
                en-JM-x-icu: lc_collate: en-JM, lc_ctype: en-JM
                    --  English (Jamaica)
                en-KE-x-icu: lc_collate: en-KE, lc_ctype: en-KE
                    --  English (Kenya)
                en-KI-x-icu: lc_collate: en-KI, lc_ctype: en-KI
                    --  English (Kiribati)
                en-KN-x-icu: lc_collate: en-KN, lc_ctype: en-KN
                    --  English (St. Kitts & Nevis)
                en-KY-x-icu: lc_collate: en-KY, lc_ctype: en-KY
                    --  English (Cayman Islands)
                en-LC-x-icu: lc_collate: en-LC, lc_ctype: en-LC
                    --  English (St. Lucia)
                en-LR-x-icu: lc_collate: en-LR, lc_ctype: en-LR
                    --  English (Liberia)
                en-LS-x-icu: lc_collate: en-LS, lc_ctype: en-LS
                    --  English (Lesotho)
                en-MG-x-icu: lc_collate: en-MG, lc_ctype: en-MG
                    --  English (Madagascar)
                en-MH-x-icu: lc_collate: en-MH, lc_ctype: en-MH
                    --  English (Marshall Islands)
                en-MO-x-icu: lc_collate: en-MO, lc_ctype: en-MO
                    --  English (Macao SAR China)
                en-MP-x-icu: lc_collate: en-MP, lc_ctype: en-MP
                    --  English (Northern Mariana Islands)
                en-MS-x-icu: lc_collate: en-MS, lc_ctype: en-MS
                    --  English (Montserrat)
                en-MT-x-icu: lc_collate: en-MT, lc_ctype: en-MT
                    --  English (Malta)
                en-MU-x-icu: lc_collate: en-MU, lc_ctype: en-MU
                    --  English (Mauritius)
                en-MW-x-icu: lc_collate: en-MW, lc_ctype: en-MW
                    --  English (Malawi)
                en-MY-x-icu: lc_collate: en-MY, lc_ctype: en-MY
                    --  English (Malaysia)
                en-NA-x-icu: lc_collate: en-NA, lc_ctype: en-NA
                    --  English (Namibia)
                en-NF-x-icu: lc_collate: en-NF, lc_ctype: en-NF
                    --  English (Norfolk Island)
                en-NG-x-icu: lc_collate: en-NG, lc_ctype: en-NG
                    --  English (Nigeria)
                en-NL-x-icu: lc_collate: en-NL, lc_ctype: en-NL
                    --  English (Netherlands)
                en-NR-x-icu: lc_collate: en-NR, lc_ctype: en-NR
                    --  English (Nauru)
                en-NU-x-icu: lc_collate: en-NU, lc_ctype: en-NU
                    --  English (Niue)
                en-NZ-x-icu: lc_collate: en-NZ, lc_ctype: en-NZ
                    --  English (New Zealand)
                en-PG-x-icu: lc_collate: en-PG, lc_ctype: en-PG
                    --  English (Papua New Guinea)
                en-PH-x-icu: lc_collate: en-PH, lc_ctype: en-PH
                    --  English (Philippines)
                en-PK-x-icu: lc_collate: en-PK, lc_ctype: en-PK
                    --  English (Pakistan)
                en-PN-x-icu: lc_collate: en-PN, lc_ctype: en-PN
                    --  English (Pitcairn Islands)
                en-PR-x-icu: lc_collate: en-PR, lc_ctype: en-PR
                    --  English (Puerto Rico)
                en-PW-x-icu: lc_collate: en-PW, lc_ctype: en-PW
                    --  English (Palau)
                en-RW-x-icu: lc_collate: en-RW, lc_ctype: en-RW
                    --  English (Rwanda)
                en-SB-x-icu: lc_collate: en-SB, lc_ctype: en-SB
                    --  English (Solomon Islands)
                en-SC-x-icu: lc_collate: en-SC, lc_ctype: en-SC
                    --  English (Seychelles)
                en-SD-x-icu: lc_collate: en-SD, lc_ctype: en-SD
                    --  English (Sudan)
                en-SE-x-icu: lc_collate: en-SE, lc_ctype: en-SE
                    --  English (Sweden)
                en-SG-x-icu: lc_collate: en-SG, lc_ctype: en-SG
                    --  English (Singapore)
                en-SH-x-icu: lc_collate: en-SH, lc_ctype: en-SH
                    --  English (St. Helena)
                en-SI-x-icu: lc_collate: en-SI, lc_ctype: en-SI
                    --  English (Slovenia)
                en-SL-x-icu: lc_collate: en-SL, lc_ctype: en-SL
                    --  English (Sierra Leone)
                en-SS-x-icu: lc_collate: en-SS, lc_ctype: en-SS
                    --  English (South Sudan)
                en-SX-x-icu: lc_collate: en-SX, lc_ctype: en-SX
                    --  English (Sint Maarten)
                en-SZ-x-icu: lc_collate: en-SZ, lc_ctype: en-SZ
                    --  English (Eswatini)
                en-TC-x-icu: lc_collate: en-TC, lc_ctype: en-TC
                    --  English (Turks & Caicos Islands)
                en-TK-x-icu: lc_collate: en-TK, lc_ctype: en-TK
                    --  English (Tokelau)
                en-TO-x-icu: lc_collate: en-TO, lc_ctype: en-TO
                    --  English (Tonga)
                en-TT-x-icu: lc_collate: en-TT, lc_ctype: en-TT
                    --  English (Trinidad & Tobago)
                en-TV-x-icu: lc_collate: en-TV, lc_ctype: en-TV
                    --  English (Tuvalu)
                en-TZ-x-icu: lc_collate: en-TZ, lc_ctype: en-TZ
                    --  English (Tanzania)
                en-UG-x-icu: lc_collate: en-UG, lc_ctype: en-UG
                    --  English (Uganda)
                en-UM-x-icu: lc_collate: en-UM, lc_ctype: en-UM
                    --  English (U.S. Outlying Islands)
                en-US-u-va-posix-x-icu: lc_collate: en-US-u-va-posix, lc_ctype: en-US-u-va-posix
                    --  English (United States, Computer)
                en-US-x-icu: lc_collate: en-US, lc_ctype: en-US
                    --  English (United States)
                en-VC-x-icu: lc_collate: en-VC, lc_ctype: en-VC
                    --  English (St. Vincent & Grenadines)
                en-VG-x-icu: lc_collate: en-VG, lc_ctype: en-VG
                    --  English (British Virgin Islands)
                en-VI-x-icu: lc_collate: en-VI, lc_ctype: en-VI
                    --  English (U.S. Virgin Islands)
                en-VU-x-icu: lc_collate: en-VU, lc_ctype: en-VU
                    --  English (Vanuatu)
                en-WS-x-icu: lc_collate: en-WS, lc_ctype: en-WS
                    --  English (Samoa)
                en-ZA-x-icu: lc_collate: en-ZA, lc_ctype: en-ZA
                    --  English (South Africa)
                en-ZM-x-icu: lc_collate: en-ZM, lc_ctype: en-ZM
                    --  English (Zambia)
                en-ZW-x-icu: lc_collate: en-ZW, lc_ctype: en-ZW
                    --  English (Zimbabwe)
                en-x-icu: lc_collate: en, lc_ctype: en
                    --  English
                en_AG: lc_collate: en_AG, lc_ctype: en_AG
                en_AG.utf8: lc_collate: en_AG.utf8, lc_ctype: en_AG.utf8
                en_AU: lc_collate: en_AU.utf8, lc_ctype: en_AU.utf8
                en_AU.utf8: lc_collate: en_AU.utf8, lc_ctype: en_AU.utf8
                en_BW: lc_collate: en_BW.utf8, lc_ctype: en_BW.utf8
                en_BW.utf8: lc_collate: en_BW.utf8, lc_ctype: en_BW.utf8
                en_CA: lc_collate: en_CA.utf8, lc_ctype: en_CA.utf8
                en_CA.utf8: lc_collate: en_CA.utf8, lc_ctype: en_CA.utf8
                en_DK: lc_collate: en_DK.utf8, lc_ctype: en_DK.utf8
                en_DK.utf8: lc_collate: en_DK.utf8, lc_ctype: en_DK.utf8
                en_GB: lc_collate: en_GB.utf8, lc_ctype: en_GB.utf8
                en_GB.utf8: lc_collate: en_GB.utf8, lc_ctype: en_GB.utf8
                en_HK: lc_collate: en_HK.utf8, lc_ctype: en_HK.utf8
                en_HK.utf8: lc_collate: en_HK.utf8, lc_ctype: en_HK.utf8
                en_IE: lc_collate: en_IE.utf8, lc_ctype: en_IE.utf8
                en_IE.utf8: lc_collate: en_IE.utf8, lc_ctype: en_IE.utf8
                en_IL: lc_collate: en_IL, lc_ctype: en_IL
                en_IL.utf8: lc_collate: en_IL.utf8, lc_ctype: en_IL.utf8
                en_IN: lc_collate: en_IN, lc_ctype: en_IN
                en_IN.utf8: lc_collate: en_IN.utf8, lc_ctype: en_IN.utf8
                en_NG: lc_collate: en_NG, lc_ctype: en_NG
                en_NG.utf8: lc_collate: en_NG.utf8, lc_ctype: en_NG.utf8
                en_NZ: lc_collate: en_NZ.utf8, lc_ctype: en_NZ.utf8
                en_NZ.utf8: lc_collate: en_NZ.utf8, lc_ctype: en_NZ.utf8
                en_PH: lc_collate: en_PH.utf8, lc_ctype: en_PH.utf8
                en_PH.utf8: lc_collate: en_PH.utf8, lc_ctype: en_PH.utf8
                en_SG: lc_collate: en_SG.utf8, lc_ctype: en_SG.utf8
                en_SG.utf8: lc_collate: en_SG.utf8, lc_ctype: en_SG.utf8
                en_US: lc_collate: en_US.utf8, lc_ctype: en_US.utf8
                en_US.utf8: lc_collate: en_US.utf8, lc_ctype: en_US.utf8
                en_ZA: lc_collate: en_ZA.utf8, lc_ctype: en_ZA.utf8
                en_ZA.utf8: lc_collate: en_ZA.utf8, lc_ctype: en_ZA.utf8
                en_ZM: lc_collate: en_ZM, lc_ctype: en_ZM
                en_ZM.utf8: lc_collate: en_ZM.utf8, lc_ctype: en_ZM.utf8
                en_ZW: lc_collate: en_ZW.utf8, lc_ctype: en_ZW.utf8
                en_ZW.utf8: lc_collate: en_ZW.utf8, lc_ctype: en_ZW.utf8
                eo-001-x-icu: lc_collate: eo-001, lc_ctype: eo-001
                    --  Esperanto (World)
                eo-x-icu: lc_collate: eo, lc_ctype: eo
                    --  Esperanto
                es-419-x-icu: lc_collate: es-419, lc_ctype: es-419
                    --  Spanish (Latin America)
                es-AR-x-icu: lc_collate: es-AR, lc_ctype: es-AR
                    --  Spanish (Argentina)
                es-BO-x-icu: lc_collate: es-BO, lc_ctype: es-BO
                    --  Spanish (Bolivia)
                es-BR-x-icu: lc_collate: es-BR, lc_ctype: es-BR
                    --  Spanish (Brazil)
                es-BZ-x-icu: lc_collate: es-BZ, lc_ctype: es-BZ
                    --  Spanish (Belize)
                es-CL-x-icu: lc_collate: es-CL, lc_ctype: es-CL
                    --  Spanish (Chile)
                es-CO-x-icu: lc_collate: es-CO, lc_ctype: es-CO
                    --  Spanish (Colombia)
                es-CR-x-icu: lc_collate: es-CR, lc_ctype: es-CR
                    --  Spanish (Costa Rica)
                es-CU-x-icu: lc_collate: es-CU, lc_ctype: es-CU
                    --  Spanish (Cuba)
                es-DO-x-icu: lc_collate: es-DO, lc_ctype: es-DO
                    --  Spanish (Dominican Republic)
                es-EA-x-icu: lc_collate: es-EA, lc_ctype: es-EA
                    --  Spanish (Ceuta & Melilla)
                es-EC-x-icu: lc_collate: es-EC, lc_ctype: es-EC
                    --  Spanish (Ecuador)
                es-ES-x-icu: lc_collate: es-ES, lc_ctype: es-ES
                    --  Spanish (Spain)
                es-GQ-x-icu: lc_collate: es-GQ, lc_ctype: es-GQ
                    --  Spanish (Equatorial Guinea)
                es-GT-x-icu: lc_collate: es-GT, lc_ctype: es-GT
                    --  Spanish (Guatemala)
                es-HN-x-icu: lc_collate: es-HN, lc_ctype: es-HN
                    --  Spanish (Honduras)
                es-IC-x-icu: lc_collate: es-IC, lc_ctype: es-IC
                    --  Spanish (Canary Islands)
                es-MX-x-icu: lc_collate: es-MX, lc_ctype: es-MX
                    --  Spanish (Mexico)
                es-NI-x-icu: lc_collate: es-NI, lc_ctype: es-NI
                    --  Spanish (Nicaragua)
                es-PA-x-icu: lc_collate: es-PA, lc_ctype: es-PA
                    --  Spanish (Panama)
                es-PE-x-icu: lc_collate: es-PE, lc_ctype: es-PE
                    --  Spanish (Peru)
                es-PH-x-icu: lc_collate: es-PH, lc_ctype: es-PH
                    --  Spanish (Philippines)
                es-PR-x-icu: lc_collate: es-PR, lc_ctype: es-PR
                    --  Spanish (Puerto Rico)
                es-PY-x-icu: lc_collate: es-PY, lc_ctype: es-PY
                    --  Spanish (Paraguay)
                es-SV-x-icu: lc_collate: es-SV, lc_ctype: es-SV
                    --  Spanish (El Salvador)
                es-US-x-icu: lc_collate: es-US, lc_ctype: es-US
                    --  Spanish (United States)
                es-UY-x-icu: lc_collate: es-UY, lc_ctype: es-UY
                    --  Spanish (Uruguay)
                es-VE-x-icu: lc_collate: es-VE, lc_ctype: es-VE
                    --  Spanish (Venezuela)
                es-x-icu: lc_collate: es, lc_ctype: es
                    --  Spanish
                et-EE-x-icu: lc_collate: et-EE, lc_ctype: et-EE
                    --  Estonian (Estonia)
                et-x-icu: lc_collate: et, lc_ctype: et
                    --  Estonian
                eu-ES-x-icu: lc_collate: eu-ES, lc_ctype: eu-ES
                    --  Basque (Spain)
                eu-x-icu: lc_collate: eu, lc_ctype: eu
                    --  Basque
                ewo-CM-x-icu: lc_collate: ewo-CM, lc_ctype: ewo-CM
                    --  Ewondo (Cameroon)
                ewo-x-icu: lc_collate: ewo, lc_ctype: ewo
                    --  Ewondo
                fa-AF-x-icu: lc_collate: fa-AF, lc_ctype: fa-AF
                    --  Persian (Afghanistan)
                fa-IR-x-icu: lc_collate: fa-IR, lc_ctype: fa-IR
                    --  Persian (Iran)
                fa-x-icu: lc_collate: fa, lc_ctype: fa
                    --  Persian
                ff-Latn-BF-x-icu: lc_collate: ff-Latn-BF, lc_ctype: ff-Latn-BF
                    --  Fulah (Latin, Burkina Faso)
                ff-Latn-CM-x-icu: lc_collate: ff-Latn-CM, lc_ctype: ff-Latn-CM
                    --  Fulah (Latin, Cameroon)
                ff-Latn-GH-x-icu: lc_collate: ff-Latn-GH, lc_ctype: ff-Latn-GH
                    --  Fulah (Latin, Ghana)
                ff-Latn-GM-x-icu: lc_collate: ff-Latn-GM, lc_ctype: ff-Latn-GM
                    --  Fulah (Latin, Gambia)
                ff-Latn-GN-x-icu: lc_collate: ff-Latn-GN, lc_ctype: ff-Latn-GN
                    --  Fulah (Latin, Guinea)
                ff-Latn-GW-x-icu: lc_collate: ff-Latn-GW, lc_ctype: ff-Latn-GW
                    --  Fulah (Latin, Guinea-Bissau)
                ff-Latn-LR-x-icu: lc_collate: ff-Latn-LR, lc_ctype: ff-Latn-LR
                    --  Fulah (Latin, Liberia)
                ff-Latn-MR-x-icu: lc_collate: ff-Latn-MR, lc_ctype: ff-Latn-MR
                    --  Fulah (Latin, Mauritania)
                ff-Latn-NE-x-icu: lc_collate: ff-Latn-NE, lc_ctype: ff-Latn-NE
                    --  Fulah (Latin, Niger)
                ff-Latn-NG-x-icu: lc_collate: ff-Latn-NG, lc_ctype: ff-Latn-NG
                    --  Fulah (Latin, Nigeria)
                ff-Latn-SL-x-icu: lc_collate: ff-Latn-SL, lc_ctype: ff-Latn-SL
                    --  Fulah (Latin, Sierra Leone)
                ff-Latn-SN-x-icu: lc_collate: ff-Latn-SN, lc_ctype: ff-Latn-SN
                    --  Fulah (Latin, Senegal)
                ff-Latn-x-icu: lc_collate: ff-Latn, lc_ctype: ff-Latn
                    --  Fulah (Latin)
                ff-x-icu: lc_collate: ff, lc_ctype: ff
                    --  Fulah
                fi-FI-x-icu: lc_collate: fi-FI, lc_ctype: fi-FI
                    --  Finnish (Finland)
                fi-x-icu: lc_collate: fi, lc_ctype: fi
                    --  Finnish
                fil-PH-x-icu: lc_collate: fil-PH, lc_ctype: fil-PH
                    --  Filipino (Philippines)
                fil-x-icu: lc_collate: fil, lc_ctype: fil
                    --  Filipino
                fo-DK-x-icu: lc_collate: fo-DK, lc_ctype: fo-DK
                    --  Faroese (Denmark)
                fo-FO-x-icu: lc_collate: fo-FO, lc_ctype: fo-FO
                    --  Faroese (Faroe Islands)
                fo-x-icu: lc_collate: fo, lc_ctype: fo
                    --  Faroese
                fr-BE-x-icu: lc_collate: fr-BE, lc_ctype: fr-BE
                    --  French (Belgium)
                fr-BF-x-icu: lc_collate: fr-BF, lc_ctype: fr-BF
                    --  French (Burkina Faso)
                fr-BI-x-icu: lc_collate: fr-BI, lc_ctype: fr-BI
                    --  French (Burundi)
                fr-BJ-x-icu: lc_collate: fr-BJ, lc_ctype: fr-BJ
                    --  French (Benin)
                fr-BL-x-icu: lc_collate: fr-BL, lc_ctype: fr-BL
                fr-CA-x-icu: lc_collate: fr-CA, lc_ctype: fr-CA
                    --  French (Canada)
                fr-CD-x-icu: lc_collate: fr-CD, lc_ctype: fr-CD
                    --  French (Congo - Kinshasa)
                fr-CF-x-icu: lc_collate: fr-CF, lc_ctype: fr-CF
                    --  French (Central African Republic)
                fr-CG-x-icu: lc_collate: fr-CG, lc_ctype: fr-CG
                    --  French (Congo - Brazzaville)
                fr-CH-x-icu: lc_collate: fr-CH, lc_ctype: fr-CH
                    --  French (Switzerland)
                fr-CI-x-icu: lc_collate: fr-CI, lc_ctype: fr-CI
                fr-CM-x-icu: lc_collate: fr-CM, lc_ctype: fr-CM
                    --  French (Cameroon)
                fr-DJ-x-icu: lc_collate: fr-DJ, lc_ctype: fr-DJ
                    --  French (Djibouti)
                fr-DZ-x-icu: lc_collate: fr-DZ, lc_ctype: fr-DZ
                    --  French (Algeria)
                fr-FR-x-icu: lc_collate: fr-FR, lc_ctype: fr-FR
                    --  French (France)
                fr-GA-x-icu: lc_collate: fr-GA, lc_ctype: fr-GA
                    --  French (Gabon)
                fr-GF-x-icu: lc_collate: fr-GF, lc_ctype: fr-GF
                    --  French (French Guiana)
                fr-GN-x-icu: lc_collate: fr-GN, lc_ctype: fr-GN
                    --  French (Guinea)
                fr-GP-x-icu: lc_collate: fr-GP, lc_ctype: fr-GP
                    --  French (Guadeloupe)
                fr-GQ-x-icu: lc_collate: fr-GQ, lc_ctype: fr-GQ
                    --  French (Equatorial Guinea)
                fr-HT-x-icu: lc_collate: fr-HT, lc_ctype: fr-HT
                    --  French (Haiti)
                fr-KM-x-icu: lc_collate: fr-KM, lc_ctype: fr-KM
                    --  French (Comoros)
                fr-LU-x-icu: lc_collate: fr-LU, lc_ctype: fr-LU
                    --  French (Luxembourg)
                fr-MA-x-icu: lc_collate: fr-MA, lc_ctype: fr-MA
                    --  French (Morocco)
                fr-MC-x-icu: lc_collate: fr-MC, lc_ctype: fr-MC
                    --  French (Monaco)
                fr-MF-x-icu: lc_collate: fr-MF, lc_ctype: fr-MF
                    --  French (St. Martin)
                fr-MG-x-icu: lc_collate: fr-MG, lc_ctype: fr-MG
                    --  French (Madagascar)
                fr-ML-x-icu: lc_collate: fr-ML, lc_ctype: fr-ML
                    --  French (Mali)
                fr-MQ-x-icu: lc_collate: fr-MQ, lc_ctype: fr-MQ
                    --  French (Martinique)
                fr-MR-x-icu: lc_collate: fr-MR, lc_ctype: fr-MR
                    --  French (Mauritania)
                fr-MU-x-icu: lc_collate: fr-MU, lc_ctype: fr-MU
                    --  French (Mauritius)
                fr-NC-x-icu: lc_collate: fr-NC, lc_ctype: fr-NC
                    --  French (New Caledonia)
                fr-NE-x-icu: lc_collate: fr-NE, lc_ctype: fr-NE
                    --  French (Niger)
                fr-PF-x-icu: lc_collate: fr-PF, lc_ctype: fr-PF
                    --  French (French Polynesia)
                fr-PM-x-icu: lc_collate: fr-PM, lc_ctype: fr-PM
                    --  French (St. Pierre & Miquelon)
                fr-RE-x-icu: lc_collate: fr-RE, lc_ctype: fr-RE
                fr-RW-x-icu: lc_collate: fr-RW, lc_ctype: fr-RW
                    --  French (Rwanda)
                fr-SC-x-icu: lc_collate: fr-SC, lc_ctype: fr-SC
                    --  French (Seychelles)
                fr-SN-x-icu: lc_collate: fr-SN, lc_ctype: fr-SN
                    --  French (Senegal)
                fr-SY-x-icu: lc_collate: fr-SY, lc_ctype: fr-SY
                    --  French (Syria)
                fr-TD-x-icu: lc_collate: fr-TD, lc_ctype: fr-TD
                    --  French (Chad)
                fr-TG-x-icu: lc_collate: fr-TG, lc_ctype: fr-TG
                    --  French (Togo)
                fr-TN-x-icu: lc_collate: fr-TN, lc_ctype: fr-TN
                    --  French (Tunisia)
                fr-VU-x-icu: lc_collate: fr-VU, lc_ctype: fr-VU
                    --  French (Vanuatu)
                fr-WF-x-icu: lc_collate: fr-WF, lc_ctype: fr-WF
                    --  French (Wallis & Futuna)
                fr-YT-x-icu: lc_collate: fr-YT, lc_ctype: fr-YT
                    --  French (Mayotte)
                fr-x-icu: lc_collate: fr, lc_ctype: fr
                    --  French
                fur-IT-x-icu: lc_collate: fur-IT, lc_ctype: fur-IT
                    --  Friulian (Italy)
                fur-x-icu: lc_collate: fur, lc_ctype: fur
                    --  Friulian
                fy-NL-x-icu: lc_collate: fy-NL, lc_ctype: fy-NL
                    --  Western Frisian (Netherlands)
                fy-x-icu: lc_collate: fy, lc_ctype: fy
                    --  Western Frisian
                ga-GB-x-icu: lc_collate: ga-GB, lc_ctype: ga-GB
                    --  Irish (United Kingdom)
                ga-IE-x-icu: lc_collate: ga-IE, lc_ctype: ga-IE
                    --  Irish (Ireland)
                ga-x-icu: lc_collate: ga, lc_ctype: ga
                    --  Irish
                gd-GB-x-icu: lc_collate: gd-GB, lc_ctype: gd-GB
                    --  Scottish Gaelic (United Kingdom)
                gd-x-icu: lc_collate: gd, lc_ctype: gd
                    --  Scottish Gaelic
                gl-ES-x-icu: lc_collate: gl-ES, lc_ctype: gl-ES
                    --  Galician (Spain)
                gl-x-icu: lc_collate: gl, lc_ctype: gl
                    --  Galician
                gsw-CH-x-icu: lc_collate: gsw-CH, lc_ctype: gsw-CH
                    --  Swiss German (Switzerland)
                gsw-FR-x-icu: lc_collate: gsw-FR, lc_ctype: gsw-FR
                    --  Swiss German (France)
                gsw-LI-x-icu: lc_collate: gsw-LI, lc_ctype: gsw-LI
                    --  Swiss German (Liechtenstein)
                gsw-x-icu: lc_collate: gsw, lc_ctype: gsw
                    --  Swiss German
                gu-IN-x-icu: lc_collate: gu-IN, lc_ctype: gu-IN
                    --  Gujarati (India)
                gu-x-icu: lc_collate: gu, lc_ctype: gu
                    --  Gujarati
                guz-KE-x-icu: lc_collate: guz-KE, lc_ctype: guz-KE
                    --  Gusii (Kenya)
                guz-x-icu: lc_collate: guz, lc_ctype: guz
                    --  Gusii
                gv-IM-x-icu: lc_collate: gv-IM, lc_ctype: gv-IM
                    --  Manx (Isle of Man)
                gv-x-icu: lc_collate: gv, lc_ctype: gv
                    --  Manx
                ha-GH-x-icu: lc_collate: ha-GH, lc_ctype: ha-GH
                    --  Hausa (Ghana)
                ha-NE-x-icu: lc_collate: ha-NE, lc_ctype: ha-NE
                    --  Hausa (Niger)
                ha-NG-x-icu: lc_collate: ha-NG, lc_ctype: ha-NG
                    --  Hausa (Nigeria)
                ha-x-icu: lc_collate: ha, lc_ctype: ha
                    --  Hausa
                haw-US-x-icu: lc_collate: haw-US, lc_ctype: haw-US
                    --  Hawaiian (United States)
                haw-x-icu: lc_collate: haw, lc_ctype: haw
                    --  Hawaiian
                he-IL-x-icu: lc_collate: he-IL, lc_ctype: he-IL
                    --  Hebrew (Israel)
                he-x-icu: lc_collate: he, lc_ctype: he
                    --  Hebrew
                hi-IN-x-icu: lc_collate: hi-IN, lc_ctype: hi-IN
                    --  Hindi (India)
                hi-x-icu: lc_collate: hi, lc_ctype: hi
                    --  Hindi
                hr-BA-x-icu: lc_collate: hr-BA, lc_ctype: hr-BA
                    --  Croatian (Bosnia & Herzegovina)
                hr-HR-x-icu: lc_collate: hr-HR, lc_ctype: hr-HR
                    --  Croatian (Croatia)
                hr-x-icu: lc_collate: hr, lc_ctype: hr
                    --  Croatian
                hsb-DE-x-icu: lc_collate: hsb-DE, lc_ctype: hsb-DE
                    --  Upper Sorbian (Germany)
                hsb-x-icu: lc_collate: hsb, lc_ctype: hsb
                    --  Upper Sorbian
                hu-HU-x-icu: lc_collate: hu-HU, lc_ctype: hu-HU
                    --  Hungarian (Hungary)
                hu-x-icu: lc_collate: hu, lc_ctype: hu
                    --  Hungarian
                hy-AM-x-icu: lc_collate: hy-AM, lc_ctype: hy-AM
                    --  Armenian (Armenia)
                hy-x-icu: lc_collate: hy, lc_ctype: hy
                    --  Armenian
                ia-001-x-icu: lc_collate: ia-001, lc_ctype: ia-001
                    --  Interlingua (World)
                ia-x-icu: lc_collate: ia, lc_ctype: ia
                    --  Interlingua
                id-ID-x-icu: lc_collate: id-ID, lc_ctype: id-ID
                    --  Indonesian (Indonesia)
                id-x-icu: lc_collate: id, lc_ctype: id
                    --  Indonesian
                ig-NG-x-icu: lc_collate: ig-NG, lc_ctype: ig-NG
                    --  Igbo (Nigeria)
                ig-x-icu: lc_collate: ig, lc_ctype: ig
                    --  Igbo
                ii-CN-x-icu: lc_collate: ii-CN, lc_ctype: ii-CN
                    --  Sichuan Yi (China)
                ii-x-icu: lc_collate: ii, lc_ctype: ii
                    --  Sichuan Yi
                is-IS-x-icu: lc_collate: is-IS, lc_ctype: is-IS
                    --  Icelandic (Iceland)
                is-x-icu: lc_collate: is, lc_ctype: is
                    --  Icelandic
                it-CH-x-icu: lc_collate: it-CH, lc_ctype: it-CH
                    --  Italian (Switzerland)
                it-IT-x-icu: lc_collate: it-IT, lc_ctype: it-IT
                    --  Italian (Italy)
                it-SM-x-icu: lc_collate: it-SM, lc_ctype: it-SM
                    --  Italian (San Marino)
                it-VA-x-icu: lc_collate: it-VA, lc_ctype: it-VA
                    --  Italian (Vatican City)
                it-x-icu: lc_collate: it, lc_ctype: it
                    --  Italian
                ja-JP-x-icu: lc_collate: ja-JP, lc_ctype: ja-JP
                    --  Japanese (Japan)
                ja-x-icu: lc_collate: ja, lc_ctype: ja
                    --  Japanese
                jgo-CM-x-icu: lc_collate: jgo-CM, lc_ctype: jgo-CM
                    --  Ngomba (Cameroon)
                jgo-x-icu: lc_collate: jgo, lc_ctype: jgo
                    --  Ngomba
                jmc-TZ-x-icu: lc_collate: jmc-TZ, lc_ctype: jmc-TZ
                    --  Machame (Tanzania)
                jmc-x-icu: lc_collate: jmc, lc_ctype: jmc
                    --  Machame
                jv-ID-x-icu: lc_collate: jv-ID, lc_ctype: jv-ID
                    --  Javanese (Indonesia)
                jv-x-icu: lc_collate: jv, lc_ctype: jv
                    --  Javanese
                ka-GE-x-icu: lc_collate: ka-GE, lc_ctype: ka-GE
                    --  Georgian (Georgia)
                ka-x-icu: lc_collate: ka, lc_ctype: ka
                    --  Georgian
                kab-DZ-x-icu: lc_collate: kab-DZ, lc_ctype: kab-DZ
                    --  Kabyle (Algeria)
                kab-x-icu: lc_collate: kab, lc_ctype: kab
                    --  Kabyle
                kam-KE-x-icu: lc_collate: kam-KE, lc_ctype: kam-KE
                    --  Kamba (Kenya)
                kam-x-icu: lc_collate: kam, lc_ctype: kam
                    --  Kamba
                kde-TZ-x-icu: lc_collate: kde-TZ, lc_ctype: kde-TZ
                    --  Makonde (Tanzania)
                kde-x-icu: lc_collate: kde, lc_ctype: kde
                    --  Makonde
                kea-CV-x-icu: lc_collate: kea-CV, lc_ctype: kea-CV
                    --  Kabuverdianu (Cape Verde)
                kea-x-icu: lc_collate: kea, lc_ctype: kea
                    --  Kabuverdianu
                khq-ML-x-icu: lc_collate: khq-ML, lc_ctype: khq-ML
                    --  Koyra Chiini (Mali)
                khq-x-icu: lc_collate: khq, lc_ctype: khq
                    --  Koyra Chiini
                ki-KE-x-icu: lc_collate: ki-KE, lc_ctype: ki-KE
                    --  Kikuyu (Kenya)
                ki-x-icu: lc_collate: ki, lc_ctype: ki
                    --  Kikuyu
                kk-KZ-x-icu: lc_collate: kk-KZ, lc_ctype: kk-KZ
                    --  Kazakh (Kazakhstan)
                kk-x-icu: lc_collate: kk, lc_ctype: kk
                    --  Kazakh
                kk_KZ: lc_collate: kk_KZ.utf8, lc_ctype: kk_KZ.utf8
                kk_KZ.utf8: lc_collate: kk_KZ.utf8, lc_ctype: kk_KZ.utf8
                kkj-CM-x-icu: lc_collate: kkj-CM, lc_ctype: kkj-CM
                    --  Kako (Cameroon)
                kkj-x-icu: lc_collate: kkj, lc_ctype: kkj
                    --  Kako
                kl-GL-x-icu: lc_collate: kl-GL, lc_ctype: kl-GL
                    --  Kalaallisut (Greenland)
                kl-x-icu: lc_collate: kl, lc_ctype: kl
                    --  Kalaallisut
                kln-KE-x-icu: lc_collate: kln-KE, lc_ctype: kln-KE
                    --  Kalenjin (Kenya)
                kln-x-icu: lc_collate: kln, lc_ctype: kln
                    --  Kalenjin
                km-KH-x-icu: lc_collate: km-KH, lc_ctype: km-KH
                    --  Khmer (Cambodia)
                km-x-icu: lc_collate: km, lc_ctype: km
                    --  Khmer
                kn-IN-x-icu: lc_collate: kn-IN, lc_ctype: kn-IN
                    --  Kannada (India)
                kn-x-icu: lc_collate: kn, lc_ctype: kn
                    --  Kannada
                ko-KP-x-icu: lc_collate: ko-KP, lc_ctype: ko-KP
                    --  Korean (North Korea)
                ko-KR-x-icu: lc_collate: ko-KR, lc_ctype: ko-KR
                    --  Korean (South Korea)
                ko-x-icu: lc_collate: ko, lc_ctype: ko
                    --  Korean
                kok-IN-x-icu: lc_collate: kok-IN, lc_ctype: kok-IN
                    --  Konkani (India)
                kok-x-icu: lc_collate: kok, lc_ctype: kok
                    --  Konkani
                ks-IN-x-icu: lc_collate: ks-IN, lc_ctype: ks-IN
                    --  Kashmiri (India)
                ks-x-icu: lc_collate: ks, lc_ctype: ks
                    --  Kashmiri
                ksb-TZ-x-icu: lc_collate: ksb-TZ, lc_ctype: ksb-TZ
                    --  Shambala (Tanzania)
                ksb-x-icu: lc_collate: ksb, lc_ctype: ksb
                    --  Shambala
                ksf-CM-x-icu: lc_collate: ksf-CM, lc_ctype: ksf-CM
                    --  Bafia (Cameroon)
                ksf-x-icu: lc_collate: ksf, lc_ctype: ksf
                    --  Bafia
                ksh-DE-x-icu: lc_collate: ksh-DE, lc_ctype: ksh-DE
                    --  Colognian (Germany)
                ksh-x-icu: lc_collate: ksh, lc_ctype: ksh
                    --  Colognian
                ku-TR-x-icu: lc_collate: ku-TR, lc_ctype: ku-TR
                    --  Kurdish (Turkey)
                ku-x-icu: lc_collate: ku, lc_ctype: ku
                    --  Kurdish
                kw-GB-x-icu: lc_collate: kw-GB, lc_ctype: kw-GB
                    --  Cornish (United Kingdom)
                kw-x-icu: lc_collate: kw, lc_ctype: kw
                    --  Cornish
                ky-KG-x-icu: lc_collate: ky-KG, lc_ctype: ky-KG
                    --  Kyrgyz (Kyrgyzstan)
                ky-x-icu: lc_collate: ky, lc_ctype: ky
                    --  Kyrgyz
                lag-TZ-x-icu: lc_collate: lag-TZ, lc_ctype: lag-TZ
                    --  Langi (Tanzania)
                lag-x-icu: lc_collate: lag, lc_ctype: lag
                    --  Langi
                lb-LU-x-icu: lc_collate: lb-LU, lc_ctype: lb-LU
                    --  Luxembourgish (Luxembourg)
                lb-x-icu: lc_collate: lb, lc_ctype: lb
                    --  Luxembourgish
                lg-UG-x-icu: lc_collate: lg-UG, lc_ctype: lg-UG
                    --  Ganda (Uganda)
                lg-x-icu: lc_collate: lg, lc_ctype: lg
                    --  Ganda
                lkt-US-x-icu: lc_collate: lkt-US, lc_ctype: lkt-US
                    --  Lakota (United States)
                lkt-x-icu: lc_collate: lkt, lc_ctype: lkt
                    --  Lakota
                ln-AO-x-icu: lc_collate: ln-AO, lc_ctype: ln-AO
                    --  Lingala (Angola)
                ln-CD-x-icu: lc_collate: ln-CD, lc_ctype: ln-CD
                    --  Lingala (Congo - Kinshasa)
                ln-CF-x-icu: lc_collate: ln-CF, lc_ctype: ln-CF
                    --  Lingala (Central African Republic)
                ln-CG-x-icu: lc_collate: ln-CG, lc_ctype: ln-CG
                    --  Lingala (Congo - Brazzaville)
                ln-x-icu: lc_collate: ln, lc_ctype: ln
                    --  Lingala
                lo-LA-x-icu: lc_collate: lo-LA, lc_ctype: lo-LA
                    --  Lao (Laos)
                lo-x-icu: lc_collate: lo, lc_ctype: lo
                    --  Lao
                lrc-IQ-x-icu: lc_collate: lrc-IQ, lc_ctype: lrc-IQ
                    --  Northern Luri (Iraq)
                lrc-IR-x-icu: lc_collate: lrc-IR, lc_ctype: lrc-IR
                    --  Northern Luri (Iran)
                lrc-x-icu: lc_collate: lrc, lc_ctype: lrc
                    --  Northern Luri
                lt-LT-x-icu: lc_collate: lt-LT, lc_ctype: lt-LT
                    --  Lithuanian (Lithuania)
                lt-x-icu: lc_collate: lt, lc_ctype: lt
                    --  Lithuanian
                lu-CD-x-icu: lc_collate: lu-CD, lc_ctype: lu-CD
                    --  Luba-Katanga (Congo - Kinshasa)
                lu-x-icu: lc_collate: lu, lc_ctype: lu
                    --  Luba-Katanga
                luo-KE-x-icu: lc_collate: luo-KE, lc_ctype: luo-KE
                    --  Luo (Kenya)
                luo-x-icu: lc_collate: luo, lc_ctype: luo
                    --  Luo
                luy-KE-x-icu: lc_collate: luy-KE, lc_ctype: luy-KE
                    --  Luyia (Kenya)
                luy-x-icu: lc_collate: luy, lc_ctype: luy
                    --  Luyia
                lv-LV-x-icu: lc_collate: lv-LV, lc_ctype: lv-LV
                    --  Latvian (Latvia)
                lv-x-icu: lc_collate: lv, lc_ctype: lv
                    --  Latvian
                mas-KE-x-icu: lc_collate: mas-KE, lc_ctype: mas-KE
                    --  Masai (Kenya)
                mas-TZ-x-icu: lc_collate: mas-TZ, lc_ctype: mas-TZ
                    --  Masai (Tanzania)
                mas-x-icu: lc_collate: mas, lc_ctype: mas
                    --  Masai
                mer-KE-x-icu: lc_collate: mer-KE, lc_ctype: mer-KE
                    --  Meru (Kenya)
                mer-x-icu: lc_collate: mer, lc_ctype: mer
                    --  Meru
                mfe-MU-x-icu: lc_collate: mfe-MU, lc_ctype: mfe-MU
                    --  Morisyen (Mauritius)
                mfe-x-icu: lc_collate: mfe, lc_ctype: mfe
                    --  Morisyen
                mg-MG-x-icu: lc_collate: mg-MG, lc_ctype: mg-MG
                    --  Malagasy (Madagascar)
                mg-x-icu: lc_collate: mg, lc_ctype: mg
                    --  Malagasy
                mgh-MZ-x-icu: lc_collate: mgh-MZ, lc_ctype: mgh-MZ
                    --  Makhuwa-Meetto (Mozambique)
                mgh-x-icu: lc_collate: mgh, lc_ctype: mgh
                    --  Makhuwa-Meetto
                mgo-CM-x-icu: lc_collate: mgo-CM, lc_ctype: mgo-CM
                mgo-x-icu: lc_collate: mgo, lc_ctype: mgo
                mi-NZ-x-icu: lc_collate: mi-NZ, lc_ctype: mi-NZ
                    --  Maori (New Zealand)
                mi-x-icu: lc_collate: mi, lc_ctype: mi
                    --  Maori
                mk-MK-x-icu: lc_collate: mk-MK, lc_ctype: mk-MK
                    --  Macedonian (North Macedonia)
                mk-x-icu: lc_collate: mk, lc_ctype: mk
                    --  Macedonian
                ml-IN-x-icu: lc_collate: ml-IN, lc_ctype: ml-IN
                    --  Malayalam (India)
                ml-x-icu: lc_collate: ml, lc_ctype: ml
                    --  Malayalam
                mn-MN-x-icu: lc_collate: mn-MN, lc_ctype: mn-MN
                    --  Mongolian (Mongolia)
                mn-x-icu: lc_collate: mn, lc_ctype: mn
                    --  Mongolian
                mr-IN-x-icu: lc_collate: mr-IN, lc_ctype: mr-IN
                    --  Marathi (India)
                mr-x-icu: lc_collate: mr, lc_ctype: mr
                    --  Marathi
                ms-BN-x-icu: lc_collate: ms-BN, lc_ctype: ms-BN
                    --  Malay (Brunei)
                ms-MY-x-icu: lc_collate: ms-MY, lc_ctype: ms-MY
                    --  Malay (Malaysia)
                ms-SG-x-icu: lc_collate: ms-SG, lc_ctype: ms-SG
                    --  Malay (Singapore)
                ms-x-icu: lc_collate: ms, lc_ctype: ms
                    --  Malay
                mt-MT-x-icu: lc_collate: mt-MT, lc_ctype: mt-MT
                    --  Maltese (Malta)
                mt-x-icu: lc_collate: mt, lc_ctype: mt
                    --  Maltese
                mua-CM-x-icu: lc_collate: mua-CM, lc_ctype: mua-CM
                    --  Mundang (Cameroon)
                mua-x-icu: lc_collate: mua, lc_ctype: mua
                    --  Mundang
                my-MM-x-icu: lc_collate: my-MM, lc_ctype: my-MM
                    --  Burmese (Myanmar [Burma])
                my-x-icu: lc_collate: my, lc_ctype: my
                    --  Burmese
                mzn-IR-x-icu: lc_collate: mzn-IR, lc_ctype: mzn-IR
                    --  Mazanderani (Iran)
                mzn-x-icu: lc_collate: mzn, lc_ctype: mzn
                    --  Mazanderani
                naq-NA-x-icu: lc_collate: naq-NA, lc_ctype: naq-NA
                    --  Nama (Namibia)
                naq-x-icu: lc_collate: naq, lc_ctype: naq
                    --  Nama
                nb-NO-x-icu: lc_collate: nb-NO, lc_ctype: nb-NO
                nb-SJ-x-icu: lc_collate: nb-SJ, lc_ctype: nb-SJ
                nb-x-icu: lc_collate: nb, lc_ctype: nb
                nd-ZW-x-icu: lc_collate: nd-ZW, lc_ctype: nd-ZW
                    --  North Ndebele (Zimbabwe)
                nd-x-icu: lc_collate: nd, lc_ctype: nd
                    --  North Ndebele
                nds-DE-x-icu: lc_collate: nds-DE, lc_ctype: nds-DE
                    --  Low German (Germany)
                nds-NL-x-icu: lc_collate: nds-NL, lc_ctype: nds-NL
                    --  Low German (Netherlands)
                nds-x-icu: lc_collate: nds, lc_ctype: nds
                    --  Low German
                ne-IN-x-icu: lc_collate: ne-IN, lc_ctype: ne-IN
                    --  Nepali (India)
                ne-NP-x-icu: lc_collate: ne-NP, lc_ctype: ne-NP
                    --  Nepali (Nepal)
                ne-x-icu: lc_collate: ne, lc_ctype: ne
                    --  Nepali
                nl-AW-x-icu: lc_collate: nl-AW, lc_ctype: nl-AW
                    --  Dutch (Aruba)
                nl-BE-x-icu: lc_collate: nl-BE, lc_ctype: nl-BE
                    --  Dutch (Belgium)
                nl-BQ-x-icu: lc_collate: nl-BQ, lc_ctype: nl-BQ
                    --  Dutch (Caribbean Netherlands)
                nl-CW-x-icu: lc_collate: nl-CW, lc_ctype: nl-CW
                nl-NL-x-icu: lc_collate: nl-NL, lc_ctype: nl-NL
                    --  Dutch (Netherlands)
                nl-SR-x-icu: lc_collate: nl-SR, lc_ctype: nl-SR
                    --  Dutch (Suriname)
                nl-SX-x-icu: lc_collate: nl-SX, lc_ctype: nl-SX
                    --  Dutch (Sint Maarten)
                nl-x-icu: lc_collate: nl, lc_ctype: nl
                    --  Dutch
                nmg-CM-x-icu: lc_collate: nmg-CM, lc_ctype: nmg-CM
                    --  Kwasio (Cameroon)
                nmg-x-icu: lc_collate: nmg, lc_ctype: nmg
                    --  Kwasio
                nn-NO-x-icu: lc_collate: nn-NO, lc_ctype: nn-NO
                    --  Norwegian Nynorsk (Norway)
                nn-x-icu: lc_collate: nn, lc_ctype: nn
                    --  Norwegian Nynorsk
                nnh-CM-x-icu: lc_collate: nnh-CM, lc_ctype: nnh-CM
                    --  Ngiemboon (Cameroon)
                nnh-x-icu: lc_collate: nnh, lc_ctype: nnh
                    --  Ngiemboon
                nus-SS-x-icu: lc_collate: nus-SS, lc_ctype: nus-SS
                    --  Nuer (South Sudan)
                nus-x-icu: lc_collate: nus, lc_ctype: nus
                    --  Nuer
                nyn-UG-x-icu: lc_collate: nyn-UG, lc_ctype: nyn-UG
                    --  Nyankole (Uganda)
                nyn-x-icu: lc_collate: nyn, lc_ctype: nyn
                    --  Nyankole
                om-ET-x-icu: lc_collate: om-ET, lc_ctype: om-ET
                    --  Oromo (Ethiopia)
                om-KE-x-icu: lc_collate: om-KE, lc_ctype: om-KE
                    --  Oromo (Kenya)
                om-x-icu: lc_collate: om, lc_ctype: om
                    --  Oromo
                or-IN-x-icu: lc_collate: or-IN, lc_ctype: or-IN
                    --  Odia (India)
                or-x-icu: lc_collate: or, lc_ctype: or
                    --  Odia
                os-GE-x-icu: lc_collate: os-GE, lc_ctype: os-GE
                    --  Ossetic (Georgia)
                os-RU-x-icu: lc_collate: os-RU, lc_ctype: os-RU
                    --  Ossetic (Russia)
                os-x-icu: lc_collate: os, lc_ctype: os
                    --  Ossetic
                pa-Arab-PK-x-icu: lc_collate: pa-Arab-PK, lc_ctype: pa-Arab-PK
                    --  Punjabi (Arabic, Pakistan)
                pa-Arab-x-icu: lc_collate: pa-Arab, lc_ctype: pa-Arab
                    --  Punjabi (Arabic)
                pa-Guru-IN-x-icu: lc_collate: pa-Guru-IN, lc_ctype: pa-Guru-IN
                    --  Punjabi (Gurmukhi, India)
                pa-Guru-x-icu: lc_collate: pa-Guru, lc_ctype: pa-Guru
                    --  Punjabi (Gurmukhi)
                pa-x-icu: lc_collate: pa, lc_ctype: pa
                    --  Punjabi
                pl-PL-x-icu: lc_collate: pl-PL, lc_ctype: pl-PL
                    --  Polish (Poland)
                pl-x-icu: lc_collate: pl, lc_ctype: pl
                    --  Polish
                ps-AF-x-icu: lc_collate: ps-AF, lc_ctype: ps-AF
                    --  Pashto (Afghanistan)
                ps-PK-x-icu: lc_collate: ps-PK, lc_ctype: ps-PK
                    --  Pashto (Pakistan)
                ps-x-icu: lc_collate: ps, lc_ctype: ps
                    --  Pashto
                pt-AO-x-icu: lc_collate: pt-AO, lc_ctype: pt-AO
                    --  Portuguese (Angola)
                pt-BR-x-icu: lc_collate: pt-BR, lc_ctype: pt-BR
                    --  Portuguese (Brazil)
                pt-CH-x-icu: lc_collate: pt-CH, lc_ctype: pt-CH
                    --  Portuguese (Switzerland)
                pt-CV-x-icu: lc_collate: pt-CV, lc_ctype: pt-CV
                    --  Portuguese (Cape Verde)
                pt-GQ-x-icu: lc_collate: pt-GQ, lc_ctype: pt-GQ
                    --  Portuguese (Equatorial Guinea)
                pt-GW-x-icu: lc_collate: pt-GW, lc_ctype: pt-GW
                    --  Portuguese (Guinea-Bissau)
                pt-LU-x-icu: lc_collate: pt-LU, lc_ctype: pt-LU
                    --  Portuguese (Luxembourg)
                pt-MO-x-icu: lc_collate: pt-MO, lc_ctype: pt-MO
                    --  Portuguese (Macao SAR China)
                pt-MZ-x-icu: lc_collate: pt-MZ, lc_ctype: pt-MZ
                    --  Portuguese (Mozambique)
                pt-PT-x-icu: lc_collate: pt-PT, lc_ctype: pt-PT
                    --  Portuguese (Portugal)
                pt-ST-x-icu: lc_collate: pt-ST, lc_ctype: pt-ST
                pt-TL-x-icu: lc_collate: pt-TL, lc_ctype: pt-TL
                    --  Portuguese (Timor-Leste)
                pt-x-icu: lc_collate: pt, lc_ctype: pt
                    --  Portuguese
                qu-BO-x-icu: lc_collate: qu-BO, lc_ctype: qu-BO
                    --  Quechua (Bolivia)
                qu-EC-x-icu: lc_collate: qu-EC, lc_ctype: qu-EC
                    --  Quechua (Ecuador)
                qu-PE-x-icu: lc_collate: qu-PE, lc_ctype: qu-PE
                    --  Quechua (Peru)
                qu-x-icu: lc_collate: qu, lc_ctype: qu
                    --  Quechua
                rm-CH-x-icu: lc_collate: rm-CH, lc_ctype: rm-CH
                    --  Romansh (Switzerland)
                rm-x-icu: lc_collate: rm, lc_ctype: rm
                    --  Romansh
                rn-BI-x-icu: lc_collate: rn-BI, lc_ctype: rn-BI
                    --  Rundi (Burundi)
                rn-x-icu: lc_collate: rn, lc_ctype: rn
                    --  Rundi
                ro-MD-x-icu: lc_collate: ro-MD, lc_ctype: ro-MD
                    --  Romanian (Moldova)
                ro-RO-x-icu: lc_collate: ro-RO, lc_ctype: ro-RO
                    --  Romanian (Romania)
                ro-x-icu: lc_collate: ro, lc_ctype: ro
                    --  Romanian
                rof-TZ-x-icu: lc_collate: rof-TZ, lc_ctype: rof-TZ
                    --  Rombo (Tanzania)
                rof-x-icu: lc_collate: rof, lc_ctype: rof
                    --  Rombo
                ru-BY-x-icu: lc_collate: ru-BY, lc_ctype: ru-BY
                    --  Russian (Belarus)
                ru-KG-x-icu: lc_collate: ru-KG, lc_ctype: ru-KG
                    --  Russian (Kyrgyzstan)
                ru-KZ-x-icu: lc_collate: ru-KZ, lc_ctype: ru-KZ
                    --  Russian (Kazakhstan)
                ru-MD-x-icu: lc_collate: ru-MD, lc_ctype: ru-MD
                    --  Russian (Moldova)
                ru-RU-x-icu: lc_collate: ru-RU, lc_ctype: ru-RU
                    --  Russian (Russia)
                ru-UA-x-icu: lc_collate: ru-UA, lc_ctype: ru-UA
                    --  Russian (Ukraine)
                ru-x-icu: lc_collate: ru, lc_ctype: ru
                    --  Russian
                rw-RW-x-icu: lc_collate: rw-RW, lc_ctype: rw-RW
                    --  Kinyarwanda (Rwanda)
                rw-x-icu: lc_collate: rw, lc_ctype: rw
                    --  Kinyarwanda
                rwk-TZ-x-icu: lc_collate: rwk-TZ, lc_ctype: rwk-TZ
                    --  Rwa (Tanzania)
                rwk-x-icu: lc_collate: rwk, lc_ctype: rwk
                    --  Rwa
                sah-RU-x-icu: lc_collate: sah-RU, lc_ctype: sah-RU
                    --  Sakha (Russia)
                sah-x-icu: lc_collate: sah, lc_ctype: sah
                    --  Sakha
                saq-KE-x-icu: lc_collate: saq-KE, lc_ctype: saq-KE
                    --  Samburu (Kenya)
                saq-x-icu: lc_collate: saq, lc_ctype: saq
                    --  Samburu
                sbp-TZ-x-icu: lc_collate: sbp-TZ, lc_ctype: sbp-TZ
                    --  Sangu (Tanzania)
                sbp-x-icu: lc_collate: sbp, lc_ctype: sbp
                    --  Sangu
                sd-PK-x-icu: lc_collate: sd-PK, lc_ctype: sd-PK
                    --  Sindhi (Pakistan)
                sd-x-icu: lc_collate: sd, lc_ctype: sd
                    --  Sindhi
                se-FI-x-icu: lc_collate: se-FI, lc_ctype: se-FI
                    --  Northern Sami (Finland)
                se-NO-x-icu: lc_collate: se-NO, lc_ctype: se-NO
                    --  Northern Sami (Norway)
                se-SE-x-icu: lc_collate: se-SE, lc_ctype: se-SE
                    --  Northern Sami (Sweden)
                se-x-icu: lc_collate: se, lc_ctype: se
                    --  Northern Sami
                seh-MZ-x-icu: lc_collate: seh-MZ, lc_ctype: seh-MZ
                    --  Sena (Mozambique)
                seh-x-icu: lc_collate: seh, lc_ctype: seh
                    --  Sena
                ses-ML-x-icu: lc_collate: ses-ML, lc_ctype: ses-ML
                    --  Koyraboro Senni (Mali)
                ses-x-icu: lc_collate: ses, lc_ctype: ses
                    --  Koyraboro Senni
                sg-CF-x-icu: lc_collate: sg-CF, lc_ctype: sg-CF
                    --  Sango (Central African Republic)
                sg-x-icu: lc_collate: sg, lc_ctype: sg
                    --  Sango
                shi-Latn-MA-x-icu: lc_collate: shi-Latn-MA, lc_ctype: shi-Latn-MA
                    --  Tachelhit (Latin, Morocco)
                shi-Latn-x-icu: lc_collate: shi-Latn, lc_ctype: shi-Latn
                    --  Tachelhit (Latin)
                shi-Tfng-MA-x-icu: lc_collate: shi-Tfng-MA, lc_ctype: shi-Tfng-MA
                    --  Tachelhit (Tifinagh, Morocco)
                shi-Tfng-x-icu: lc_collate: shi-Tfng, lc_ctype: shi-Tfng
                    --  Tachelhit (Tifinagh)
                shi-x-icu: lc_collate: shi, lc_ctype: shi
                    --  Tachelhit
                si-LK-x-icu: lc_collate: si-LK, lc_ctype: si-LK
                    --  Sinhala (Sri Lanka)
                si-x-icu: lc_collate: si, lc_ctype: si
                    --  Sinhala
                sk-SK-x-icu: lc_collate: sk-SK, lc_ctype: sk-SK
                    --  Slovak (Slovakia)
                sk-x-icu: lc_collate: sk, lc_ctype: sk
                    --  Slovak
                sl-SI-x-icu: lc_collate: sl-SI, lc_ctype: sl-SI
                    --  Slovenian (Slovenia)
                sl-x-icu: lc_collate: sl, lc_ctype: sl
                    --  Slovenian
                smn-FI-x-icu: lc_collate: smn-FI, lc_ctype: smn-FI
                    --  Inari Sami (Finland)
                smn-x-icu: lc_collate: smn, lc_ctype: smn
                    --  Inari Sami
                sn-ZW-x-icu: lc_collate: sn-ZW, lc_ctype: sn-ZW
                    --  Shona (Zimbabwe)
                sn-x-icu: lc_collate: sn, lc_ctype: sn
                    --  Shona
                so-DJ-x-icu: lc_collate: so-DJ, lc_ctype: so-DJ
                    --  Somali (Djibouti)
                so-ET-x-icu: lc_collate: so-ET, lc_ctype: so-ET
                    --  Somali (Ethiopia)
                so-KE-x-icu: lc_collate: so-KE, lc_ctype: so-KE
                    --  Somali (Kenya)
                so-SO-x-icu: lc_collate: so-SO, lc_ctype: so-SO
                    --  Somali (Somalia)
                so-x-icu: lc_collate: so, lc_ctype: so
                    --  Somali
                sq-AL-x-icu: lc_collate: sq-AL, lc_ctype: sq-AL
                    --  Albanian (Albania)
                sq-MK-x-icu: lc_collate: sq-MK, lc_ctype: sq-MK
                    --  Albanian (North Macedonia)
                sq-XK-x-icu: lc_collate: sq-XK, lc_ctype: sq-XK
                    --  Albanian (Kosovo)
                sq-x-icu: lc_collate: sq, lc_ctype: sq
                    --  Albanian
                sr-Cyrl-BA-x-icu: lc_collate: sr-Cyrl-BA, lc_ctype: sr-Cyrl-BA
                    --  Serbian (Cyrillic, Bosnia & Herzegovina)
                sr-Cyrl-ME-x-icu: lc_collate: sr-Cyrl-ME, lc_ctype: sr-Cyrl-ME
                    --  Serbian (Cyrillic, Montenegro)
                sr-Cyrl-RS-x-icu: lc_collate: sr-Cyrl-RS, lc_ctype: sr-Cyrl-RS
                    --  Serbian (Cyrillic, Serbia)
                sr-Cyrl-XK-x-icu: lc_collate: sr-Cyrl-XK, lc_ctype: sr-Cyrl-XK
                    --  Serbian (Cyrillic, Kosovo)
                sr-Cyrl-x-icu: lc_collate: sr-Cyrl, lc_ctype: sr-Cyrl
                    --  Serbian (Cyrillic)
                sr-Latn-BA-x-icu: lc_collate: sr-Latn-BA, lc_ctype: sr-Latn-BA
                    --  Serbian (Latin, Bosnia & Herzegovina)
                sr-Latn-ME-x-icu: lc_collate: sr-Latn-ME, lc_ctype: sr-Latn-ME
                    --  Serbian (Latin, Montenegro)
                sr-Latn-RS-x-icu: lc_collate: sr-Latn-RS, lc_ctype: sr-Latn-RS
                    --  Serbian (Latin, Serbia)
                sr-Latn-XK-x-icu: lc_collate: sr-Latn-XK, lc_ctype: sr-Latn-XK
                    --  Serbian (Latin, Kosovo)
                sr-Latn-x-icu: lc_collate: sr-Latn, lc_ctype: sr-Latn
                    --  Serbian (Latin)
                sr-x-icu: lc_collate: sr, lc_ctype: sr
                    --  Serbian
                sv-AX-x-icu: lc_collate: sv-AX, lc_ctype: sv-AX
                sv-FI-x-icu: lc_collate: sv-FI, lc_ctype: sv-FI
                    --  Swedish (Finland)
                sv-SE-x-icu: lc_collate: sv-SE, lc_ctype: sv-SE
                    --  Swedish (Sweden)
                sv-x-icu: lc_collate: sv, lc_ctype: sv
                    --  Swedish
                sw-CD-x-icu: lc_collate: sw-CD, lc_ctype: sw-CD
                    --  Swahili (Congo - Kinshasa)
                sw-KE-x-icu: lc_collate: sw-KE, lc_ctype: sw-KE
                    --  Swahili (Kenya)
                sw-TZ-x-icu: lc_collate: sw-TZ, lc_ctype: sw-TZ
                    --  Swahili (Tanzania)
                sw-UG-x-icu: lc_collate: sw-UG, lc_ctype: sw-UG
                    --  Swahili (Uganda)
                sw-x-icu: lc_collate: sw, lc_ctype: sw
                    --  Swahili
                ta-IN-x-icu: lc_collate: ta-IN, lc_ctype: ta-IN
                    --  Tamil (India)
                ta-LK-x-icu: lc_collate: ta-LK, lc_ctype: ta-LK
                    --  Tamil (Sri Lanka)
                ta-MY-x-icu: lc_collate: ta-MY, lc_ctype: ta-MY
                    --  Tamil (Malaysia)
                ta-SG-x-icu: lc_collate: ta-SG, lc_ctype: ta-SG
                    --  Tamil (Singapore)
                ta-x-icu: lc_collate: ta, lc_ctype: ta
                    --  Tamil
                te-IN-x-icu: lc_collate: te-IN, lc_ctype: te-IN
                    --  Telugu (India)
                te-x-icu: lc_collate: te, lc_ctype: te
                    --  Telugu
                teo-KE-x-icu: lc_collate: teo-KE, lc_ctype: teo-KE
                    --  Teso (Kenya)
                teo-UG-x-icu: lc_collate: teo-UG, lc_ctype: teo-UG
                    --  Teso (Uganda)
                teo-x-icu: lc_collate: teo, lc_ctype: teo
                    --  Teso
                tg-TJ-x-icu: lc_collate: tg-TJ, lc_ctype: tg-TJ
                    --  Tajik (Tajikistan)
                tg-x-icu: lc_collate: tg, lc_ctype: tg
                    --  Tajik
                th-TH-x-icu: lc_collate: th-TH, lc_ctype: th-TH
                    --  Thai (Thailand)
                th-x-icu: lc_collate: th, lc_ctype: th
                    --  Thai
                ti-ER-x-icu: lc_collate: ti-ER, lc_ctype: ti-ER
                    --  Tigrinya (Eritrea)
                ti-ET-x-icu: lc_collate: ti-ET, lc_ctype: ti-ET
                    --  Tigrinya (Ethiopia)
                ti-x-icu: lc_collate: ti, lc_ctype: ti
                    --  Tigrinya
                tk-TM-x-icu: lc_collate: tk-TM, lc_ctype: tk-TM
                    --  Turkmen (Turkmenistan)
                tk-x-icu: lc_collate: tk, lc_ctype: tk
                    --  Turkmen
                to-TO-x-icu: lc_collate: to-TO, lc_ctype: to-TO
                    --  Tongan (Tonga)
                to-x-icu: lc_collate: to, lc_ctype: to
                    --  Tongan
                tr-CY-x-icu: lc_collate: tr-CY, lc_ctype: tr-CY
                    --  Turkish (Cyprus)
                tr-TR-x-icu: lc_collate: tr-TR, lc_ctype: tr-TR
                    --  Turkish (Turkey)
                tr-x-icu: lc_collate: tr, lc_ctype: tr
                    --  Turkish
                tt-RU-x-icu: lc_collate: tt-RU, lc_ctype: tt-RU
                    --  Tatar (Russia)
                tt-x-icu: lc_collate: tt, lc_ctype: tt
                    --  Tatar
                twq-NE-x-icu: lc_collate: twq-NE, lc_ctype: twq-NE
                    --  Tasawaq (Niger)
                twq-x-icu: lc_collate: twq, lc_ctype: twq
                    --  Tasawaq
                tzm-MA-x-icu: lc_collate: tzm-MA, lc_ctype: tzm-MA
                    --  Central Atlas Tamazight (Morocco)
                tzm-x-icu: lc_collate: tzm, lc_ctype: tzm
                    --  Central Atlas Tamazight
                ucs_basic: lc_collate: C, lc_ctype: C
                ug-CN-x-icu: lc_collate: ug-CN, lc_ctype: ug-CN
                    --  Uyghur (China)
                ug-x-icu: lc_collate: ug, lc_ctype: ug
                    --  Uyghur
                uk-UA-x-icu: lc_collate: uk-UA, lc_ctype: uk-UA
                    --  Ukrainian (Ukraine)
                uk-x-icu: lc_collate: uk, lc_ctype: uk
                    --  Ukrainian
                und-x-icu: lc_collate: und, lc_ctype: und
                    --  Unknown language
                ur-IN-x-icu: lc_collate: ur-IN, lc_ctype: ur-IN
                    --  Urdu (India)
                ur-PK-x-icu: lc_collate: ur-PK, lc_ctype: ur-PK
                    --  Urdu (Pakistan)
                ur-x-icu: lc_collate: ur, lc_ctype: ur
                    --  Urdu
                uz-Arab-AF-x-icu: lc_collate: uz-Arab-AF, lc_ctype: uz-Arab-AF
                    --  Uzbek (Arabic, Afghanistan)
                uz-Arab-x-icu: lc_collate: uz-Arab, lc_ctype: uz-Arab
                    --  Uzbek (Arabic)
                uz-Cyrl-UZ-x-icu: lc_collate: uz-Cyrl-UZ, lc_ctype: uz-Cyrl-UZ
                    --  Uzbek (Cyrillic, Uzbekistan)
                uz-Cyrl-x-icu: lc_collate: uz-Cyrl, lc_ctype: uz-Cyrl
                    --  Uzbek (Cyrillic)
                uz-Latn-UZ-x-icu: lc_collate: uz-Latn-UZ, lc_ctype: uz-Latn-UZ
                    --  Uzbek (Latin, Uzbekistan)
                uz-Latn-x-icu: lc_collate: uz-Latn, lc_ctype: uz-Latn
                    --  Uzbek (Latin)
                uz-x-icu: lc_collate: uz, lc_ctype: uz
                    --  Uzbek
                vai-Latn-LR-x-icu: lc_collate: vai-Latn-LR, lc_ctype: vai-Latn-LR
                    --  Vai (Latin, Liberia)
                vai-Latn-x-icu: lc_collate: vai-Latn, lc_ctype: vai-Latn
                    --  Vai (Latin)
                vai-Vaii-LR-x-icu: lc_collate: vai-Vaii-LR, lc_ctype: vai-Vaii-LR
                    --  Vai (Vai, Liberia)
                vai-Vaii-x-icu: lc_collate: vai-Vaii, lc_ctype: vai-Vaii
                    --  Vai (Vai)
                vai-x-icu: lc_collate: vai, lc_ctype: vai
                    --  Vai
                vi-VN-x-icu: lc_collate: vi-VN, lc_ctype: vi-VN
                    --  Vietnamese (Vietnam)
                vi-x-icu: lc_collate: vi, lc_ctype: vi
                    --  Vietnamese
                vun-TZ-x-icu: lc_collate: vun-TZ, lc_ctype: vun-TZ
                    --  Vunjo (Tanzania)
                vun-x-icu: lc_collate: vun, lc_ctype: vun
                    --  Vunjo
                wae-CH-x-icu: lc_collate: wae-CH, lc_ctype: wae-CH
                    --  Walser (Switzerland)
                wae-x-icu: lc_collate: wae, lc_ctype: wae
                    --  Walser
                wo-SN-x-icu: lc_collate: wo-SN, lc_ctype: wo-SN
                    --  Wolof (Senegal)
                wo-x-icu: lc_collate: wo, lc_ctype: wo
                    --  Wolof
                xh-ZA-x-icu: lc_collate: xh-ZA, lc_ctype: xh-ZA
                    --  Xhosa (South Africa)
                xh-x-icu: lc_collate: xh, lc_ctype: xh
                    --  Xhosa
                xog-UG-x-icu: lc_collate: xog-UG, lc_ctype: xog-UG
                    --  Soga (Uganda)
                xog-x-icu: lc_collate: xog, lc_ctype: xog
                    --  Soga
                yav-CM-x-icu: lc_collate: yav-CM, lc_ctype: yav-CM
                    --  Yangben (Cameroon)
                yav-x-icu: lc_collate: yav, lc_ctype: yav
                    --  Yangben
                yi-001-x-icu: lc_collate: yi-001, lc_ctype: yi-001
                    --  Yiddish (World)
                yi-x-icu: lc_collate: yi, lc_ctype: yi
                    --  Yiddish
                yo-BJ-x-icu: lc_collate: yo-BJ, lc_ctype: yo-BJ
                    --  Yoruba (Benin)
                yo-NG-x-icu: lc_collate: yo-NG, lc_ctype: yo-NG
                    --  Yoruba (Nigeria)
                yo-x-icu: lc_collate: yo, lc_ctype: yo
                    --  Yoruba
                yue-Hans-CN-x-icu: lc_collate: yue-Hans-CN, lc_ctype: yue-Hans-CN
                    --  Cantonese (Simplified, China)
                yue-Hans-x-icu: lc_collate: yue-Hans, lc_ctype: yue-Hans
                    --  Cantonese (Simplified)
                yue-Hant-HK-x-icu: lc_collate: yue-Hant-HK, lc_ctype: yue-Hant-HK
                    --  Cantonese (Traditional, Hong Kong SAR China)
                yue-Hant-x-icu: lc_collate: yue-Hant, lc_ctype: yue-Hant
                    --  Cantonese (Traditional)
                yue-x-icu: lc_collate: yue, lc_ctype: yue
                    --  Cantonese
                zgh-MA-x-icu: lc_collate: zgh-MA, lc_ctype: zgh-MA
                    --  Standard Moroccan Tamazight (Morocco)
                zgh-x-icu: lc_collate: zgh, lc_ctype: zgh
                    --  Standard Moroccan Tamazight
                zh-Hans-CN-x-icu: lc_collate: zh-Hans-CN, lc_ctype: zh-Hans-CN
                    --  Chinese (Simplified, China)
                zh-Hans-HK-x-icu: lc_collate: zh-Hans-HK, lc_ctype: zh-Hans-HK
                    --  Chinese (Simplified, Hong Kong SAR China)
                zh-Hans-MO-x-icu: lc_collate: zh-Hans-MO, lc_ctype: zh-Hans-MO
                    --  Chinese (Simplified, Macao SAR China)
                zh-Hans-SG-x-icu: lc_collate: zh-Hans-SG, lc_ctype: zh-Hans-SG
                    --  Chinese (Simplified, Singapore)
                zh-Hans-x-icu: lc_collate: zh-Hans, lc_ctype: zh-Hans
                    --  Chinese (Simplified)
                zh-Hant-HK-x-icu: lc_collate: zh-Hant-HK, lc_ctype: zh-Hant-HK
                    --  Chinese (Traditional, Hong Kong SAR China)
                zh-Hant-MO-x-icu: lc_collate: zh-Hant-MO, lc_ctype: zh-Hant-MO
                    --  Chinese (Traditional, Macao SAR China)
                zh-Hant-TW-x-icu: lc_collate: zh-Hant-TW, lc_ctype: zh-Hant-TW
                    --  Chinese (Traditional, Taiwan)
                zh-Hant-x-icu: lc_collate: zh-Hant, lc_ctype: zh-Hant
                    --  Chinese (Traditional)
                zh-x-icu: lc_collate: zh, lc_ctype: zh
                    --  Chinese
                zu-ZA-x-icu: lc_collate: zu-ZA, lc_ctype: zu-ZA
                    --  Zulu (South Africa)
                zu-x-icu: lc_collate: zu, lc_ctype: zu
                    --  Zulu
            + aggregates
                array_agg(anyarray): transition: array_agg_array_transfn, transition type: internal, final function: array_agg_array_finalfn, final extra arguments, concurrency kind: safe
                    --  concatenate aggregate input into an array
                    + arguments
                        #1: return anyarray
                        #2: in anyarray
                array_agg(anynonarray): transition: array_agg_transfn, transition type: internal, final function: array_agg_finalfn, final extra arguments, concurrency kind: safe
                    --  concatenate aggregate input into an array
                    + arguments
                        #1: return anyarray
                        #2: in anynonarray
                avg(bigint): transition: int8_avg_accum, transition type: internal, final function: numeric_poly_avg, combine function: int8_avg_combine, serialization function: int8_avg_serialize, deserialization function: int8_avg_deserialize, state size: 48, inverse transition: int8_avg_accum_inv, moving transition: int8_avg_accum, moving state type: internal, moving state size: 48, moving final function: numeric_poly_avg, concurrency kind: safe
                    --  the average (arithmetic mean) as numeric of all bigint values
                    + arguments
                        #1: return numeric
                        #2: in bigint
                avg(double precision): transition: float8_accum, transition type: double precision[], final function: float8_avg, initial value: {0,0,0}, combine function: float8_combine, concurrency kind: safe
                    --  the average (arithmetic mean) as float8 of all float8 values
                    + arguments
                        #1: return double precision
                        #2: in double precision
                avg(integer): transition: int4_avg_accum, transition type: bigint[], final function: int8_avg, initial value: {0,0}, combine function: int4_avg_combine, inverse transition: int4_avg_accum_inv, moving transition: int4_avg_accum, moving state type: bigint[], moving final function: int8_avg, moving initial value: {0,0}, concurrency kind: safe
                    --  the average (arithmetic mean) as numeric of all integer values
                    + arguments
                        #1: return numeric
                        #2: in integer
                avg(interval): transition: interval_accum, transition type: interval[], final function: interval_avg, initial value: {0 second,0 second}, combine function: interval_combine, inverse transition: interval_accum_inv, moving transition: interval_accum, moving state type: interval[], moving final function: interval_avg, moving initial value: {0 second,0 second}, concurrency kind: safe
                    --  the average (arithmetic mean) as interval of all interval values
                    + arguments
                        #1: return interval
                        #2: in interval
                avg(numeric): transition: numeric_avg_accum, transition type: internal, final function: numeric_avg, combine function: numeric_avg_combine, serialization function: numeric_avg_serialize, deserialization function: numeric_avg_deserialize, state size: 128, inverse transition: numeric_accum_inv, moving transition: numeric_avg_accum, moving state type: internal, moving state size: 128, moving final function: numeric_avg, concurrency kind: safe
                    --  the average (arithmetic mean) as numeric of all numeric values
                    + arguments
                        #1: return numeric
                        #2: in numeric
                avg(real): transition: float4_accum, transition type: double precision[], final function: float8_avg, initial value: {0,0,0}, combine function: float8_combine, concurrency kind: safe
                    --  the average (arithmetic mean) as float8 of all float4 values
                    + arguments
                        #1: return double precision
                        #2: in real
                avg(smallint): transition: int2_avg_accum, transition type: bigint[], final function: int8_avg, initial value: {0,0}, combine function: int4_avg_combine, inverse transition: int2_avg_accum_inv, moving transition: int2_avg_accum, moving state type: bigint[], moving final function: int8_avg, moving initial value: {0,0}, concurrency kind: safe
                    --  the average (arithmetic mean) as numeric of all smallint values
                    + arguments
                        #1: return numeric
                        #2: in smallint
                bit_and(bigint): transition: int8and, transition type: bigint, combine function: int8and, concurrency kind: safe
                    --  bitwise-and bigint aggregate
                    + arguments
                        #1: return bigint
                        #2: in bigint
                bit_and(bit): transition: bitand, transition type: bit, combine function: bitand, concurrency kind: safe
                    --  bitwise-and bit aggregate
                    + arguments
                        #1: return bit
                        #2: in bit
                bit_and(integer): transition: int4and, transition type: integer, combine function: int4and, concurrency kind: safe
                    --  bitwise-and integer aggregate
                    + arguments
                        #1: return integer
                        #2: in integer
                bit_and(smallint): transition: int2and, transition type: smallint, combine function: int2and, concurrency kind: safe
                    --  bitwise-and smallint aggregate
                    + arguments
                        #1: return smallint
                        #2: in smallint
                bit_or(bigint): transition: int8or, transition type: bigint, combine function: int8or, concurrency kind: safe
                    --  bitwise-or bigint aggregate
                    + arguments
                        #1: return bigint
                        #2: in bigint
                bit_or(bit): transition: bitor, transition type: bit, combine function: bitor, concurrency kind: safe
                    --  bitwise-or bit aggregate
                    + arguments
                        #1: return bit
                        #2: in bit
                bit_or(integer): transition: int4or, transition type: integer, combine function: int4or, concurrency kind: safe
                    --  bitwise-or integer aggregate
                    + arguments
                        #1: return integer
                        #2: in integer
                bit_or(smallint): transition: int2or, transition type: smallint, combine function: int2or, concurrency kind: safe
                    --  bitwise-or smallint aggregate
                    + arguments
                        #1: return smallint
                        #2: in smallint
                bool_and(boolean): transition: booland_statefunc, transition type: boolean, sort operator: <, combine function: booland_statefunc, inverse transition: bool_accum_inv, moving transition: bool_accum, moving state type: internal, moving state size: 16, moving final function: bool_alltrue, concurrency kind: safe
                    --  boolean-and aggregate
                    + arguments
                        #1: return boolean
                        #2: in boolean
                bool_or(boolean): transition: boolor_statefunc, transition type: boolean, sort operator: >, combine function: boolor_statefunc, inverse transition: bool_accum_inv, moving transition: bool_accum, moving state type: internal, moving state size: 16, moving final function: bool_anytrue, concurrency kind: safe
                    --  boolean-or aggregate
                    + arguments
                        #1: return boolean
                        #2: in boolean
                corr(double precision,double precision): transition: float8_regr_accum, transition type: double precision[], final function: float8_corr, initial value: {0,0,0,0,0,0}, combine function: float8_regr_combine, concurrency kind: safe
                    --  correlation coefficient
                    + arguments
                        #1: return double precision
                        #2: in double precision
                        #3: in double precision
                count("any"): transition: int8inc_any, transition type: bigint, initial value: 0, combine function: int8pl, inverse transition: int8dec_any, moving transition: int8inc_any, moving state type: bigint, moving initial value: 0, concurrency kind: safe
                    --  number of input rows for which the input expression is not null
                    + arguments
                        #1: return bigint
                        #2: in "any"
                count(): transition: int8inc, transition type: bigint, initial value: 0, combine function: int8pl, inverse transition: int8dec, moving transition: int8inc, moving state type: bigint, moving initial value: 0, concurrency kind: safe
                    --  number of input rows
                    + arguments
                        #1: return bigint
                covar_pop(double precision,double precision): transition: float8_regr_accum, transition type: double precision[], final function: float8_covar_pop, initial value: {0,0,0,0,0,0}, combine function: float8_regr_combine, concurrency kind: safe
                    --  population covariance
                    + arguments
                        #1: return double precision
                        #2: in double precision
                        #3: in double precision
                covar_samp(double precision,double precision): transition: float8_regr_accum, transition type: double precision[], final function: float8_covar_samp, initial value: {0,0,0,0,0,0}, combine function: float8_regr_combine, concurrency kind: safe
                    --  sample covariance
                    + arguments
                        #1: return double precision
                        #2: in double precision
                        #3: in double precision
                cume_dist("any"): transition: ordered_set_transition_multi, transition type: internal, final function: cume_dist_final, kind: hypothetical-set, direct arguments: 1, final extra arguments, concurrency kind: safe
                    --  cumulative distribution of hypothetical row
                    + arguments
                        #1: return double precision
                        #2: in "any"
                dense_rank("any"): transition: ordered_set_transition_multi, transition type: internal, final function: dense_rank_final, kind: hypothetical-set, direct arguments: 1, final extra arguments, concurrency kind: safe
                    --  rank of hypothetical row without gaps
                    + arguments
                        #1: return bigint
                        #2: in "any"
                every(boolean): transition: booland_statefunc, transition type: boolean, sort operator: <, combine function: booland_statefunc, inverse transition: bool_accum_inv, moving transition: bool_accum, moving state type: internal, moving state size: 16, moving final function: bool_alltrue, concurrency kind: safe
                    --  boolean-and aggregate
                    + arguments
                        #1: return boolean
                        #2: in boolean
                json_agg(anyelement): transition: json_agg_transfn, transition type: internal, final function: json_agg_finalfn, concurrency kind: safe
                    --  aggregate input into json
                    + arguments
                        #1: return json
                        #2: in anyelement
                json_object_agg("any","any"): transition: json_object_agg_transfn, transition type: internal, final function: json_object_agg_finalfn, concurrency kind: safe
                    --  aggregate input into a json object
                    + arguments
                        #1: return json
                        #2: in "any"
                        #3: in "any"
                jsonb_agg(anyelement): transition: jsonb_agg_transfn, transition type: internal, final function: jsonb_agg_finalfn, concurrency kind: safe
                    --  aggregate input into jsonb
                    + arguments
                        #1: return jsonb
                        #2: in anyelement
                jsonb_object_agg("any","any"): transition: jsonb_object_agg_transfn, transition type: internal, final function: jsonb_object_agg_finalfn, concurrency kind: safe
                    --  aggregate inputs into jsonb object
                    + arguments
                        #1: return jsonb
                        #2: in "any"
                        #3: in "any"
                max(anyarray): transition: array_larger, transition type: anyarray, sort operator: >, combine function: array_larger, concurrency kind: safe
                    --  maximum value of all anyarray input values
                    + arguments
                        #1: return anyarray
                        #2: in anyarray
                max(anyenum): transition: enum_larger, transition type: anyenum, sort operator: >, combine function: enum_larger, concurrency kind: safe
                    --  maximum value of all enum input values
                    + arguments
                        #1: return anyenum
                        #2: in anyenum
                max(bigint): transition: int8larger, transition type: bigint, sort operator: >, combine function: int8larger, concurrency kind: safe
                    --  maximum value of all bigint input values
                    + arguments
                        #1: return bigint
                        #2: in bigint
                max(char): transition: bpchar_larger, transition type: char, sort operator: >, combine function: bpchar_larger, concurrency kind: safe
                    --  maximum value of all bpchar input values
                    + arguments
                        #1: return char
                        #2: in char
                max(date): transition: date_larger, transition type: date, sort operator: >, combine function: date_larger, concurrency kind: safe
                    --  maximum value of all date input values
                    + arguments
                        #1: return date
                        #2: in date
                max(double precision): transition: float8larger, transition type: double precision, sort operator: >, combine function: float8larger, concurrency kind: safe
                    --  maximum value of all float8 input values
                    + arguments
                        #1: return double precision
                        #2: in double precision
                max(inet): transition: network_larger, transition type: inet, sort operator: >, combine function: network_larger, concurrency kind: safe
                    --  maximum value of all inet input values
                    + arguments
                        #1: return inet
                        #2: in inet
                max(integer): transition: int4larger, transition type: integer, sort operator: >, combine function: int4larger, concurrency kind: safe
                    --  maximum value of all integer input values
                    + arguments
                        #1: return integer
                        #2: in integer
                max(interval): transition: interval_larger, transition type: interval, sort operator: >, combine function: interval_larger, concurrency kind: safe
                    --  maximum value of all interval input values
                    + arguments
                        #1: return interval
                        #2: in interval
                max(money): transition: cashlarger, transition type: money, sort operator: >, combine function: cashlarger, concurrency kind: safe
                    --  maximum value of all money input values
                    + arguments
                        #1: return money
                        #2: in money
                max(numeric): transition: numeric_larger, transition type: numeric, sort operator: >, combine function: numeric_larger, concurrency kind: safe
                    --  maximum value of all numeric input values
                    + arguments
                        #1: return numeric
                        #2: in numeric
                max(oid): transition: oidlarger, transition type: oid, sort operator: >, combine function: oidlarger, concurrency kind: safe
                    --  maximum value of all oid input values
                    + arguments
                        #1: return oid
                        #2: in oid
                max(real): transition: float4larger, transition type: real, sort operator: >, combine function: float4larger, concurrency kind: safe
                    --  maximum value of all float4 input values
                    + arguments
                        #1: return real
                        #2: in real
                max(smallint): transition: int2larger, transition type: smallint, sort operator: >, combine function: int2larger, concurrency kind: safe
                    --  maximum value of all smallint input values
                    + arguments
                        #1: return smallint
                        #2: in smallint
                max(text): transition: text_larger, transition type: text, sort operator: >, combine function: text_larger, concurrency kind: safe
                    --  maximum value of all text input values
                    + arguments
                        #1: return text
                        #2: in text
                max(tid): transition: tidlarger, transition type: tid, sort operator: >, combine function: tidlarger, concurrency kind: safe
                    --  maximum value of all tid input values
                    + arguments
                        #1: return tid
                        #2: in tid
                max(time with time zone): transition: timetz_larger, transition type: time with time zone, sort operator: >, combine function: timetz_larger, concurrency kind: safe
                    --  maximum value of all time with time zone input values
                    + arguments
                        #1: return time with time zone
                        #2: in time with time zone
                max(time): transition: time_larger, transition type: time, sort operator: >, combine function: time_larger, concurrency kind: safe
                    --  maximum value of all time input values
                    + arguments
                        #1: return time
                        #2: in time
                max(timestamp with time zone): transition: timestamptz_larger, transition type: timestamp with time zone, sort operator: >, combine function: timestamptz_larger, concurrency kind: safe
                    --  maximum value of all timestamp with time zone input values
                    + arguments
                        #1: return timestamp with time zone
                        #2: in timestamp with time zone
                max(timestamp): transition: timestamp_larger, transition type: timestamp, sort operator: >, combine function: timestamp_larger, concurrency kind: safe
                    --  maximum value of all timestamp input values
                    + arguments
                        #1: return timestamp
                        #2: in timestamp
                min(anyarray): transition: array_smaller, transition type: anyarray, sort operator: <, combine function: array_smaller, concurrency kind: safe
                    --  minimum value of all anyarray input values
                    + arguments
                        #1: return anyarray
                        #2: in anyarray
                min(anyenum): transition: enum_smaller, transition type: anyenum, sort operator: <, combine function: enum_smaller, concurrency kind: safe
                    --  minimum value of all enum input values
                    + arguments
                        #1: return anyenum
                        #2: in anyenum
                min(bigint): transition: int8smaller, transition type: bigint, sort operator: <, combine function: int8smaller, concurrency kind: safe
                    --  minimum value of all bigint input values
                    + arguments
                        #1: return bigint
                        #2: in bigint
                min(char): transition: bpchar_smaller, transition type: char, sort operator: <, combine function: bpchar_smaller, concurrency kind: safe
                    --  minimum value of all bpchar input values
                    + arguments
                        #1: return char
                        #2: in char
                min(date): transition: date_smaller, transition type: date, sort operator: <, combine function: date_smaller, concurrency kind: safe
                    --  minimum value of all date input values
                    + arguments
                        #1: return date
                        #2: in date
                min(double precision): transition: float8smaller, transition type: double precision, sort operator: <, combine function: float8smaller, concurrency kind: safe
                    --  minimum value of all float8 input values
                    + arguments
                        #1: return double precision
                        #2: in double precision
                min(inet): transition: network_smaller, transition type: inet, sort operator: <, combine function: network_smaller, concurrency kind: safe
                    --  minimum value of all inet input values
                    + arguments
                        #1: return inet
                        #2: in inet
                min(integer): transition: int4smaller, transition type: integer, sort operator: <, combine function: int4smaller, concurrency kind: safe
                    --  minimum value of all integer input values
                    + arguments
                        #1: return integer
                        #2: in integer
                min(interval): transition: interval_smaller, transition type: interval, sort operator: <, combine function: interval_smaller, concurrency kind: safe
                    --  minimum value of all interval input values
                    + arguments
                        #1: return interval
                        #2: in interval
                min(money): transition: cashsmaller, transition type: money, sort operator: <, combine function: cashsmaller, concurrency kind: safe
                    --  minimum value of all money input values
                    + arguments
                        #1: return money
                        #2: in money
                min(numeric): transition: numeric_smaller, transition type: numeric, sort operator: <, combine function: numeric_smaller, concurrency kind: safe
                    --  minimum value of all numeric input values
                    + arguments
                        #1: return numeric
                        #2: in numeric
                min(oid): transition: oidsmaller, transition type: oid, sort operator: <, combine function: oidsmaller, concurrency kind: safe
                    --  minimum value of all oid input values
                    + arguments
                        #1: return oid
                        #2: in oid
                min(real): transition: float4smaller, transition type: real, sort operator: <, combine function: float4smaller, concurrency kind: safe
                    --  minimum value of all float4 input values
                    + arguments
                        #1: return real
                        #2: in real
                min(smallint): transition: int2smaller, transition type: smallint, sort operator: <, combine function: int2smaller, concurrency kind: safe
                    --  minimum value of all smallint input values
                    + arguments
                        #1: return smallint
                        #2: in smallint
                min(text): transition: text_smaller, transition type: text, sort operator: <, combine function: text_smaller, concurrency kind: safe
                    --  minimum value of all text values
                    + arguments
                        #1: return text
                        #2: in text
                min(tid): transition: tidsmaller, transition type: tid, sort operator: <, combine function: tidsmaller, concurrency kind: safe
                    --  minimum value of all tid input values
                    + arguments
                        #1: return tid
                        #2: in tid
                min(time with time zone): transition: timetz_smaller, transition type: time with time zone, sort operator: <, combine function: timetz_smaller, concurrency kind: safe
                    --  minimum value of all time with time zone input values
                    + arguments
                        #1: return time with time zone
                        #2: in time with time zone
                min(time): transition: time_smaller, transition type: time, sort operator: <, combine function: time_smaller, concurrency kind: safe
                    --  minimum value of all time input values
                    + arguments
                        #1: return time
                        #2: in time
                min(timestamp with time zone): transition: timestamptz_smaller, transition type: timestamp with time zone, sort operator: <, combine function: timestamptz_smaller, concurrency kind: safe
                    --  minimum value of all timestamp with time zone input values
                    + arguments
                        #1: return timestamp with time zone
                        #2: in timestamp with time zone
                min(timestamp): transition: timestamp_smaller, transition type: timestamp, sort operator: <, combine function: timestamp_smaller, concurrency kind: safe
                    --  minimum value of all timestamp input values
                    + arguments
                        #1: return timestamp
                        #2: in timestamp
                mode(anyelement): transition: ordered_set_transition, transition type: internal, final function: mode_final, kind: ordered-set, final extra arguments, concurrency kind: safe
                    --  most common value
                    + arguments
                        #1: return anyelement
                        #2: in anyelement
                percent_rank("any"): transition: ordered_set_transition_multi, transition type: internal, final function: percent_rank_final, kind: hypothetical-set, direct arguments: 1, final extra arguments, concurrency kind: safe
                    --  fractional rank of hypothetical row
                    + arguments
                        #1: return double precision
                        #2: in "any"
                percentile_cont(double precision,double precision): transition: ordered_set_transition, transition type: internal, final function: percentile_cont_float8_final, kind: ordered-set, direct arguments: 1, concurrency kind: safe
                    --  continuous distribution percentile
                    + arguments
                        #1: return double precision
                        #2: in double precision
                        #3: in double precision
                percentile_cont(double precision,interval): transition: ordered_set_transition, transition type: internal, final function: percentile_cont_interval_final, kind: ordered-set, direct arguments: 1, concurrency kind: safe
                    --  continuous distribution percentile
                    + arguments
                        #1: return interval
                        #2: in double precision
                        #3: in interval
                percentile_cont(double precision[],double precision): transition: ordered_set_transition, transition type: internal, final function: percentile_cont_float8_multi_final, kind: ordered-set, direct arguments: 1, concurrency kind: safe
                    --  multiple continuous percentiles
                    + arguments
                        #1: return double precision[]
                        #2: in double precision[]
                        #3: in double precision
                percentile_cont(double precision[],interval): transition: ordered_set_transition, transition type: internal, final function: percentile_cont_interval_multi_final, kind: ordered-set, direct arguments: 1, concurrency kind: safe
                    --  multiple continuous percentiles
                    + arguments
                        #1: return interval[]
                        #2: in double precision[]
                        #3: in interval
                percentile_disc(double precision,anyelement): transition: ordered_set_transition, transition type: internal, final function: percentile_disc_final, kind: ordered-set, direct arguments: 1, final extra arguments, concurrency kind: safe
                    --  discrete percentile
                    + arguments
                        #1: return anyelement
                        #2: in double precision
                        #3: in anyelement
                percentile_disc(double precision[],anyelement): transition: ordered_set_transition, transition type: internal, final function: percentile_disc_multi_final, kind: ordered-set, direct arguments: 1, final extra arguments, concurrency kind: safe
                    --  multiple discrete percentiles
                    + arguments
                        #1: return anyarray
                        #2: in double precision[]
                        #3: in anyelement
                rank("any"): transition: ordered_set_transition_multi, transition type: internal, final function: rank_final, kind: hypothetical-set, direct arguments: 1, final extra arguments, concurrency kind: safe
                    --  rank of hypothetical row
                    + arguments
                        #1: return bigint
                        #2: in "any"
                regr_avgx(double precision,double precision): transition: float8_regr_accum, transition type: double precision[], final function: float8_regr_avgx, initial value: {0,0,0,0,0,0}, combine function: float8_regr_combine, concurrency kind: safe
                    --  average of the independent variable (sum(X)/N)
                    + arguments
                        #1: return double precision
                        #2: in double precision
                        #3: in double precision
                regr_avgy(double precision,double precision): transition: float8_regr_accum, transition type: double precision[], final function: float8_regr_avgy, initial value: {0,0,0,0,0,0}, combine function: float8_regr_combine, concurrency kind: safe
                    --  average of the dependent variable (sum(Y)/N)
                    + arguments
                        #1: return double precision
                        #2: in double precision
                        #3: in double precision
                regr_count(double precision,double precision): transition: int8inc_float8_float8, transition type: bigint, initial value: 0, combine function: int8pl, concurrency kind: safe
                    --  number of input rows in which both expressions are not null
                    + arguments
                        #1: return bigint
                        #2: in double precision
                        #3: in double precision
                regr_intercept(double precision,double precision): transition: float8_regr_accum, transition type: double precision[], final function: float8_regr_intercept, initial value: {0,0,0,0,0,0}, combine function: float8_regr_combine, concurrency kind: safe
                    --  y-intercept of the least-squares-fit linear equation determined by the (X, Y) pairs
                    + arguments
                        #1: return double precision
                        #2: in double precision
                        #3: in double precision
                regr_r2(double precision,double precision): transition: float8_regr_accum, transition type: double precision[], final function: float8_regr_r2, initial value: {0,0,0,0,0,0}, combine function: float8_regr_combine, concurrency kind: safe
                    --  square of the correlation coefficient
                    + arguments
                        #1: return double precision
                        #2: in double precision
                        #3: in double precision
                regr_slope(double precision,double precision): transition: float8_regr_accum, transition type: double precision[], final function: float8_regr_slope, initial value: {0,0,0,0,0,0}, combine function: float8_regr_combine, concurrency kind: safe
                    --  slope of the least-squares-fit linear equation determined by the (X, Y) pairs
                    + arguments
                        #1: return double precision
                        #2: in double precision
                        #3: in double precision
                regr_sxx(double precision,double precision): transition: float8_regr_accum, transition type: double precision[], final function: float8_regr_sxx, initial value: {0,0,0,0,0,0}, combine function: float8_regr_combine, concurrency kind: safe
                    --  sum of squares of the independent variable (sum(X^2) - sum(X)^2/N)
                    + arguments
                        #1: return double precision
                        #2: in double precision
                        #3: in double precision
                regr_sxy(double precision,double precision): transition: float8_regr_accum, transition type: double precision[], final function: float8_regr_sxy, initial value: {0,0,0,0,0,0}, combine function: float8_regr_combine, concurrency kind: safe
                    --  sum of products of independent times dependent variable (sum(X*Y) - sum(X) * sum(Y)/N)
                    + arguments
                        #1: return double precision
                        #2: in double precision
                        #3: in double precision
                regr_syy(double precision,double precision): transition: float8_regr_accum, transition type: double precision[], final function: float8_regr_syy, initial value: {0,0,0,0,0,0}, combine function: float8_regr_combine, concurrency kind: safe
                    --  sum of squares of the dependent variable (sum(Y^2) - sum(Y)^2/N)
                    + arguments
                        #1: return double precision
                        #2: in double precision
                        #3: in double precision
                stddev(bigint): transition: int8_accum, transition type: internal, final function: numeric_stddev_samp, combine function: numeric_combine, serialization function: numeric_serialize, deserialization function: numeric_deserialize, state size: 128, inverse transition: int8_accum_inv, moving transition: int8_accum, moving state type: internal, moving state size: 128, moving final function: numeric_stddev_samp, concurrency kind: safe
                    --  historical alias for stddev_samp
                    + arguments
                        #1: return numeric
                        #2: in bigint
                stddev(double precision): transition: float8_accum, transition type: double precision[], final function: float8_stddev_samp, initial value: {0,0,0}, combine function: float8_combine, concurrency kind: safe
                    --  historical alias for stddev_samp
                    + arguments
                        #1: return double precision
                        #2: in double precision
                stddev(integer): transition: int4_accum, transition type: internal, final function: numeric_poly_stddev_samp, combine function: numeric_poly_combine, serialization function: numeric_poly_serialize, deserialization function: numeric_poly_deserialize, state size: 48, inverse transition: int4_accum_inv, moving transition: int4_accum, moving state type: internal, moving state size: 48, moving final function: numeric_poly_stddev_samp, concurrency kind: safe
                    --  historical alias for stddev_samp
                    + arguments
                        #1: return numeric
                        #2: in integer
                stddev(numeric): transition: numeric_accum, transition type: internal, final function: numeric_stddev_samp, combine function: numeric_combine, serialization function: numeric_serialize, deserialization function: numeric_deserialize, state size: 128, inverse transition: numeric_accum_inv, moving transition: numeric_accum, moving state type: internal, moving state size: 128, moving final function: numeric_stddev_samp, concurrency kind: safe
                    --  historical alias for stddev_samp
                    + arguments
                        #1: return numeric
                        #2: in numeric
                stddev(real): transition: float4_accum, transition type: double precision[], final function: float8_stddev_samp, initial value: {0,0,0}, combine function: float8_combine, concurrency kind: safe
                    --  historical alias for stddev_samp
                    + arguments
                        #1: return double precision
                        #2: in real
                stddev(smallint): transition: int2_accum, transition type: internal, final function: numeric_poly_stddev_samp, combine function: numeric_poly_combine, serialization function: numeric_poly_serialize, deserialization function: numeric_poly_deserialize, state size: 48, inverse transition: int2_accum_inv, moving transition: int2_accum, moving state type: internal, moving state size: 48, moving final function: numeric_poly_stddev_samp, concurrency kind: safe
                    --  historical alias for stddev_samp
                    + arguments
                        #1: return numeric
                        #2: in smallint
                stddev_pop(bigint): transition: int8_accum, transition type: internal, final function: numeric_stddev_pop, combine function: numeric_combine, serialization function: numeric_serialize, deserialization function: numeric_deserialize, state size: 128, inverse transition: int8_accum_inv, moving transition: int8_accum, moving state type: internal, moving state size: 128, moving final function: numeric_stddev_pop, concurrency kind: safe
                    --  population standard deviation of bigint input values
                    + arguments
                        #1: return numeric
                        #2: in bigint
                stddev_pop(double precision): transition: float8_accum, transition type: double precision[], final function: float8_stddev_pop, initial value: {0,0,0}, combine function: float8_combine, concurrency kind: safe
                    --  population standard deviation of float8 input values
                    + arguments
                        #1: return double precision
                        #2: in double precision
                stddev_pop(integer): transition: int4_accum, transition type: internal, final function: numeric_poly_stddev_pop, combine function: numeric_poly_combine, serialization function: numeric_poly_serialize, deserialization function: numeric_poly_deserialize, state size: 48, inverse transition: int4_accum_inv, moving transition: int4_accum, moving state type: internal, moving state size: 48, moving final function: numeric_poly_stddev_pop, concurrency kind: safe
                    --  population standard deviation of integer input values
                    + arguments
                        #1: return numeric
                        #2: in integer
                stddev_pop(numeric): transition: numeric_accum, transition type: internal, final function: numeric_stddev_pop, combine function: numeric_combine, serialization function: numeric_serialize, deserialization function: numeric_deserialize, state size: 128, inverse transition: numeric_accum_inv, moving transition: numeric_accum, moving state type: internal, moving state size: 128, moving final function: numeric_stddev_pop, concurrency kind: safe
                    --  population standard deviation of numeric input values
                    + arguments
                        #1: return numeric
                        #2: in numeric
                stddev_pop(real): transition: float4_accum, transition type: double precision[], final function: float8_stddev_pop, initial value: {0,0,0}, combine function: float8_combine, concurrency kind: safe
                    --  population standard deviation of float4 input values
                    + arguments
                        #1: return double precision
                        #2: in real
                stddev_pop(smallint): transition: int2_accum, transition type: internal, final function: numeric_poly_stddev_pop, combine function: numeric_poly_combine, serialization function: numeric_poly_serialize, deserialization function: numeric_poly_deserialize, state size: 48, inverse transition: int2_accum_inv, moving transition: int2_accum, moving state type: internal, moving state size: 48, moving final function: numeric_poly_stddev_pop, concurrency kind: safe
                    --  population standard deviation of smallint input values
                    + arguments
                        #1: return numeric
                        #2: in smallint
                stddev_samp(bigint): transition: int8_accum, transition type: internal, final function: numeric_stddev_samp, combine function: numeric_combine, serialization function: numeric_serialize, deserialization function: numeric_deserialize, state size: 128, inverse transition: int8_accum_inv, moving transition: int8_accum, moving state type: internal, moving state size: 128, moving final function: numeric_stddev_samp, concurrency kind: safe
                    --  sample standard deviation of bigint input values
                    + arguments
                        #1: return numeric
                        #2: in bigint
                stddev_samp(double precision): transition: float8_accum, transition type: double precision[], final function: float8_stddev_samp, initial value: {0,0,0}, combine function: float8_combine, concurrency kind: safe
                    --  sample standard deviation of float8 input values
                    + arguments
                        #1: return double precision
                        #2: in double precision
                stddev_samp(integer): transition: int4_accum, transition type: internal, final function: numeric_poly_stddev_samp, combine function: numeric_poly_combine, serialization function: numeric_poly_serialize, deserialization function: numeric_poly_deserialize, state size: 48, inverse transition: int4_accum_inv, moving transition: int4_accum, moving state type: internal, moving state size: 48, moving final function: numeric_poly_stddev_samp, concurrency kind: safe
                    --  sample standard deviation of integer input values
                    + arguments
                        #1: return numeric
                        #2: in integer
                stddev_samp(numeric): transition: numeric_accum, transition type: internal, final function: numeric_stddev_samp, combine function: numeric_combine, serialization function: numeric_serialize, deserialization function: numeric_deserialize, state size: 128, inverse transition: numeric_accum_inv, moving transition: numeric_accum, moving state type: internal, moving state size: 128, moving final function: numeric_stddev_samp, concurrency kind: safe
                    --  sample standard deviation of numeric input values
                    + arguments
                        #1: return numeric
                        #2: in numeric
                stddev_samp(real): transition: float4_accum, transition type: double precision[], final function: float8_stddev_samp, initial value: {0,0,0}, combine function: float8_combine, concurrency kind: safe
                    --  sample standard deviation of float4 input values
                    + arguments
                        #1: return double precision
                        #2: in real
                stddev_samp(smallint): transition: int2_accum, transition type: internal, final function: numeric_poly_stddev_samp, combine function: numeric_poly_combine, serialization function: numeric_poly_serialize, deserialization function: numeric_poly_deserialize, state size: 48, inverse transition: int2_accum_inv, moving transition: int2_accum, moving state type: internal, moving state size: 48, moving final function: numeric_poly_stddev_samp, concurrency kind: safe
                    --  sample standard deviation of smallint input values
                    + arguments
                        #1: return numeric
                        #2: in smallint
                string_agg(bytea,bytea): transition: bytea_string_agg_transfn, transition type: internal, final function: bytea_string_agg_finalfn, concurrency kind: safe
                    --  concatenate aggregate input into a bytea
                    + arguments
                        #1: return bytea
                        #2: in bytea
                        #3: in bytea
                string_agg(text,text): transition: string_agg_transfn, transition type: internal, final function: string_agg_finalfn, concurrency kind: safe
                    --  concatenate aggregate input into a string
                    + arguments
                        #1: return text
                        #2: in text
                        #3: in text
                sum(bigint): transition: int8_avg_accum, transition type: internal, final function: numeric_poly_sum, combine function: int8_avg_combine, serialization function: int8_avg_serialize, deserialization function: int8_avg_deserialize, state size: 48, inverse transition: int8_avg_accum_inv, moving transition: int8_avg_accum, moving state type: internal, moving state size: 48, moving final function: numeric_poly_sum, concurrency kind: safe
                    --  sum as numeric across all bigint input values
                    + arguments
                        #1: return numeric
                        #2: in bigint
                sum(double precision): transition: float8pl, transition type: double precision, combine function: float8pl, concurrency kind: safe
                    --  sum as float8 across all float8 input values
                    + arguments
                        #1: return double precision
                        #2: in double precision
                sum(integer): transition: int4_sum, transition type: bigint, combine function: int8pl, inverse transition: int4_avg_accum_inv, moving transition: int4_avg_accum, moving state type: bigint[], moving final function: int2int4_sum, moving initial value: {0,0}, concurrency kind: safe
                    --  sum as bigint across all integer input values
                    + arguments
                        #1: return bigint
                        #2: in integer
                sum(interval): transition: interval_pl, transition type: interval, combine function: interval_pl, inverse transition: interval_mi, moving transition: interval_pl, moving state type: interval, concurrency kind: safe
                    --  sum as interval across all interval input values
                    + arguments
                        #1: return interval
                        #2: in interval
                sum(money): transition: cash_pl, transition type: money, combine function: cash_pl, inverse transition: cash_mi, moving transition: cash_pl, moving state type: money, concurrency kind: safe
                    --  sum as money across all money input values
                    + arguments
                        #1: return money
                        #2: in money
                sum(numeric): transition: numeric_avg_accum, transition type: internal, final function: numeric_sum, combine function: numeric_avg_combine, serialization function: numeric_avg_serialize, deserialization function: numeric_avg_deserialize, state size: 128, inverse transition: numeric_accum_inv, moving transition: numeric_avg_accum, moving state type: internal, moving state size: 128, moving final function: numeric_sum, concurrency kind: safe
                    --  sum as numeric across all numeric input values
                    + arguments
                        #1: return numeric
                        #2: in numeric
                sum(real): transition: float4pl, transition type: real, combine function: float4pl, concurrency kind: safe
                    --  sum as float4 across all float4 input values
                    + arguments
                        #1: return real
                        #2: in real
                sum(smallint): transition: int2_sum, transition type: bigint, combine function: int8pl, inverse transition: int2_avg_accum_inv, moving transition: int2_avg_accum, moving state type: bigint[], moving final function: int2int4_sum, moving initial value: {0,0}, concurrency kind: safe
                    --  sum as bigint across all smallint input values
                    + arguments
                        #1: return bigint
                        #2: in smallint
                var_pop(bigint): transition: int8_accum, transition type: internal, final function: numeric_var_pop, combine function: numeric_combine, serialization function: numeric_serialize, deserialization function: numeric_deserialize, state size: 128, inverse transition: int8_accum_inv, moving transition: int8_accum, moving state type: internal, moving state size: 128, moving final function: numeric_var_pop, concurrency kind: safe
                    --  population variance of bigint input values (square of the population standard deviation)
                    + arguments
                        #1: return numeric
                        #2: in bigint
                var_pop(double precision): transition: float8_accum, transition type: double precision[], final function: float8_var_pop, initial value: {0,0,0}, combine function: float8_combine, concurrency kind: safe
                    --  population variance of float8 input values (square of the population standard deviation)
                    + arguments
                        #1: return double precision
                        #2: in double precision
                var_pop(integer): transition: int4_accum, transition type: internal, final function: numeric_poly_var_pop, combine function: numeric_poly_combine, serialization function: numeric_poly_serialize, deserialization function: numeric_poly_deserialize, state size: 48, inverse transition: int4_accum_inv, moving transition: int4_accum, moving state type: internal, moving state size: 48, moving final function: numeric_poly_var_pop, concurrency kind: safe
                    --  population variance of integer input values (square of the population standard deviation)
                    + arguments
                        #1: return numeric
                        #2: in integer
                var_pop(numeric): transition: numeric_accum, transition type: internal, final function: numeric_var_pop, combine function: numeric_combine, serialization function: numeric_serialize, deserialization function: numeric_deserialize, state size: 128, inverse transition: numeric_accum_inv, moving transition: numeric_accum, moving state type: internal, moving state size: 128, moving final function: numeric_var_pop, concurrency kind: safe
                    --  population variance of numeric input values (square of the population standard deviation)
                    + arguments
                        #1: return numeric
                        #2: in numeric
                var_pop(real): transition: float4_accum, transition type: double precision[], final function: float8_var_pop, initial value: {0,0,0}, combine function: float8_combine, concurrency kind: safe
                    --  population variance of float4 input values (square of the population standard deviation)
                    + arguments
                        #1: return double precision
                        #2: in real
                var_pop(smallint): transition: int2_accum, transition type: internal, final function: numeric_poly_var_pop, combine function: numeric_poly_combine, serialization function: numeric_poly_serialize, deserialization function: numeric_poly_deserialize, state size: 48, inverse transition: int2_accum_inv, moving transition: int2_accum, moving state type: internal, moving state size: 48, moving final function: numeric_poly_var_pop, concurrency kind: safe
                    --  population variance of smallint input values (square of the population standard deviation)
                    + arguments
                        #1: return numeric
                        #2: in smallint
                var_samp(bigint): transition: int8_accum, transition type: internal, final function: numeric_var_samp, combine function: numeric_combine, serialization function: numeric_serialize, deserialization function: numeric_deserialize, state size: 128, inverse transition: int8_accum_inv, moving transition: int8_accum, moving state type: internal, moving state size: 128, moving final function: numeric_var_samp, concurrency kind: safe
                    --  sample variance of bigint input values (square of the sample standard deviation)
                    + arguments
                        #1: return numeric
                        #2: in bigint
                var_samp(double precision): transition: float8_accum, transition type: double precision[], final function: float8_var_samp, initial value: {0,0,0}, combine function: float8_combine, concurrency kind: safe
                    --  sample variance of float8 input values (square of the sample standard deviation)
                    + arguments
                        #1: return double precision
                        #2: in double precision
                var_samp(integer): transition: int4_accum, transition type: internal, final function: numeric_poly_var_samp, combine function: numeric_poly_combine, serialization function: numeric_poly_serialize, deserialization function: numeric_poly_deserialize, state size: 48, inverse transition: int4_accum_inv, moving transition: int4_accum, moving state type: internal, moving state size: 48, moving final function: numeric_poly_var_samp, concurrency kind: safe
                    --  sample variance of integer input values (square of the sample standard deviation)
                    + arguments
                        #1: return numeric
                        #2: in integer
                var_samp(numeric): transition: numeric_accum, transition type: internal, final function: numeric_var_samp, combine function: numeric_combine, serialization function: numeric_serialize, deserialization function: numeric_deserialize, state size: 128, inverse transition: numeric_accum_inv, moving transition: numeric_accum, moving state type: internal, moving state size: 128, moving final function: numeric_var_samp, concurrency kind: safe
                    --  sample variance of numeric input values (square of the sample standard deviation)
                    + arguments
                        #1: return numeric
                        #2: in numeric
                var_samp(real): transition: float4_accum, transition type: double precision[], final function: float8_var_samp, initial value: {0,0,0}, combine function: float8_combine, concurrency kind: safe
                    --  sample variance of float4 input values (square of the sample standard deviation)
                    + arguments
                        #1: return double precision
                        #2: in real
                var_samp(smallint): transition: int2_accum, transition type: internal, final function: numeric_poly_var_samp, combine function: numeric_poly_combine, serialization function: numeric_poly_serialize, deserialization function: numeric_poly_deserialize, state size: 48, inverse transition: int2_accum_inv, moving transition: int2_accum, moving state type: internal, moving state size: 48, moving final function: numeric_poly_var_samp, concurrency kind: safe
                    --  sample variance of smallint input values (square of the sample standard deviation)
                    + arguments
                        #1: return numeric
                        #2: in smallint
                variance(bigint): transition: int8_accum, transition type: internal, final function: numeric_var_samp, combine function: numeric_combine, serialization function: numeric_serialize, deserialization function: numeric_deserialize, state size: 128, inverse transition: int8_accum_inv, moving transition: int8_accum, moving state type: internal, moving state size: 128, moving final function: numeric_var_samp, concurrency kind: safe
                    --  historical alias for var_samp
                    + arguments
                        #1: return numeric
                        #2: in bigint
                variance(double precision): transition: float8_accum, transition type: double precision[], final function: float8_var_samp, initial value: {0,0,0}, combine function: float8_combine, concurrency kind: safe
                    --  historical alias for var_samp
                    + arguments
                        #1: return double precision
                        #2: in double precision
                variance(integer): transition: int4_accum, transition type: internal, final function: numeric_poly_var_samp, combine function: numeric_poly_combine, serialization function: numeric_poly_serialize, deserialization function: numeric_poly_deserialize, state size: 48, inverse transition: int4_accum_inv, moving transition: int4_accum, moving state type: internal, moving state size: 48, moving final function: numeric_poly_var_samp, concurrency kind: safe
                    --  historical alias for var_samp
                    + arguments
                        #1: return numeric
                        #2: in integer
                variance(numeric): transition: numeric_accum, transition type: internal, final function: numeric_var_samp, combine function: numeric_combine, serialization function: numeric_serialize, deserialization function: numeric_deserialize, state size: 128, inverse transition: numeric_accum_inv, moving transition: numeric_accum, moving state type: internal, moving state size: 128, moving final function: numeric_var_samp, concurrency kind: safe
                    --  historical alias for var_samp
                    + arguments
                        #1: return numeric
                        #2: in numeric
                variance(real): transition: float4_accum, transition type: double precision[], final function: float8_var_samp, initial value: {0,0,0}, combine function: float8_combine, concurrency kind: safe
                    --  historical alias for var_samp
                    + arguments
                        #1: return double precision
                        #2: in real
                variance(smallint): transition: int2_accum, transition type: internal, final function: numeric_poly_var_samp, combine function: numeric_poly_combine, serialization function: numeric_poly_serialize, deserialization function: numeric_poly_deserialize, state size: 48, inverse transition: int2_accum_inv, moving transition: int2_accum, moving state type: internal, moving state size: 48, moving final function: numeric_poly_var_samp, concurrency kind: safe
                    --  historical alias for var_samp
                    + arguments
                        #1: return numeric
                        #2: in smallint
                xmlagg(xml): transition: xmlconcat2, transition type: xml, concurrency kind: safe
                    --  concatenate XML values
                    + arguments
                        #1: return xml
                        #2: in xml
            + operator-classes
                aclitem_ops(hash): operator-class
                    . properties
                        default_class +
                        in_type = aclitem
                    . references
                        access_method = hash
                        operator_family = public.aclitem_ops
                array_ops(btree): operator-class
                    . properties
                        default_class +
                        in_type = anyarray
                    . references
                        access_method = btree
                        operator_family = public.array_ops
                array_ops(hash): operator-class
                    . properties
                        default_class +
                        in_type = anyarray
                    . references
                        access_method = hash
                        operator_family = public.array_ops
                array_ops(gin): operator-class
                    . properties
                        default_class +
                        in_type = anyarray
                        key_type = anyelement
                    . references
                        access_method = gin
                        operator_family = public.array_ops
                bit_minmax_ops(brin): operator-class
                    . properties
                        default_class +
                        in_type = bit
                        key_type = bit
                    . references
                        access_method = brin
                        operator_family = public.bit_minmax_ops
                bit_ops(btree): operator-class
                    . properties
                        default_class +
                        in_type = bit
                    . references
                        access_method = btree
                        operator_family = public.bit_ops
                bool_ops(btree): operator-class
                    . properties
                        default_class +
                        in_type = boolean
                    . references
                        access_method = btree
                        operator_family = public.bool_ops
                bool_ops(hash): operator-class
                    . properties
                        default_class +
                        in_type = boolean
                    . references
                        access_method = hash
                        operator_family = public.bool_ops
                box_inclusion_ops(brin): operator-class
                    . properties
                        default_class +
                        in_type = box
                        key_type = box
                    . references
                        access_method = brin
                        operator_family = public.box_inclusion_ops
                box_ops(gist): operator-class
                    . properties
                        default_class +
                        in_type = box
                    . references
                        access_method = gist
                        operator_family = public.box_ops
                box_ops(spgist): operator-class
                    . properties
                        default_class +
                        in_type = box
                    . references
                        access_method = spgist
                        operator_family = public.box_ops
                bpchar_minmax_ops(brin): operator-class
                    . properties
                        default_class +
                        in_type = character
                        key_type = character
                    . references
                        access_method = brin
                        operator_family = public.bpchar_minmax_ops
                bpchar_ops(btree): operator-class
                    . properties
                        default_class +
                        in_type = character
                    . references
                        access_method = btree
                        operator_family = public.bpchar_ops
                bpchar_ops(hash): operator-class
                    . properties
                        default_class +
                        in_type = character
                    . references
                        access_method = hash
                        operator_family = public.bpchar_ops
                bpchar_pattern_ops(btree): operator-class
                    . properties
                        in_type = character
                    . references
                        access_method = btree
                        operator_family = public.bpchar_pattern_ops
                bpchar_pattern_ops(hash): operator-class
                    . properties
                        in_type = character
                    . references
                        access_method = hash
                        operator_family = public.bpchar_pattern_ops
                bytea_minmax_ops(brin): operator-class
                    . properties
                        default_class +
                        in_type = bytea
                        key_type = bytea
                    . references
                        access_method = brin
                        operator_family = public.bytea_minmax_ops
                bytea_ops(btree): operator-class
                    . properties
                        default_class +
                        in_type = bytea
                    . references
                        access_method = btree
                        operator_family = public.bytea_ops
                bytea_ops(hash): operator-class
                    . properties
                        default_class +
                        in_type = bytea
                    . references
                        access_method = hash
                        operator_family = public.bytea_ops
                char_minmax_ops(brin): operator-class
                    . properties
                        default_class +
                        in_type = "char"
                        key_type = "char"
                    . references
                        access_method = brin
                        operator_family = public.char_minmax_ops
                char_ops(btree): operator-class
                    . properties
                        default_class +
                        in_type = "char"
                    . references
                        access_method = btree
                        operator_family = public.char_ops
                char_ops(hash): operator-class
                    . properties
                        default_class +
                        in_type = "char"
                    . references
                        access_method = hash
                        operator_family = public.char_ops
                cid_ops(hash): operator-class
                    . properties
                        default_class +
                        in_type = cid
                    . references
                        access_method = hash
                        operator_family = public.cid_ops
                cidr_ops(btree): operator-class
                    . properties
                        in_type = inet
                    . references
                        access_method = btree
                        operator_family = public.network_ops
                cidr_ops(hash): operator-class
                    . properties
                        in_type = inet
                    . references
                        access_method = hash
                        operator_family = public.network_ops
                circle_ops(gist): operator-class
                    . properties
                        default_class +
                        in_type = circle
                        key_type = box
                    . references
                        access_method = gist
                        operator_family = public.circle_ops
                date_minmax_ops(brin): operator-class
                    . properties
                        default_class +
                        in_type = date
                        key_type = date
                    . references
                        access_method = brin
                        operator_family = public.datetime_minmax_ops
                date_ops(btree): operator-class
                    . properties
                        default_class +
                        in_type = date
                    . references
                        access_method = btree
                        operator_family = public.datetime_ops
                date_ops(hash): operator-class
                    . properties
                        default_class +
                        in_type = date
                    . references
                        access_method = hash
                        operator_family = public.date_ops
                enum_ops(btree): operator-class
                    . properties
                        default_class +
                        in_type = anyenum
                    . references
                        access_method = btree
                        operator_family = public.enum_ops
                enum_ops(hash): operator-class
                    . properties
                        default_class +
                        in_type = anyenum
                    . references
                        access_method = hash
                        operator_family = public.enum_ops
                float4_minmax_ops(brin): operator-class
                    . properties
                        default_class +
                        in_type = real
                        key_type = real
                    . references
                        access_method = brin
                        operator_family = public.float_minmax_ops
                float4_ops(btree): operator-class
                    . properties
                        default_class +
                        in_type = real
                    . references
                        access_method = btree
                        operator_family = public.float_ops
                float4_ops(hash): operator-class
                    . properties
                        default_class +
                        in_type = real
                    . references
                        access_method = hash
                        operator_family = public.float_ops
                float8_minmax_ops(brin): operator-class
                    . properties
                        default_class +
                        in_type = double precision
                        key_type = double precision
                    . references
                        access_method = brin
                        operator_family = public.float_minmax_ops
                float8_ops(btree): operator-class
                    . properties
                        default_class +
                        in_type = double precision
                    . references
                        access_method = btree
                        operator_family = public.float_ops
                float8_ops(hash): operator-class
                    . properties
                        default_class +
                        in_type = double precision
                    . references
                        access_method = hash
                        operator_family = public.float_ops
                inet_inclusion_ops(brin): operator-class
                    . properties
                        default_class +
                        in_type = inet
                        key_type = inet
                    . references
                        access_method = brin
                        operator_family = public.network_inclusion_ops
                inet_minmax_ops(brin): operator-class
                    . properties
                        in_type = inet
                        key_type = inet
                    . references
                        access_method = brin
                        operator_family = public.network_minmax_ops
                inet_ops(btree): operator-class
                    . properties
                        default_class +
                        in_type = inet
                    . references
                        access_method = btree
                        operator_family = public.network_ops
                inet_ops(hash): operator-class
                    . properties
                        default_class +
                        in_type = inet
                    . references
                        access_method = hash
                        operator_family = public.network_ops
                inet_ops(gist): operator-class
                    . properties
                        in_type = inet
                    . references
                        access_method = gist
                        operator_family = public.network_ops
                inet_ops(spgist): operator-class
                    . properties
                        default_class +
                        in_type = inet
                    . references
                        access_method = spgist
                        operator_family = public.network_ops
                int2_minmax_ops(brin): operator-class
                    . properties
                        default_class +
                        in_type = smallint
                        key_type = smallint
                    . references
                        access_method = brin
                        operator_family = public.integer_minmax_ops
                int2_ops(btree): operator-class
                    . properties
                        default_class +
                        in_type = smallint
                    . references
                        access_method = btree
                        operator_family = public.integer_ops
                int2_ops(hash): operator-class
                    . properties
                        default_class +
                        in_type = smallint
                    . references
                        access_method = hash
                        operator_family = public.integer_ops
                int4_minmax_ops(brin): operator-class
                    . properties
                        default_class +
                        in_type = integer
                        key_type = integer
                    . references
                        access_method = brin
                        operator_family = public.integer_minmax_ops
                int4_ops(btree): operator-class
                    . properties
                        default_class +
                        in_type = integer
                    . references
                        access_method = btree
                        operator_family = public.integer_ops
                int4_ops(hash): operator-class
                    . properties
                        default_class +
                        in_type = integer
                    . references
                        access_method = hash
                        operator_family = public.integer_ops
                int8_minmax_ops(brin): operator-class
                    . properties
                        default_class +
                        in_type = bigint
                        key_type = bigint
                    . references
                        access_method = brin
                        operator_family = public.integer_minmax_ops
                int8_ops(btree): operator-class
                    . properties
                        default_class +
                        in_type = bigint
                    . references
                        access_method = btree
                        operator_family = public.integer_ops
                int8_ops(hash): operator-class
                    . properties
                        default_class +
                        in_type = bigint
                    . references
                        access_method = hash
                        operator_family = public.integer_ops
                interval_minmax_ops(brin): operator-class
                    . properties
                        default_class +
                        in_type = interval
                        key_type = interval
                    . references
                        access_method = brin
                        operator_family = public.interval_minmax_ops
                interval_ops(btree): operator-class
                    . properties
                        default_class +
                        in_type = interval
                    . references
                        access_method = btree
                        operator_family = public.interval_ops
                interval_ops(hash): operator-class
                    . properties
                        default_class +
                        in_type = interval
                    . references
                        access_method = hash
                        operator_family = public.interval_ops
                jsonb_ops(btree): operator-class
                    . properties
                        default_class +
                        in_type = jsonb
                    . references
                        access_method = btree
                        operator_family = public.jsonb_ops
                jsonb_ops(hash): operator-class
                    . properties
                        default_class +
                        in_type = jsonb
                    . references
                        access_method = hash
                        operator_family = public.jsonb_ops
                jsonb_ops(gin): operator-class
                    . properties
                        default_class +
                        in_type = jsonb
                        key_type = text
                    . references
                        access_method = gin
                        operator_family = public.jsonb_ops
                jsonb_path_ops(gin): operator-class
                    . properties
                        in_type = jsonb
                        key_type = integer
                    . references
                        access_method = gin
                        operator_family = public.jsonb_path_ops
                kd_point_ops(spgist): operator-class
                    . properties
                        in_type = point
                    . references
                        access_method = spgist
                        operator_family = public.kd_point_ops
                macaddr8_minmax_ops(brin): operator-class
                    . properties
                        default_class +
                        in_type = macaddr8
                        key_type = macaddr8
                    . references
                        access_method = brin
                        operator_family = public.macaddr8_minmax_ops
                macaddr8_ops(btree): operator-class
                    . properties
                        default_class +
                        in_type = macaddr8
                    . references
                        access_method = btree
                        operator_family = public.macaddr8_ops
                macaddr8_ops(hash): operator-class
                    . properties
                        default_class +
                        in_type = macaddr8
                    . references
                        access_method = hash
                        operator_family = public.macaddr8_ops
                macaddr_minmax_ops(brin): operator-class
                    . properties
                        default_class +
                        in_type = macaddr
                        key_type = macaddr
                    . references
                        access_method = brin
                        operator_family = public.macaddr_minmax_ops
                macaddr_ops(btree): operator-class
                    . properties
                        default_class +
                        in_type = macaddr
                    . references
                        access_method = btree
                        operator_family = public.macaddr_ops
                macaddr_ops(hash): operator-class
                    . properties
                        default_class +
                        in_type = macaddr
                    . references
                        access_method = hash
                        operator_family = public.macaddr_ops
                money_ops(btree): operator-class
                    . properties
                        default_class +
                        in_type = money
                    . references
                        access_method = btree
                        operator_family = public.money_ops
                name_minmax_ops(brin): operator-class
                    . properties
                        default_class +
                        in_type = name
                        key_type = name
                    . references
                        access_method = brin
                        operator_family = public.name_minmax_ops
                name_ops(btree): operator-class
                    . properties
                        default_class +
                        in_type = name
                        key_type = cstring
                    . references
                        access_method = btree
                        operator_family = public.text_ops
                name_ops(hash): operator-class
                    . properties
                        default_class +
                        in_type = name
                    . references
                        access_method = hash
                        operator_family = public.text_ops
                numeric_minmax_ops(brin): operator-class
                    . properties
                        default_class +
                        in_type = numeric
                        key_type = numeric
                    . references
                        access_method = brin
                        operator_family = public.numeric_minmax_ops
                numeric_ops(btree): operator-class
                    . properties
                        default_class +
                        in_type = numeric
                    . references
                        access_method = btree
                        operator_family = public.numeric_ops
                numeric_ops(hash): operator-class
                    . properties
                        default_class +
                        in_type = numeric
                    . references
                        access_method = hash
                        operator_family = public.numeric_ops
                oid_minmax_ops(brin): operator-class
                    . properties
                        default_class +
                        in_type = oid
                        key_type = oid
                    . references
                        access_method = brin
                        operator_family = public.oid_minmax_ops
                oid_ops(btree): operator-class
                    . properties
                        default_class +
                        in_type = oid
                    . references
                        access_method = btree
                        operator_family = public.oid_ops
                oid_ops(hash): operator-class
                    . properties
                        default_class +
                        in_type = oid
                    . references
                        access_method = hash
                        operator_family = public.oid_ops
                oidvector_ops(btree): operator-class
                    . properties
                        default_class +
                        in_type = oidvector
                    . references
                        access_method = btree
                        operator_family = public.oidvector_ops
                oidvector_ops(hash): operator-class
                    . properties
                        default_class +
                        in_type = oidvector
                    . references
                        access_method = hash
                        operator_family = public.oidvector_ops
                pg_lsn_minmax_ops(brin): operator-class
                    . properties
                        default_class +
                        in_type = pg_lsn
                        key_type = pg_lsn
                    . references
                        access_method = brin
                        operator_family = public.pg_lsn_minmax_ops
                pg_lsn_ops(btree): operator-class
                    . properties
                        default_class +
                        in_type = pg_lsn
                    . references
                        access_method = btree
                        operator_family = public.pg_lsn_ops
                pg_lsn_ops(hash): operator-class
                    . properties
                        default_class +
                        in_type = pg_lsn
                    . references
                        access_method = hash
                        operator_family = public.pg_lsn_ops
                point_ops(gist): operator-class
                    . properties
                        default_class +
                        in_type = point
                        key_type = box
                    . references
                        access_method = gist
                        operator_family = public.point_ops
                poly_ops(gist): operator-class
                    . properties
                        default_class +
                        in_type = polygon
                        key_type = box
                    . references
                        access_method = gist
                        operator_family = public.poly_ops
                poly_ops(spgist): operator-class
                    . properties
                        default_class +
                        in_type = polygon
                        key_type = box
                    . references
                        access_method = spgist
                        operator_family = public.poly_ops
                quad_point_ops(spgist): operator-class
                    . properties
                        default_class +
                        in_type = point
                    . references
                        access_method = spgist
                        operator_family = public.quad_point_ops
                range_inclusion_ops(brin): operator-class
                    . properties
                        default_class +
                        in_type = anyrange
                        key_type = anyrange
                    . references
                        access_method = brin
                        operator_family = public.range_inclusion_ops
                range_ops(btree): operator-class
                    . properties
                        default_class +
                        in_type = anyrange
                    . references
                        access_method = btree
                        operator_family = public.range_ops
                range_ops(hash): operator-class
                    . properties
                        default_class +
                        in_type = anyrange
                    . references
                        access_method = hash
                        operator_family = public.range_ops
                range_ops(gist): operator-class
                    . properties
                        default_class +
                        in_type = anyrange
                    . references
                        access_method = gist
                        operator_family = public.range_ops
                range_ops(spgist): operator-class
                    . properties
                        default_class +
                        in_type = anyrange
                    . references
                        access_method = spgist
                        operator_family = public.range_ops
                record_image_ops(btree): operator-class
                    . properties
                        in_type = record
                    . references
                        access_method = btree
                        operator_family = public.record_image_ops
                record_ops(btree): operator-class
                    . properties
                        default_class +
                        in_type = record
                    . references
                        access_method = btree
                        operator_family = public.record_ops
                text_minmax_ops(brin): operator-class
                    . properties
                        default_class +
                        in_type = text
                        key_type = text
                    . references
                        access_method = brin
                        operator_family = public.text_minmax_ops
                text_ops(btree): operator-class
                    . properties
                        default_class +
                        in_type = text
                    . references
                        access_method = btree
                        operator_family = public.text_ops
                text_ops(hash): operator-class
                    . properties
                        default_class +
                        in_type = text
                    . references
                        access_method = hash
                        operator_family = public.text_ops
                text_ops(spgist): operator-class
                    . properties
                        default_class +
                        in_type = text
                    . references
                        access_method = spgist
                        operator_family = public.text_ops
                text_pattern_ops(btree): operator-class
                    . properties
                        in_type = text
                    . references
                        access_method = btree
                        operator_family = public.text_pattern_ops
                text_pattern_ops(hash): operator-class
                    . properties
                        in_type = text
                    . references
                        access_method = hash
                        operator_family = public.text_pattern_ops
                tid_minmax_ops(brin): operator-class
                    . properties
                        default_class +
                        in_type = tid
                        key_type = tid
                    . references
                        access_method = brin
                        operator_family = public.tid_minmax_ops
                tid_ops(btree): operator-class
                    . properties
                        default_class +
                        in_type = tid
                    . references
                        access_method = btree
                        operator_family = public.tid_ops
                tid_ops(hash): operator-class
                    . properties
                        default_class +
                        in_type = tid
                    . references
                        access_method = hash
                        operator_family = public.tid_ops
                time_minmax_ops(brin): operator-class
                    . properties
                        default_class +
                        in_type = time without time zone
                        key_type = time without time zone
                    . references
                        access_method = brin
                        operator_family = public.time_minmax_ops
                time_ops(btree): operator-class
                    . properties
                        default_class +
                        in_type = time without time zone
                    . references
                        access_method = btree
                        operator_family = public.time_ops
                time_ops(hash): operator-class
                    . properties
                        default_class +
                        in_type = time without time zone
                    . references
                        access_method = hash
                        operator_family = public.time_ops
                timestamp_minmax_ops(brin): operator-class
                    . properties
                        default_class +
                        in_type = timestamp without time zone
                        key_type = timestamp without time zone
                    . references
                        access_method = brin
                        operator_family = public.datetime_minmax_ops
                timestamp_ops(btree): operator-class
                    . properties
                        default_class +
                        in_type = timestamp without time zone
                    . references
                        access_method = btree
                        operator_family = public.datetime_ops
                timestamp_ops(hash): operator-class
                    . properties
                        default_class +
                        in_type = timestamp without time zone
                    . references
                        access_method = hash
                        operator_family = public.timestamp_ops
                timestamptz_minmax_ops(brin): operator-class
                    . properties
                        default_class +
                        in_type = timestamp with time zone
                        key_type = timestamp with time zone
                    . references
                        access_method = brin
                        operator_family = public.datetime_minmax_ops
                timestamptz_ops(btree): operator-class
                    . properties
                        default_class +
                        in_type = timestamp with time zone
                    . references
                        access_method = btree
                        operator_family = public.datetime_ops
                timestamptz_ops(hash): operator-class
                    . properties
                        default_class +
                        in_type = timestamp with time zone
                    . references
                        access_method = hash
                        operator_family = public.timestamptz_ops
                timetz_minmax_ops(brin): operator-class
                    . properties
                        default_class +
                        in_type = time with time zone
                        key_type = time with time zone
                    . references
                        access_method = brin
                        operator_family = public.timetz_minmax_ops
                timetz_ops(btree): operator-class
                    . properties
                        default_class +
                        in_type = time with time zone
                    . references
                        access_method = btree
                        operator_family = public.timetz_ops
                timetz_ops(hash): operator-class
                    . properties
                        default_class +
                        in_type = time with time zone
                    . references
                        access_method = hash
                        operator_family = public.timetz_ops
                tsquery_ops(btree): operator-class
                    . properties
                        default_class +
                        in_type = tsquery
                    . references
                        access_method = btree
                        operator_family = public.tsquery_ops
                tsquery_ops(gist): operator-class
                    . properties
                        default_class +
                        in_type = tsquery
                        key_type = bigint
                    . references
                        access_method = gist
                        operator_family = public.tsquery_ops
                tsvector_ops(btree): operator-class
                    . properties
                        default_class +
                        in_type = tsvector
                    . references
                        access_method = btree
                        operator_family = public.tsvector_ops
                tsvector_ops(gist): operator-class
                    . properties
                        default_class +
                        in_type = tsvector
                        key_type = gtsvector
                    . references
                        access_method = gist
                        operator_family = public.tsvector_ops
                tsvector_ops(gin): operator-class
                    . properties
                        default_class +
                        in_type = tsvector
                        key_type = text
                    . references
                        access_method = gin
                        operator_family = public.tsvector_ops
                uuid_minmax_ops(brin): operator-class
                    . properties
                        default_class +
                        in_type = uuid
                        key_type = uuid
                    . references
                        access_method = brin
                        operator_family = public.uuid_minmax_ops
                uuid_ops(btree): operator-class
                    . properties
                        default_class +
                        in_type = uuid
                    . references
                        access_method = btree
                        operator_family = public.uuid_ops
                uuid_ops(hash): operator-class
                    . properties
                        default_class +
                        in_type = uuid
                    . references
                        access_method = hash
                        operator_family = public.uuid_ops
                varbit_minmax_ops(brin): operator-class
                    . properties
                        default_class +
                        in_type = bit varying
                        key_type = bit varying
                    . references
                        access_method = brin
                        operator_family = public.varbit_minmax_ops
                varbit_ops(btree): operator-class
                    . properties
                        default_class +
                        in_type = bit varying
                    . references
                        access_method = btree
                        operator_family = public.varbit_ops
                varchar_ops(btree): operator-class
                    . properties
                        in_type = text
                    . references
                        access_method = btree
                        operator_family = public.text_ops
                varchar_ops(hash): operator-class
                    . properties
                        in_type = text
                    . references
                        access_method = hash
                        operator_family = public.text_ops
                varchar_pattern_ops(btree): operator-class
                    . properties
                        in_type = text
                    . references
                        access_method = btree
                        operator_family = public.text_pattern_ops
                varchar_pattern_ops(hash): operator-class
                    . properties
                        in_type = text
                    . references
                        access_method = hash
                        operator_family = public.text_pattern_ops
                xid_ops(hash): operator-class
                    . properties
                        default_class +
                        in_type = xid
                    . references
                        access_method = hash
                        operator_family = public.xid_ops
            + operator-families
                aclitem_ops(hash): operator-family
                    . properties
                        am_ops = [
          AmOp(strategy=1, opSig==(aclitem,aclitem))
        ]
                        am_procs = [
          AmProc(num=1, (aclitem, aclitem), proc=hash_aclitem(aclitem)),
          AmProc(num=2, (aclitem, aclitem), proc=hash_aclitem_extended(aclitem,bigint))
        ]
                    . references
                        access_method = hash
                array_ops(btree): operator-family
                    . properties
                        am_ops = [
          AmOp(strategy=1, opSig=<(anyarray,anyarray)),
          AmOp(strategy=2, opSig=<=(anyarray,anyarray)),
          AmOp(strategy=3, opSig==(anyarray,anyarray)),
          AmOp(strategy=4, opSig=>=(anyarray,anyarray)),
          AmOp(strategy=5, opSig=>(anyarray,anyarray))
        ]
                        am_procs = [
          AmProc(num=1, (anyarray, anyarray), proc=btarraycmp(anyarray,anyarray))
        ]
                    . references
                        access_method = btree
                array_ops(hash): operator-family
                    . properties
                        am_ops = [
          AmOp(strategy=1, opSig==(anyarray,anyarray))
        ]
                        am_procs = [
          AmProc(num=1, (anyarray, anyarray), proc=hash_array(anyarray)),
          AmProc(num=2, (anyarray, anyarray), proc=hash_array_extended(anyarray,bigint))
        ]
                    . references
                        access_method = hash
                array_ops(gin): operator-family
                    . properties
                        am_ops = [
          AmOp(strategy=1, opSig=&&(anyarray,anyarray)),
          AmOp(strategy=2, opSig=@>(anyarray,anyarray)),
          AmOp(strategy=3, opSig=<@(anyarray,anyarray)),
          AmOp(strategy=4, opSig==(anyarray,anyarray))
        ]
                        am_procs = [
          AmProc(num=2, (anyarray, anyarray), proc=ginarrayextract(anyarray,internal,internal)),
          AmProc(num=3, (anyarray, anyarray), proc=ginqueryarrayextract(anyarray,internal,smallint,internal,internal,internal,internal)),
          AmProc(num=4, (anyarray, anyarray), proc=ginarrayconsistent(internal,smallint,anyarray,integer,internal,internal,internal,internal)),
          AmProc(num=6, (anyarray, anyarray), proc=ginarraytriconsistent(internal,smallint,anyarray,integer,internal,internal,internal))
        ]
                    . references
                        access_method = gin
                bit_minmax_ops(brin): operator-family
                    . properties
                        am_ops = [
          AmOp(strategy=1, opSig=<(bit,bit)),
          AmOp(strategy=2, opSig=<=(bit,bit)),
          AmOp(strategy=3, opSig==(bit,bit)),
          AmOp(strategy=4, opSig=>=(bit,bit)),
          AmOp(strategy=5, opSig=>(bit,bit))
        ]
                        am_procs = [
          AmProc(num=1, (bit, bit), proc=brin_minmax_opcinfo(internal)),
          AmProc(num=2, (bit, bit), proc=brin_minmax_add_value(internal,internal,internal,internal)),
          AmProc(num=3, (bit, bit), proc=brin_minmax_consistent(internal,internal,internal)),
          AmProc(num=4, (bit, bit), proc=brin_minmax_union(internal,internal,internal))
        ]
                    . references
                        access_method = brin
                bit_ops(btree): operator-family
                    . properties
                        am_ops = [
          AmOp(strategy=1, opSig=<(bit,bit)),
          AmOp(strategy=2, opSig=<=(bit,bit)),
          AmOp(strategy=3, opSig==(bit,bit)),
          AmOp(strategy=4, opSig=>=(bit,bit)),
          AmOp(strategy=5, opSig=>(bit,bit))
        ]
                        am_procs = [
          AmProc(num=1, (bit, bit), proc=bitcmp(bit,bit))
        ]
                    . references
                        access_method = btree
                bool_ops(btree): operator-family
                    . properties
                        am_ops = [
          AmOp(strategy=1, opSig=<(boolean,boolean)),
          AmOp(strategy=2, opSig=<=(boolean,boolean)),
          AmOp(strategy=3, opSig==(boolean,boolean)),
          AmOp(strategy=4, opSig=>=(boolean,boolean)),
          AmOp(strategy=5, opSig=>(boolean,boolean))
        ]
                        am_procs = [
          AmProc(num=1, (boolean, boolean), proc=btboolcmp(boolean,boolean))
        ]
                    . references
                        access_method = btree
                bool_ops(hash): operator-family
                    . properties
                        am_ops = [
          AmOp(strategy=1, opSig==(boolean,boolean))
        ]
                        am_procs = [
          AmProc(num=1, (boolean, boolean), proc=hashchar("char")),
          AmProc(num=2, (boolean, boolean), proc=hashcharextended("char",bigint))
        ]
                    . references
                        access_method = hash
                box_inclusion_ops(brin): operator-family
                    . properties
                        am_ops = [
          AmOp(strategy=1, opSig=<<(box,box)),
          AmOp(strategy=2, opSig=&<(box,box)),
          AmOp(strategy=3, opSig=&&(box,box)),
          AmOp(strategy=4, opSig=&>(box,box)),
          AmOp(strategy=5, opSig=>>(box,box)),
          AmOp(strategy=6, opSig=~=(box,box)),
          AmOp(strategy=7, opSig=@>(box,box)),
          AmOp(strategy=8, opSig=<@(box,box)),
          AmOp(strategy=9, opSig=&<|(box,box)),
          AmOp(strategy=10, opSig=<<|(box,box)),
          AmOp(strategy=11, opSig=|>>(box,box)),
          AmOp(strategy=12, opSig=|&>(box,box)),
          AmOp(strategy=7, opSig=@>(box,point))
        ]
                        am_procs = [
          AmProc(num=1, (box, box), proc=brin_inclusion_opcinfo(internal)),
          AmProc(num=2, (box, box), proc=brin_inclusion_add_value(internal,internal,internal,internal)),
          AmProc(num=3, (box, box), proc=brin_inclusion_consistent(internal,internal,internal)),
          AmProc(num=4, (box, box), proc=brin_inclusion_union(internal,internal,internal)),
          AmProc(num=11, (box, box), proc=bound_box(box,box)),
          AmProc(num=13, (box, box), proc=box_contain(box,box))
        ]
                    . references
                        access_method = brin
                box_ops(gist): operator-family
                    . properties
                        am_ops = [
          AmOp(strategy=1, opSig=<<(box,box)),
          AmOp(strategy=2, opSig=&<(box,box)),
          AmOp(strategy=3, opSig=&&(box,box)),
          AmOp(strategy=4, opSig=&>(box,box)),
          AmOp(strategy=5, opSig=>>(box,box)),
          AmOp(strategy=6, opSig=~=(box,box)),
          AmOp(strategy=7, opSig=@>(box,box)),
          AmOp(strategy=8, opSig=<@(box,box)),
          AmOp(strategy=9, opSig=&<|(box,box)),
          AmOp(strategy=10, opSig=<<|(box,box)),
          AmOp(strategy=11, opSig=|>>(box,box)),
          AmOp(strategy=12, opSig=|&>(box,box)),
          AmOp(strategy=13, opSig=~(box,box)),
          AmOp(strategy=14, opSig=@(box,box))
        ]
                        am_procs = [
          AmProc(num=1, (box, box), proc=gist_box_consistent(internal,box,smallint,oid,internal)),
          AmProc(num=2, (box, box), proc=gist_box_union(internal,internal)),
          AmProc(num=5, (box, box), proc=gist_box_penalty(internal,internal,internal)),
          AmProc(num=6, (box, box), proc=gist_box_picksplit(internal,internal)),
          AmProc(num=7, (box, box), proc=gist_box_same(box,box,internal))
        ]
                    . references
                        access_method = gist
                box_ops(spgist): operator-family
                    . properties
                        am_ops = [
          AmOp(strategy=1, opSig=<<(box,box)),
          AmOp(strategy=2, opSig=&<(box,box)),
          AmOp(strategy=3, opSig=&&(box,box)),
          AmOp(strategy=4, opSig=&>(box,box)),
          AmOp(strategy=5, opSig=>>(box,box)),
          AmOp(strategy=6, opSig=~=(box,box)),
          AmOp(strategy=7, opSig=@>(box,box)),
          AmOp(strategy=8, opSig=<@(box,box)),
          AmOp(strategy=9, opSig=&<|(box,box)),
          AmOp(strategy=10, opSig=<<|(box,box)),
          AmOp(strategy=11, opSig=|>>(box,box)),
          AmOp(strategy=12, opSig=|&>(box,box))
        ]
                        am_procs = [
          AmProc(num=1, (box, box), proc=spg_box_quad_config(internal,internal)),
          AmProc(num=2, (box, box), proc=spg_box_quad_choose(internal,internal)),
          AmProc(num=3, (box, box), proc=spg_box_quad_picksplit(internal,internal)),
          AmProc(num=4, (box, box), proc=spg_box_quad_inner_consistent(internal,internal)),
          AmProc(num=5, (box, box), proc=spg_box_quad_leaf_consistent(internal,internal))
        ]
                    . references
                        access_method = spgist
                bpchar_minmax_ops(brin): operator-family
                    . properties
                        am_ops = [
          AmOp(strategy=1, opSig=<(character,character)),
          AmOp(strategy=2, opSig=<=(character,character)),
          AmOp(strategy=3, opSig==(character,character)),
          AmOp(strategy=4, opSig=>=(character,character)),
          AmOp(strategy=5, opSig=>(character,character))
        ]
                        am_procs = [
          AmProc(num=1, (character, character), proc=brin_minmax_opcinfo(internal)),
          AmProc(num=2, (character, character), proc=brin_minmax_add_value(internal,internal,internal,internal)),
          AmProc(num=3, (character, character), proc=brin_minmax_consistent(internal,internal,internal)),
          AmProc(num=4, (character, character), proc=brin_minmax_union(internal,internal,internal))
        ]
                    . references
                        access_method = brin
                bpchar_ops(btree): operator-family
                    . properties
                        am_ops = [
          AmOp(strategy=1, opSig=<(character,character)),
          AmOp(strategy=2, opSig=<=(character,character)),
          AmOp(strategy=3, opSig==(character,character)),
          AmOp(strategy=4, opSig=>=(character,character)),
          AmOp(strategy=5, opSig=>(character,character))
        ]
                        am_procs = [
          AmProc(num=1, (character, character), proc=bpcharcmp(character,character)),
          AmProc(num=2, (character, character), proc=bpchar_sortsupport(internal))
        ]
                    . references
                        access_method = btree
                bpchar_ops(hash): operator-family
                    . properties
                        am_ops = [
          AmOp(strategy=1, opSig==(character,character))
        ]
                        am_procs = [
          AmProc(num=1, (character, character), proc=hashbpchar(character)),
          AmProc(num=2, (character, character), proc=hashbpcharextended(character,bigint))
        ]
                    . references
                        access_method = hash
                bpchar_pattern_ops(btree): operator-family
                    . properties
                        am_ops = [
          AmOp(strategy=1, opSig=~<~(character,character)),
          AmOp(strategy=2, opSig=~<=~(character,character)),
          AmOp(strategy=3, opSig==(character,character)),
          AmOp(strategy=4, opSig=~>=~(character,character)),
          AmOp(strategy=5, opSig=~>~(character,character))
        ]
                        am_procs = [
          AmProc(num=1, (character, character), proc=btbpchar_pattern_cmp(character,character)),
          AmProc(num=2, (character, character), proc=btbpchar_pattern_sortsupport(internal))
        ]
                    . references
                        access_method = btree
                bpchar_pattern_ops(hash): operator-family
                    . properties
                        am_ops = [
          AmOp(strategy=1, opSig==(character,character))
        ]
                        am_procs = [
          AmProc(num=1, (character, character), proc=hashbpchar(character)),
          AmProc(num=2, (character, character), proc=hashbpcharextended(character,bigint))
        ]
                    . references
                        access_method = hash
                bytea_minmax_ops(brin): operator-family
                    . properties
                        am_ops = [
          AmOp(strategy=1, opSig=<(bytea,bytea)),
          AmOp(strategy=2, opSig=<=(bytea,bytea)),
          AmOp(strategy=3, opSig==(bytea,bytea)),
          AmOp(strategy=4, opSig=>=(bytea,bytea)),
          AmOp(strategy=5, opSig=>(bytea,bytea))
        ]
                        am_procs = [
          AmProc(num=1, (bytea, bytea), proc=brin_minmax_opcinfo(internal)),
          AmProc(num=2, (bytea, bytea), proc=brin_minmax_add_value(internal,internal,internal,internal)),
          AmProc(num=3, (bytea, bytea), proc=brin_minmax_consistent(internal,internal,internal)),
          AmProc(num=4, (bytea, bytea), proc=brin_minmax_union(internal,internal,internal))
        ]
                    . references
                        access_method = brin
                bytea_ops(btree): operator-family
                    . properties
                        am_ops = [
          AmOp(strategy=1, opSig=<(bytea,bytea)),
          AmOp(strategy=2, opSig=<=(bytea,bytea)),
          AmOp(strategy=3, opSig==(bytea,bytea)),
          AmOp(strategy=4, opSig=>=(bytea,bytea)),
          AmOp(strategy=5, opSig=>(bytea,bytea))
        ]
                        am_procs = [
          AmProc(num=1, (bytea, bytea), proc=byteacmp(bytea,bytea)),
          AmProc(num=2, (bytea, bytea), proc=bytea_sortsupport(internal))
        ]
                    . references
                        access_method = btree
                bytea_ops(hash): operator-family
                    . properties
                        am_ops = [
          AmOp(strategy=1, opSig==(bytea,bytea))
        ]
                        am_procs = [
          AmProc(num=1, (bytea, bytea), proc=hashvarlena(internal)),
          AmProc(num=2, (bytea, bytea), proc=hashvarlenaextended(internal,bigint))
        ]
                    . references
                        access_method = hash
                char_minmax_ops(brin): operator-family
                    . properties
                        am_ops = [
          AmOp(strategy=1, opSig=<("char","char")),
          AmOp(strategy=2, opSig=<=("char","char")),
          AmOp(strategy=3, opSig==("char","char")),
          AmOp(strategy=4, opSig=>=("char","char")),
          AmOp(strategy=5, opSig=>("char","char"))
        ]
                        am_procs = [
          AmProc(num=1, ("char", "char"), proc=brin_minmax_opcinfo(internal)),
          AmProc(num=2, ("char", "char"), proc=brin_minmax_add_value(internal,internal,internal,internal)),
          AmProc(num=3, ("char", "char"), proc=brin_minmax_consistent(internal,internal,internal)),
          AmProc(num=4, ("char", "char"), proc=brin_minmax_union(internal,internal,internal))
        ]
                    . references
                        access_method = brin
                char_ops(btree): operator-family
                    . properties
                        am_ops = [
          AmOp(strategy=1, opSig=<("char","char")),
          AmOp(strategy=2, opSig=<=("char","char")),
          AmOp(strategy=3, opSig==("char","char")),
          AmOp(strategy=4, opSig=>=("char","char")),
          AmOp(strategy=5, opSig=>("char","char"))
        ]
                        am_procs = [
          AmProc(num=1, ("char", "char"), proc=btcharcmp("char","char"))
        ]
                    . references
                        access_method = btree
                char_ops(hash): operator-family
                    . properties
                        am_ops = [
          AmOp(strategy=1, opSig==("char","char"))
        ]
                        am_procs = [
          AmProc(num=1, ("char", "char"), proc=hashchar("char")),
          AmProc(num=2, ("char", "char"), proc=hashcharextended("char",bigint))
        ]
                    . references
                        access_method = hash
                cid_ops(hash): operator-family
                    . properties
                        am_ops = [
          AmOp(strategy=1, opSig==(cid,cid))
        ]
                        am_procs = [
          AmProc(num=1, (cid, cid), proc=hashint4(integer)),
          AmProc(num=2, (cid, cid), proc=hashint4extended(integer,bigint))
        ]
                    . references
                        access_method = hash
                circle_ops(gist): operator-family
                    . properties
                        am_ops = [
          AmOp(strategy=1, opSig=<<(circle,circle)),
          AmOp(strategy=2, opSig=&<(circle,circle)),
          AmOp(strategy=3, opSig=&&(circle,circle)),
          AmOp(strategy=4, opSig=&>(circle,circle)),
          AmOp(strategy=5, opSig=>>(circle,circle)),
          AmOp(strategy=6, opSig=~=(circle,circle)),
          AmOp(strategy=7, opSig=@>(circle,circle)),
          AmOp(strategy=8, opSig=<@(circle,circle)),
          AmOp(strategy=9, opSig=&<|(circle,circle)),
          AmOp(strategy=10, opSig=<<|(circle,circle)),
          AmOp(strategy=11, opSig=|>>(circle,circle)),
          AmOp(strategy=12, opSig=|&>(circle,circle)),
          AmOp(strategy=13, opSig=~(circle,circle)),
          AmOp(strategy=14, opSig=@(circle,circle)),
          AmOp(strategy=15, opSig=<->(circle,point), sortFamily=float_ops)
        ]
                        am_procs = [
          AmProc(num=1, (circle, circle), proc=gist_circle_consistent(internal,circle,smallint,oid,internal)),
          AmProc(num=2, (circle, circle), proc=gist_box_union(internal,internal)),
          AmProc(num=3, (circle, circle), proc=gist_circle_compress(internal)),
          AmProc(num=5, (circle, circle), proc=gist_box_penalty(internal,internal,internal)),
          AmProc(num=6, (circle, circle), proc=gist_box_picksplit(internal,internal)),
          AmProc(num=7, (circle, circle), proc=gist_box_same(box,box,internal)),
          AmProc(num=8, (circle, circle), proc=gist_circle_distance(internal,circle,smallint,oid,internal))
        ]
                    . references
                        access_method = gist
                date_ops(hash): operator-family
                    . properties
                        am_ops = [
          AmOp(strategy=1, opSig==(date,date))
        ]
                        am_procs = [
          AmProc(num=1, (date, date), proc=hashint4(integer)),
          AmProc(num=2, (date, date), proc=hashint4extended(integer,bigint))
        ]
                    . references
                        access_method = hash
                datetime_minmax_ops(brin): operator-family
                    . properties
                        am_ops = [
          AmOp(strategy=1, opSig=<(timestamp without time zone,timestamp without time zone)),
          AmOp(strategy=2, opSig=<=(timestamp without time zone,timestamp without time zone)),
          AmOp(strategy=3, opSig==(timestamp without time zone,timestamp without time zone)),
          AmOp(strategy=4, opSig=>=(timestamp without time zone,timestamp without time zone)),
          AmOp(strategy=5, opSig=>(timestamp without time zone,timestamp without time zone)),
          AmOp(strategy=1, opSig=<(timestamp without time zone,date)),
          AmOp(strategy=2, opSig=<=(timestamp without time zone,date)),
          AmOp(strategy=3, opSig==(timestamp without time zone,date)),
          AmOp(strategy=4, opSig=>=(timestamp without time zone,date)),
          AmOp(strategy=5, opSig=>(timestamp without time zone,date)),
          AmOp(strategy=1, opSig=<(timestamp without time zone,timestamp with time zone)),
          AmOp(strategy=2, opSig=<=(timestamp without time zone,timestamp with time zone)),
          AmOp(strategy=3, opSig==(timestamp without time zone,timestamp with time zone)),
          AmOp(strategy=4, opSig=>=(timestamp without time zone,timestamp with time zone)),
          AmOp(strategy=5, opSig=>(timestamp without time zone,timestamp with time zone)),
          AmOp(strategy=1, opSig=<(date,date)),
          AmOp(strategy=2, opSig=<=(date,date)),
          AmOp(strategy=3, opSig==(date,date)),
          AmOp(strategy=4, opSig=>=(date,date)),
          AmOp(strategy=5, opSig=>(date,date)),
          AmOp(strategy=1, opSig=<(date,timestamp without time zone)),
          AmOp(strategy=2, opSig=<=(date,timestamp without time zone)),
          AmOp(strategy=3, opSig==(date,timestamp without time zone)),
          AmOp(strategy=4, opSig=>=(date,timestamp without time zone)),
          AmOp(strategy=5, opSig=>(date,timestamp without time zone)),
          AmOp(strategy=1, opSig=<(date,timestamp with time zone)),
          AmOp(strategy=2, opSig=<=(date,timestamp with time zone)),
          AmOp(strategy=3, opSig==(date,timestamp with time zone)),
          AmOp(strategy=4, opSig=>=(date,timestamp with time zone)),
          AmOp(strategy=5, opSig=>(date,timestamp with time zone)),
          AmOp(strategy=1, opSig=<(timestamp with time zone,date)),
          AmOp(strategy=2, opSig=<=(timestamp with time zone,date)),
          AmOp(strategy=3, opSig==(timestamp with time zone,date)),
          AmOp(strategy=4, opSig=>=(timestamp with time zone,date)),
          AmOp(strategy=5, opSig=>(timestamp with time zone,date)),
          AmOp(strategy=1, opSig=<(timestamp with time zone,timestamp without time zone)),
          AmOp(strategy=2, opSig=<=(timestamp with time zone,timestamp without time zone)),
          AmOp(strategy=3, opSig==(timestamp with time zone,timestamp without time zone)),
          AmOp(strategy=4, opSig=>=(timestamp with time zone,timestamp without time zone)),
          AmOp(strategy=5, opSig=>(timestamp with time zone,timestamp without time zone)),
          AmOp(strategy=1, opSig=<(timestamp with time zone,timestamp with time zone)),
          AmOp(strategy=2, opSig=<=(timestamp with time zone,timestamp with time zone)),
          AmOp(strategy=3, opSig==(timestamp with time zone,timestamp with time zone)),
          AmOp(strategy=4, opSig=>=(timestamp with time zone,timestamp with time zone)),
          AmOp(strategy=5, opSig=>(timestamp with time zone,timestamp with time zone))
        ]
                        am_procs = [
          AmProc(num=1, (timestamp without time zone, timestamp without time zone), proc=brin_minmax_opcinfo(internal)),
          AmProc(num=2, (timestamp without time zone, timestamp without time zone), proc=brin_minmax_add_value(internal,internal,internal,internal)),
          AmProc(num=3, (timestamp without time zone, timestamp without time zone), proc=brin_minmax_consistent(internal,internal,internal)),
          AmProc(num=4, (timestamp without time zone, timestamp without time zone), proc=brin_minmax_union(internal,internal,internal)),
          AmProc(num=1, (timestamp without time zone, timestamp with time zone), proc=brin_minmax_opcinfo(internal)),
          AmProc(num=2, (timestamp without time zone, timestamp with time zone), proc=brin_minmax_add_value(internal,internal,internal,internal)),
          AmProc(num=3, (timestamp without time zone, timestamp with time zone), proc=brin_minmax_consistent(internal,internal,internal)),
          AmProc(num=4, (timestamp without time zone, timestamp with time zone), proc=brin_minmax_union(internal,internal,internal)),
          AmProc(num=1, (timestamp without time zone, date), proc=brin_minmax_opcinfo(internal)),
          AmProc(num=2, (timestamp without time zone, date), proc=brin_minmax_add_value(internal,internal,internal,internal)),
          AmProc(num=3, (timestamp without time zone, date), proc=brin_minmax_consistent(internal,internal,internal)),
          AmProc(num=4, (timestamp without time zone, date), proc=brin_minmax_union(internal,internal,internal)),
          AmProc(num=1, (timestamp with time zone, timestamp with time zone), proc=brin_minmax_opcinfo(internal)),
          AmProc(num=2, (timestamp with time zone, timestamp with time zone), proc=brin_minmax_add_value(internal,internal,internal,internal)),
          AmProc(num=3, (timestamp with time zone, timestamp with time zone), proc=brin_minmax_consistent(internal,internal,internal)),
          AmProc(num=4, (timestamp with time zone, timestamp with time zone), proc=brin_minmax_union(internal,internal,internal)),
          AmProc(num=1, (timestamp with time zone, timestamp without time zone), proc=brin_minmax_opcinfo(internal)),
          AmProc(num=2, (timestamp with time zone, timestamp without time zone), proc=brin_minmax_add_value(internal,internal,internal,internal)),
          AmProc(num=3, (timestamp with time zone, timestamp without time zone), proc=brin_minmax_consistent(internal,internal,internal)),
          AmProc(num=4, (timestamp with time zone, timestamp without time zone), proc=brin_minmax_union(internal,internal,internal)),
          AmProc(num=1, (timestamp with time zone, date), proc=brin_minmax_opcinfo(internal)),
          AmProc(num=2, (timestamp with time zone, date), proc=brin_minmax_add_value(internal,internal,internal,internal)),
          AmProc(num=3, (timestamp with time zone, date), proc=brin_minmax_consistent(internal,internal,internal)),
          AmProc(num=4, (timestamp with time zone, date), proc=brin_minmax_union(internal,internal,internal)),
          AmProc(num=1, (date, date), proc=brin_minmax_opcinfo(internal)),
          AmProc(num=2, (date, date), proc=brin_minmax_add_value(internal,internal,internal,internal)),
          AmProc(num=3, (date, date), proc=brin_minmax_consistent(internal,internal,internal)),
          AmProc(num=4, (date, date), proc=brin_minmax_union(internal,internal,internal)),
          AmProc(num=1, (date, timestamp without time zone), proc=brin_minmax_opcinfo(internal)),
          AmProc(num=2, (date, timestamp without time zone), proc=brin_minmax_add_value(internal,internal,internal,internal)),
          AmProc(num=3, (date, timestamp without time zone), proc=brin_minmax_consistent(internal,internal,internal)),
          AmProc(num=4, (date, timestamp without time zone), proc=brin_minmax_union(internal,internal,internal)),
          AmProc(num=1, (date, timestamp with time zone), proc=brin_minmax_opcinfo(internal)),
          AmProc(num=2, (date, timestamp with time zone), proc=brin_minmax_add_value(internal,internal,internal,internal)),
          AmProc(num=3, (date, timestamp with time zone), proc=brin_minmax_consistent(internal,internal,internal)),
          AmProc(num=4, (date, timestamp with time zone), proc=brin_minmax_union(internal,internal,internal))
        ]
                    . references
                        access_method = brin
                datetime_ops(btree): operator-family
                    . properties
                        am_ops = [
          AmOp(strategy=1, opSig=<(date,date)),
          AmOp(strategy=2, opSig=<=(date,date)),
          AmOp(strategy=3, opSig==(date,date)),
          AmOp(strategy=4, opSig=>=(date,date)),
          AmOp(strategy=5, opSig=>(date,date)),
          AmOp(strategy=1, opSig=<(date,timestamp without time zone)),
          AmOp(strategy=2, opSig=<=(date,timestamp without time zone)),
          AmOp(strategy=3, opSig==(date,timestamp without time zone)),
          AmOp(strategy=4, opSig=>=(date,timestamp without time zone)),
          AmOp(strategy=5, opSig=>(date,timestamp without time zone)),
          AmOp(strategy=1, opSig=<(date,timestamp with time zone)),
          AmOp(strategy=2, opSig=<=(date,timestamp with time zone)),
          AmOp(strategy=3, opSig==(date,timestamp with time zone)),
          AmOp(strategy=4, opSig=>=(date,timestamp with time zone)),
          AmOp(strategy=5, opSig=>(date,timestamp with time zone)),
          AmOp(strategy=1, opSig=<(timestamp without time zone,timestamp without time zone)),
          AmOp(strategy=2, opSig=<=(timestamp without time zone,timestamp without time zone)),
          AmOp(strategy=3, opSig==(timestamp without time zone,timestamp without time zone)),
          AmOp(strategy=4, opSig=>=(timestamp without time zone,timestamp without time zone)),
          AmOp(strategy=5, opSig=>(timestamp without time zone,timestamp without time zone)),
          AmOp(strategy=1, opSig=<(timestamp without time zone,date)),
          AmOp(strategy=2, opSig=<=(timestamp without time zone,date)),
          AmOp(strategy=3, opSig==(timestamp without time zone,date)),
          AmOp(strategy=4, opSig=>=(timestamp without time zone,date)),
          AmOp(strategy=5, opSig=>(timestamp without time zone,date)),
          AmOp(strategy=1, opSig=<(timestamp without time zone,timestamp with time zone)),
          AmOp(strategy=2, opSig=<=(timestamp without time zone,timestamp with time zone)),
          AmOp(strategy=3, opSig==(timestamp without time zone,timestamp with time zone)),
          AmOp(strategy=4, opSig=>=(timestamp without time zone,timestamp with time zone)),
          AmOp(strategy=5, opSig=>(timestamp without time zone,timestamp with time zone)),
          AmOp(strategy=1, opSig=<(timestamp with time zone,timestamp with time zone)),
          AmOp(strategy=2, opSig=<=(timestamp with time zone,timestamp with time zone)),
          AmOp(strategy=3, opSig==(timestamp with time zone,timestamp with time zone)),
          AmOp(strategy=4, opSig=>=(timestamp with time zone,timestamp with time zone)),
          AmOp(strategy=5, opSig=>(timestamp with time zone,timestamp with time zone)),
          AmOp(strategy=1, opSig=<(timestamp with time zone,date)),
          AmOp(strategy=2, opSig=<=(timestamp with time zone,date)),
          AmOp(strategy=3, opSig==(timestamp with time zone,date)),
          AmOp(strategy=4, opSig=>=(timestamp with time zone,date)),
          AmOp(strategy=5, opSig=>(timestamp with time zone,date)),
          AmOp(strategy=1, opSig=<(timestamp with time zone,timestamp without time zone)),
          AmOp(strategy=2, opSig=<=(timestamp with time zone,timestamp without time zone)),
          AmOp(strategy=3, opSig==(timestamp with time zone,timestamp without time zone)),
          AmOp(strategy=4, opSig=>=(timestamp with time zone,timestamp without time zone)),
          AmOp(strategy=5, opSig=>(timestamp with time zone,timestamp without time zone))
        ]
                        am_procs = [
          AmProc(num=1, (date, date), proc=date_cmp(date,date)),
          AmProc(num=2, (date, date), proc=date_sortsupport(internal)),
          AmProc(num=1, (date, timestamp without time zone), proc=date_cmp_timestamp(date,timestamp without time zone)),
          AmProc(num=1, (date, timestamp with time zone), proc=date_cmp_timestamptz(date,timestamp with time zone)),
          AmProc(num=1, (timestamp without time zone, timestamp without time zone), proc=timestamp_cmp(timestamp without time zone,timestamp without time zone)),
          AmProc(num=2, (timestamp without time zone, timestamp without time zone), proc=timestamp_sortsupport(internal)),
          AmProc(num=1, (timestamp without time zone, date), proc=timestamp_cmp_date(timestamp without time zone,date)),
          AmProc(num=1, (timestamp without time zone, timestamp with time zone), proc=timestamp_cmp_timestamptz(timestamp without time zone,timestamp with time zone)),
          AmProc(num=1, (timestamp with time zone, timestamp with time zone), proc=timestamptz_cmp(timestamp with time zone,timestamp with time zone)),
          AmProc(num=2, (timestamp with time zone, timestamp with time zone), proc=timestamp_sortsupport(internal)),
          AmProc(num=1, (timestamp with time zone, date), proc=timestamptz_cmp_date(timestamp with time zone,date)),
          AmProc(num=1, (timestamp with time zone, timestamp without time zone), proc=timestamptz_cmp_timestamp(timestamp with time zone,timestamp without time zone)),
          AmProc(num=3, (date, interval), proc=in_range(date,date,interval,boolean,boolean)),
          AmProc(num=3, (timestamp without time zone, interval), proc=in_range(timestamp without time zone,timestamp without time zone,interval,boolean,boolean)),
          AmProc(num=3, (timestamp with time zone, interval), proc=in_range(timestamp with time zone,timestamp with time zone,interval,boolean,boolean))
        ]
                    . references
                        access_method = btree
                enum_ops(btree): operator-family
                    . properties
                        am_ops = [
          AmOp(strategy=1, opSig=<(anyenum,anyenum)),
          AmOp(strategy=2, opSig=<=(anyenum,anyenum)),
          AmOp(strategy=3, opSig==(anyenum,anyenum)),
          AmOp(strategy=4, opSig=>=(anyenum,anyenum)),
          AmOp(strategy=5, opSig=>(anyenum,anyenum))
        ]
                        am_procs = [
          AmProc(num=1, (anyenum, anyenum), proc=enum_cmp(anyenum,anyenum))
        ]
                    . references
                        access_method = btree
                enum_ops(hash): operator-family
                    . properties
                        am_ops = [
          AmOp(strategy=1, opSig==(anyenum,anyenum))
        ]
                        am_procs = [
          AmProc(num=1, (anyenum, anyenum), proc=hashenum(anyenum)),
          AmProc(num=2, (anyenum, anyenum), proc=hashenumextended(anyenum,bigint))
        ]
                    . references
                        access_method = hash
                float_minmax_ops(brin): operator-family
                    . properties
                        am_ops = [
          AmOp(strategy=1, opSig=<(real,real)),
          AmOp(strategy=2, opSig=<=(real,real)),
          AmOp(strategy=3, opSig==(real,real)),
          AmOp(strategy=4, opSig=>=(real,real)),
          AmOp(strategy=5, opSig=>(real,real)),
          AmOp(strategy=1, opSig=<(real,double precision)),
          AmOp(strategy=2, opSig=<=(real,double precision)),
          AmOp(strategy=3, opSig==(real,double precision)),
          AmOp(strategy=4, opSig=>=(real,double precision)),
          AmOp(strategy=5, opSig=>(real,double precision)),
          AmOp(strategy=1, opSig=<(double precision,real)),
          AmOp(strategy=2, opSig=<=(double precision,real)),
          AmOp(strategy=3, opSig==(double precision,real)),
          AmOp(strategy=4, opSig=>=(double precision,real)),
          AmOp(strategy=5, opSig=>(double precision,real)),
          AmOp(strategy=1, opSig=<(double precision,double precision)),
          AmOp(strategy=2, opSig=<=(double precision,double precision)),
          AmOp(strategy=3, opSig==(double precision,double precision)),
          AmOp(strategy=4, opSig=>=(double precision,double precision)),
          AmOp(strategy=5, opSig=>(double precision,double precision))
        ]
                        am_procs = [
          AmProc(num=1, (real, real), proc=brin_minmax_opcinfo(internal)),
          AmProc(num=2, (real, real), proc=brin_minmax_add_value(internal,internal,internal,internal)),
          AmProc(num=3, (real, real), proc=brin_minmax_consistent(internal,internal,internal)),
          AmProc(num=4, (real, real), proc=brin_minmax_union(internal,internal,internal)),
          AmProc(num=1, (real, double precision), proc=brin_minmax_opcinfo(internal)),
          AmProc(num=2, (real, double precision), proc=brin_minmax_add_value(internal,internal,internal,internal)),
          AmProc(num=3, (real, double precision), proc=brin_minmax_consistent(internal,internal,internal)),
          AmProc(num=4, (real, double precision), proc=brin_minmax_union(internal,internal,internal)),
          AmProc(num=1, (double precision, double precision), proc=brin_minmax_opcinfo(internal)),
          AmProc(num=2, (double precision, double precision), proc=brin_minmax_add_value(internal,internal,internal,internal)),
          AmProc(num=3, (double precision, double precision), proc=brin_minmax_consistent(internal,internal,internal)),
          AmProc(num=4, (double precision, double precision), proc=brin_minmax_union(internal,internal,internal)),
          AmProc(num=1, (double precision, real), proc=brin_minmax_opcinfo(internal)),
          AmProc(num=2, (double precision, real), proc=brin_minmax_add_value(internal,internal,internal,internal)),
          AmProc(num=3, (double precision, real), proc=brin_minmax_consistent(internal,internal,internal)),
          AmProc(num=4, (double precision, real), proc=brin_minmax_union(internal,internal,internal))
        ]
                    . references
                        access_method = brin
                float_ops(btree): operator-family
                    . properties
                        am_ops = [
          AmOp(strategy=1, opSig=<(real,real)),
          AmOp(strategy=2, opSig=<=(real,real)),
          AmOp(strategy=3, opSig==(real,real)),
          AmOp(strategy=4, opSig=>=(real,real)),
          AmOp(strategy=5, opSig=>(real,real)),
          AmOp(strategy=1, opSig=<(real,double precision)),
          AmOp(strategy=2, opSig=<=(real,double precision)),
          AmOp(strategy=3, opSig==(real,double precision)),
          AmOp(strategy=4, opSig=>=(real,double precision)),
          AmOp(strategy=5, opSig=>(real,double precision)),
          AmOp(strategy=1, opSig=<(double precision,double precision)),
          AmOp(strategy=2, opSig=<=(double precision,double precision)),
          AmOp(strategy=3, opSig==(double precision,double precision)),
          AmOp(strategy=4, opSig=>=(double precision,double precision)),
          AmOp(strategy=5, opSig=>(double precision,double precision)),
          AmOp(strategy=1, opSig=<(double precision,real)),
          AmOp(strategy=2, opSig=<=(double precision,real)),
          AmOp(strategy=3, opSig==(double precision,real)),
          AmOp(strategy=4, opSig=>=(double precision,real)),
          AmOp(strategy=5, opSig=>(double precision,real))
        ]
                        am_procs = [
          AmProc(num=1, (real, real), proc=btfloat4cmp(real,real)),
          AmProc(num=2, (real, real), proc=btfloat4sortsupport(internal)),
          AmProc(num=1, (real, double precision), proc=btfloat48cmp(real,double precision)),
          AmProc(num=1, (double precision, double precision), proc=btfloat8cmp(double precision,double precision)),
          AmProc(num=2, (double precision, double precision), proc=btfloat8sortsupport(internal)),
          AmProc(num=1, (double precision, real), proc=btfloat84cmp(double precision,real)),
          AmProc(num=3, (double precision, double precision), proc=in_range(double precision,double precision,double precision,boolean,boolean)),
          AmProc(num=3, (real, double precision), proc=in_range(real,real,double precision,boolean,boolean))
        ]
                    . references
                        access_method = btree
                float_ops(hash): operator-family
                    . properties
                        am_ops = [
          AmOp(strategy=1, opSig==(real,real)),
          AmOp(strategy=1, opSig==(double precision,double precision)),
          AmOp(strategy=1, opSig==(real,double precision)),
          AmOp(strategy=1, opSig==(double precision,real))
        ]
                        am_procs = [
          AmProc(num=1, (real, real), proc=hashfloat4(real)),
          AmProc(num=2, (real, real), proc=hashfloat4extended(real,bigint)),
          AmProc(num=1, (double precision, double precision), proc=hashfloat8(double precision)),
          AmProc(num=2, (double precision, double precision), proc=hashfloat8extended(double precision,bigint))
        ]
                    . references
                        access_method = hash
                integer_minmax_ops(brin): operator-family
                    . properties
                        am_ops = [
          AmOp(strategy=1, opSig=<(bigint,bigint)),
          AmOp(strategy=2, opSig=<=(bigint,bigint)),
          AmOp(strategy=3, opSig==(bigint,bigint)),
          AmOp(strategy=4, opSig=>=(bigint,bigint)),
          AmOp(strategy=5, opSig=>(bigint,bigint)),
          AmOp(strategy=1, opSig=<(bigint,smallint)),
          AmOp(strategy=2, opSig=<=(bigint,smallint)),
          AmOp(strategy=3, opSig==(bigint,smallint)),
          AmOp(strategy=4, opSig=>=(bigint,smallint)),
          AmOp(strategy=5, opSig=>(bigint,smallint)),
          AmOp(strategy=1, opSig=<(bigint,integer)),
          AmOp(strategy=2, opSig=<=(bigint,integer)),
          AmOp(strategy=3, opSig==(bigint,integer)),
          AmOp(strategy=4, opSig=>=(bigint,integer)),
          AmOp(strategy=5, opSig=>(bigint,integer)),
          AmOp(strategy=1, opSig=<(smallint,smallint)),
          AmOp(strategy=2, opSig=<=(smallint,smallint)),
          AmOp(strategy=3, opSig==(smallint,smallint)),
          AmOp(strategy=4, opSig=>=(smallint,smallint)),
          AmOp(strategy=5, opSig=>(smallint,smallint)),
          AmOp(strategy=1, opSig=<(smallint,bigint)),
          AmOp(strategy=2, opSig=<=(smallint,bigint)),
          AmOp(strategy=3, opSig==(smallint,bigint)),
          AmOp(strategy=4, opSig=>=(smallint,bigint)),
          AmOp(strategy=5, opSig=>(smallint,bigint)),
          AmOp(strategy=1, opSig=<(smallint,integer)),
          AmOp(strategy=2, opSig=<=(smallint,integer)),
          AmOp(strategy=3, opSig==(smallint,integer)),
          AmOp(strategy=4, opSig=>=(smallint,integer)),
          AmOp(strategy=5, opSig=>(smallint,integer)),
          AmOp(strategy=1, opSig=<(integer,integer)),
          AmOp(strategy=2, opSig=<=(integer,integer)),
          AmOp(strategy=3, opSig==(integer,integer)),
          AmOp(strategy=4, opSig=>=(integer,integer)),
          AmOp(strategy=5, opSig=>(integer,integer)),
          AmOp(strategy=1, opSig=<(integer,smallint)),
          AmOp(strategy=2, opSig=<=(integer,smallint)),
          AmOp(strategy=3, opSig==(integer,smallint)),
          AmOp(strategy=4, opSig=>=(integer,smallint)),
          AmOp(strategy=5, opSig=>(integer,smallint)),
          AmOp(strategy=1, opSig=<(integer,bigint)),
          AmOp(strategy=2, opSig=<=(integer,bigint)),
          AmOp(strategy=3, opSig==(integer,bigint)),
          AmOp(strategy=4, opSig=>=(integer,bigint)),
          AmOp(strategy=5, opSig=>(integer,bigint))
        ]
                        am_procs = [
          AmProc(num=1, (bigint, bigint), proc=brin_minmax_opcinfo(internal)),
          AmProc(num=2, (bigint, bigint), proc=brin_minmax_add_value(internal,internal,internal,internal)),
          AmProc(num=3, (bigint, bigint), proc=brin_minmax_consistent(internal,internal,internal)),
          AmProc(num=4, (bigint, bigint), proc=brin_minmax_union(internal,internal,internal)),
          AmProc(num=1, (bigint, smallint), proc=brin_minmax_opcinfo(internal)),
          AmProc(num=2, (bigint, smallint), proc=brin_minmax_add_value(internal,internal,internal,internal)),
          AmProc(num=3, (bigint, smallint), proc=brin_minmax_consistent(internal,internal,internal)),
          AmProc(num=4, (bigint, smallint), proc=brin_minmax_union(internal,internal,internal)),
          AmProc(num=1, (bigint, integer), proc=brin_minmax_opcinfo(internal)),
          AmProc(num=2, (bigint, integer), proc=brin_minmax_add_value(internal,internal,internal,internal)),
          AmProc(num=3, (bigint, integer), proc=brin_minmax_consistent(internal,internal,internal)),
          AmProc(num=4, (bigint, integer), proc=brin_minmax_union(internal,internal,internal)),
          AmProc(num=1, (smallint, smallint), proc=brin_minmax_opcinfo(internal)),
          AmProc(num=2, (smallint, smallint), proc=brin_minmax_add_value(internal,internal,internal,internal)),
          AmProc(num=3, (smallint, smallint), proc=brin_minmax_consistent(internal,internal,internal)),
          AmProc(num=4, (smallint, smallint), proc=brin_minmax_union(internal,internal,internal)),
          AmProc(num=1, (smallint, bigint), proc=brin_minmax_opcinfo(internal)),
          AmProc(num=2, (smallint, bigint), proc=brin_minmax_add_value(internal,internal,internal,internal)),
          AmProc(num=3, (smallint, bigint), proc=brin_minmax_consistent(internal,internal,internal)),
          AmProc(num=4, (smallint, bigint), proc=brin_minmax_union(internal,internal,internal)),
          AmProc(num=1, (smallint, integer), proc=brin_minmax_opcinfo(internal)),
          AmProc(num=2, (smallint, integer), proc=brin_minmax_add_value(internal,internal,internal,internal)),
          AmProc(num=3, (smallint, integer), proc=brin_minmax_consistent(internal,internal,internal)),
          AmProc(num=4, (smallint, integer), proc=brin_minmax_union(internal,internal,internal)),
          AmProc(num=1, (integer, integer), proc=brin_minmax_opcinfo(internal)),
          AmProc(num=2, (integer, integer), proc=brin_minmax_add_value(internal,internal,internal,internal)),
          AmProc(num=3, (integer, integer), proc=brin_minmax_consistent(internal,internal,internal)),
          AmProc(num=4, (integer, integer), proc=brin_minmax_union(internal,internal,internal)),
          AmProc(num=1, (integer, bigint), proc=brin_minmax_opcinfo(internal)),
          AmProc(num=2, (integer, bigint), proc=brin_minmax_add_value(internal,internal,internal,internal)),
          AmProc(num=3, (integer, bigint), proc=brin_minmax_consistent(internal,internal,internal)),
          AmProc(num=4, (integer, bigint), proc=brin_minmax_union(internal,internal,internal)),
          AmProc(num=1, (integer, smallint), proc=brin_minmax_opcinfo(internal)),
          AmProc(num=2, (integer, smallint), proc=brin_minmax_add_value(internal,internal,internal,internal)),
          AmProc(num=3, (integer, smallint), proc=brin_minmax_consistent(internal,internal,internal)),
          AmProc(num=4, (integer, smallint), proc=brin_minmax_union(internal,internal,internal))
        ]
                    . references
                        access_method = brin
                integer_ops(btree): operator-family
                    . properties
                        am_ops = [
          AmOp(strategy=1, opSig=<(smallint,smallint)),
          AmOp(strategy=2, opSig=<=(smallint,smallint)),
          AmOp(strategy=3, opSig==(smallint,smallint)),
          AmOp(strategy=4, opSig=>=(smallint,smallint)),
          AmOp(strategy=5, opSig=>(smallint,smallint)),
          AmOp(strategy=1, opSig=<(smallint,integer)),
          AmOp(strategy=2, opSig=<=(smallint,integer)),
          AmOp(strategy=3, opSig==(smallint,integer)),
          AmOp(strategy=4, opSig=>=(smallint,integer)),
          AmOp(strategy=5, opSig=>(smallint,integer)),
          AmOp(strategy=1, opSig=<(smallint,bigint)),
          AmOp(strategy=2, opSig=<=(smallint,bigint)),
          AmOp(strategy=3, opSig==(smallint,bigint)),
          AmOp(strategy=4, opSig=>=(smallint,bigint)),
          AmOp(strategy=5, opSig=>(smallint,bigint)),
          AmOp(strategy=1, opSig=<(integer,integer)),
          AmOp(strategy=2, opSig=<=(integer,integer)),
          AmOp(strategy=3, opSig==(integer,integer)),
          AmOp(strategy=4, opSig=>=(integer,integer)),
          AmOp(strategy=5, opSig=>(integer,integer)),
          AmOp(strategy=1, opSig=<(integer,smallint)),
          AmOp(strategy=2, opSig=<=(integer,smallint)),
          AmOp(strategy=3, opSig==(integer,smallint)),
          AmOp(strategy=4, opSig=>=(integer,smallint)),
          AmOp(strategy=5, opSig=>(integer,smallint)),
          AmOp(strategy=1, opSig=<(integer,bigint)),
          AmOp(strategy=2, opSig=<=(integer,bigint)),
          AmOp(strategy=3, opSig==(integer,bigint)),
          AmOp(strategy=4, opSig=>=(integer,bigint)),
          AmOp(strategy=5, opSig=>(integer,bigint)),
          AmOp(strategy=1, opSig=<(bigint,bigint)),
          AmOp(strategy=2, opSig=<=(bigint,bigint)),
          AmOp(strategy=3, opSig==(bigint,bigint)),
          AmOp(strategy=4, opSig=>=(bigint,bigint)),
          AmOp(strategy=5, opSig=>(bigint,bigint)),
          AmOp(strategy=1, opSig=<(bigint,smallint)),
          AmOp(strategy=2, opSig=<=(bigint,smallint)),
          AmOp(strategy=3, opSig==(bigint,smallint)),
          AmOp(strategy=4, opSig=>=(bigint,smallint)),
          AmOp(strategy=5, opSig=>(bigint,smallint)),
          AmOp(strategy=1, opSig=<(bigint,integer)),
          AmOp(strategy=2, opSig=<=(bigint,integer)),
          AmOp(strategy=3, opSig==(bigint,integer)),
          AmOp(strategy=4, opSig=>=(bigint,integer)),
          AmOp(strategy=5, opSig=>(bigint,integer))
        ]
                        am_procs = [
          AmProc(num=1, (smallint, smallint), proc=btint2cmp(smallint,smallint)),
          AmProc(num=2, (smallint, smallint), proc=btint2sortsupport(internal)),
          AmProc(num=1, (smallint, integer), proc=btint24cmp(smallint,integer)),
          AmProc(num=1, (smallint, bigint), proc=btint28cmp(smallint,bigint)),
          AmProc(num=3, (smallint, bigint), proc=in_range(smallint,smallint,bigint,boolean,boolean)),
          AmProc(num=3, (smallint, integer), proc=in_range(smallint,smallint,integer,boolean,boolean)),
          AmProc(num=3, (smallint, smallint), proc=in_range(smallint,smallint,smallint,boolean,boolean)),
          AmProc(num=1, (integer, integer), proc=btint4cmp(integer,integer)),
          AmProc(num=2, (integer, integer), proc=btint4sortsupport(internal)),
          AmProc(num=1, (integer, bigint), proc=btint48cmp(integer,bigint)),
          AmProc(num=1, (integer, smallint), proc=btint42cmp(integer,smallint)),
          AmProc(num=3, (integer, bigint), proc=in_range(integer,integer,bigint,boolean,boolean)),
          AmProc(num=3, (integer, integer), proc=in_range(integer,integer,integer,boolean,boolean)),
          AmProc(num=3, (integer, smallint), proc=in_range(integer,integer,smallint,boolean,boolean)),
          AmProc(num=1, (bigint, bigint), proc=btint8cmp(bigint,bigint)),
          AmProc(num=2, (bigint, bigint), proc=btint8sortsupport(internal)),
          AmProc(num=1, (bigint, integer), proc=btint84cmp(bigint,integer)),
          AmProc(num=1, (bigint, smallint), proc=btint82cmp(bigint,smallint)),
          AmProc(num=3, (bigint, bigint), proc=in_range(bigint,bigint,bigint,boolean,boolean))
        ]
                    . references
                        access_method = btree
                integer_ops(hash): operator-family
                    . properties
                        am_ops = [
          AmOp(strategy=1, opSig==(smallint,smallint)),
          AmOp(strategy=1, opSig==(integer,integer)),
          AmOp(strategy=1, opSig==(bigint,bigint)),
          AmOp(strategy=1, opSig==(smallint,integer)),
          AmOp(strategy=1, opSig==(smallint,bigint)),
          AmOp(strategy=1, opSig==(integer,smallint)),
          AmOp(strategy=1, opSig==(integer,bigint)),
          AmOp(strategy=1, opSig==(bigint,smallint)),
          AmOp(strategy=1, opSig==(bigint,integer))
        ]
                        am_procs = [
          AmProc(num=1, (smallint, smallint), proc=hashint2(smallint)),
          AmProc(num=2, (smallint, smallint), proc=hashint2extended(smallint,bigint)),
          AmProc(num=1, (integer, integer), proc=hashint4(integer)),
          AmProc(num=2, (integer, integer), proc=hashint4extended(integer,bigint)),
          AmProc(num=1, (bigint, bigint), proc=hashint8(bigint)),
          AmProc(num=2, (bigint, bigint), proc=hashint8extended(bigint,bigint))
        ]
                    . references
                        access_method = hash
                interval_minmax_ops(brin): operator-family
                    . properties
                        am_ops = [
          AmOp(strategy=1, opSig=<(interval,interval)),
          AmOp(strategy=2, opSig=<=(interval,interval)),
          AmOp(strategy=3, opSig==(interval,interval)),
          AmOp(strategy=4, opSig=>=(interval,interval)),
          AmOp(strategy=5, opSig=>(interval,interval))
        ]
                        am_procs = [
          AmProc(num=1, (interval, interval), proc=brin_minmax_opcinfo(internal)),
          AmProc(num=2, (interval, interval), proc=brin_minmax_add_value(internal,internal,internal,internal)),
          AmProc(num=3, (interval, interval), proc=brin_minmax_consistent(internal,internal,internal)),
          AmProc(num=4, (interval, interval), proc=brin_minmax_union(internal,internal,internal))
        ]
                    . references
                        access_method = brin
                interval_ops(btree): operator-family
                    . properties
                        am_ops = [
          AmOp(strategy=1, opSig=<(interval,interval)),
          AmOp(strategy=2, opSig=<=(interval,interval)),
          AmOp(strategy=3, opSig==(interval,interval)),
          AmOp(strategy=4, opSig=>=(interval,interval)),
          AmOp(strategy=5, opSig=>(interval,interval))
        ]
                        am_procs = [
          AmProc(num=1, (interval, interval), proc=interval_cmp(interval,interval)),
          AmProc(num=3, (interval, interval), proc=in_range(interval,interval,interval,boolean,boolean))
        ]
                    . references
                        access_method = btree
                interval_ops(hash): operator-family
                    . properties
                        am_ops = [
          AmOp(strategy=1, opSig==(interval,interval))
        ]
                        am_procs = [
          AmProc(num=1, (interval, interval), proc=interval_hash(interval)),
          AmProc(num=2, (interval, interval), proc=interval_hash_extended(interval,bigint))
        ]
                    . references
                        access_method = hash
                jsonb_ops(btree): operator-family
                    . properties
                        am_ops = [
          AmOp(strategy=1, opSig=<(jsonb,jsonb)),
          AmOp(strategy=2, opSig=<=(jsonb,jsonb)),
          AmOp(strategy=3, opSig==(jsonb,jsonb)),
          AmOp(strategy=4, opSig=>=(jsonb,jsonb)),
          AmOp(strategy=5, opSig=>(jsonb,jsonb))
        ]
                        am_procs = [
          AmProc(num=1, (jsonb, jsonb), proc=jsonb_cmp(jsonb,jsonb))
        ]
                    . references
                        access_method = btree
                jsonb_ops(hash): operator-family
                    . properties
                        am_ops = [
          AmOp(strategy=1, opSig==(jsonb,jsonb))
        ]
                        am_procs = [
          AmProc(num=1, (jsonb, jsonb), proc=jsonb_hash(jsonb)),
          AmProc(num=2, (jsonb, jsonb), proc=jsonb_hash_extended(jsonb,bigint))
        ]
                    . references
                        access_method = hash
                jsonb_ops(gin): operator-family
                    . properties
                        am_ops = [
          AmOp(strategy=7, opSig=@>(jsonb,jsonb)),
          AmOp(strategy=9, opSig=?(jsonb,text)),
          AmOp(strategy=10, opSig=?|(jsonb,text[])),
          AmOp(strategy=11, opSig=?&(jsonb,text[])),
          AmOp(strategy=15, opSig=@?(jsonb,jsonpath)),
          AmOp(strategy=16, opSig=@@(jsonb,jsonpath))
        ]
                        am_procs = [
          AmProc(num=1, (jsonb, jsonb), proc=gin_compare_jsonb(text,text)),
          AmProc(num=2, (jsonb, jsonb), proc=gin_extract_jsonb(jsonb,internal,internal)),
          AmProc(num=3, (jsonb, jsonb), proc=gin_extract_jsonb_query(jsonb,internal,smallint,internal,internal,internal,internal)),
          AmProc(num=4, (jsonb, jsonb), proc=gin_consistent_jsonb(internal,smallint,jsonb,integer,internal,internal,internal,internal)),
          AmProc(num=6, (jsonb, jsonb), proc=gin_triconsistent_jsonb(internal,smallint,jsonb,integer,internal,internal,internal))
        ]
                    . references
                        access_method = gin
                jsonb_path_ops(gin): operator-family
                    . properties
                        am_ops = [
          AmOp(strategy=7, opSig=@>(jsonb,jsonb)),
          AmOp(strategy=15, opSig=@?(jsonb,jsonpath)),
          AmOp(strategy=16, opSig=@@(jsonb,jsonpath))
        ]
                        am_procs = [
          AmProc(num=1, (jsonb, jsonb), proc=btint4cmp(integer,integer)),
          AmProc(num=2, (jsonb, jsonb), proc=gin_extract_jsonb_path(jsonb,internal,internal)),
          AmProc(num=3, (jsonb, jsonb), proc=gin_extract_jsonb_query_path(jsonb,internal,smallint,internal,internal,internal,internal)),
          AmProc(num=4, (jsonb, jsonb), proc=gin_consistent_jsonb_path(internal,smallint,jsonb,integer,internal,internal,internal,internal)),
          AmProc(num=6, (jsonb, jsonb), proc=gin_triconsistent_jsonb_path(internal,smallint,jsonb,integer,internal,internal,internal))
        ]
                    . references
                        access_method = gin
                kd_point_ops(spgist): operator-family
                    . properties
                        am_ops = [
          AmOp(strategy=11, opSig=>^(point,point)),
          AmOp(strategy=1, opSig=<<(point,point)),
          AmOp(strategy=5, opSig=>>(point,point)),
          AmOp(strategy=10, opSig=<^(point,point)),
          AmOp(strategy=6, opSig=~=(point,point)),
          AmOp(strategy=8, opSig=<@(point,box)),
          AmOp(strategy=15, opSig=<->(point,point), sortFamily=float_ops)
        ]
                        am_procs = [
          AmProc(num=1, (point, point), proc=spg_kd_config(internal,internal)),
          AmProc(num=2, (point, point), proc=spg_kd_choose(internal,internal)),
          AmProc(num=3, (point, point), proc=spg_kd_picksplit(internal,internal)),
          AmProc(num=4, (point, point), proc=spg_kd_inner_consistent(internal,internal)),
          AmProc(num=5, (point, point), proc=spg_quad_leaf_consistent(internal,internal))
        ]
                    . references
                        access_method = spgist
                macaddr8_minmax_ops(brin): operator-family
                    . properties
                        am_ops = [
          AmOp(strategy=1, opSig=<(macaddr8,macaddr8)),
          AmOp(strategy=2, opSig=<=(macaddr8,macaddr8)),
          AmOp(strategy=3, opSig==(macaddr8,macaddr8)),
          AmOp(strategy=4, opSig=>=(macaddr8,macaddr8)),
          AmOp(strategy=5, opSig=>(macaddr8,macaddr8))
        ]
                        am_procs = [
          AmProc(num=1, (macaddr8, macaddr8), proc=brin_minmax_opcinfo(internal)),
          AmProc(num=2, (macaddr8, macaddr8), proc=brin_minmax_add_value(internal,internal,internal,internal)),
          AmProc(num=3, (macaddr8, macaddr8), proc=brin_minmax_consistent(internal,internal,internal)),
          AmProc(num=4, (macaddr8, macaddr8), proc=brin_minmax_union(internal,internal,internal))
        ]
                    . references
                        access_method = brin
                macaddr8_ops(btree): operator-family
                    . properties
                        am_ops = [
          AmOp(strategy=1, opSig=<(macaddr8,macaddr8)),
          AmOp(strategy=2, opSig=<=(macaddr8,macaddr8)),
          AmOp(strategy=3, opSig==(macaddr8,macaddr8)),
          AmOp(strategy=4, opSig=>=(macaddr8,macaddr8)),
          AmOp(strategy=5, opSig=>(macaddr8,macaddr8))
        ]
                        am_procs = [
          AmProc(num=1, (macaddr8, macaddr8), proc=macaddr8_cmp(macaddr8,macaddr8))
        ]
                    . references
                        access_method = btree
                macaddr8_ops(hash): operator-family
                    . properties
                        am_ops = [
          AmOp(strategy=1, opSig==(macaddr8,macaddr8))
        ]
                        am_procs = [
          AmProc(num=1, (macaddr8, macaddr8), proc=hashmacaddr8(macaddr8)),
          AmProc(num=2, (macaddr8, macaddr8), proc=hashmacaddr8extended(macaddr8,bigint))
        ]
                    . references
                        access_method = hash
                macaddr_minmax_ops(brin): operator-family
                    . properties
                        am_ops = [
          AmOp(strategy=1, opSig=<(macaddr,macaddr)),
          AmOp(strategy=2, opSig=<=(macaddr,macaddr)),
          AmOp(strategy=3, opSig==(macaddr,macaddr)),
          AmOp(strategy=4, opSig=>=(macaddr,macaddr)),
          AmOp(strategy=5, opSig=>(macaddr,macaddr))
        ]
                        am_procs = [
          AmProc(num=1, (macaddr, macaddr), proc=brin_minmax_opcinfo(internal)),
          AmProc(num=2, (macaddr, macaddr), proc=brin_minmax_add_value(internal,internal,internal,internal)),
          AmProc(num=3, (macaddr, macaddr), proc=brin_minmax_consistent(internal,internal,internal)),
          AmProc(num=4, (macaddr, macaddr), proc=brin_minmax_union(internal,internal,internal))
        ]
                    . references
                        access_method = brin
                macaddr_ops(btree): operator-family
                    . properties
                        am_ops = [
          AmOp(strategy=1, opSig=<(macaddr,macaddr)),
          AmOp(strategy=2, opSig=<=(macaddr,macaddr)),
          AmOp(strategy=3, opSig==(macaddr,macaddr)),
          AmOp(strategy=4, opSig=>=(macaddr,macaddr)),
          AmOp(strategy=5, opSig=>(macaddr,macaddr))
        ]
                        am_procs = [
          AmProc(num=1, (macaddr, macaddr), proc=macaddr_cmp(macaddr,macaddr)),
          AmProc(num=2, (macaddr, macaddr), proc=macaddr_sortsupport(internal))
        ]
                    . references
                        access_method = btree
                macaddr_ops(hash): operator-family
                    . properties
                        am_ops = [
          AmOp(strategy=1, opSig==(macaddr,macaddr))
        ]
                        am_procs = [
          AmProc(num=1, (macaddr, macaddr), proc=hashmacaddr(macaddr)),
          AmProc(num=2, (macaddr, macaddr), proc=hashmacaddrextended(macaddr,bigint))
        ]
                    . references
                        access_method = hash
                money_ops(btree): operator-family
                    . properties
                        am_ops = [
          AmOp(strategy=1, opSig=<(money,money)),
          AmOp(strategy=2, opSig=<=(money,money)),
          AmOp(strategy=3, opSig==(money,money)),
          AmOp(strategy=4, opSig=>=(money,money)),
          AmOp(strategy=5, opSig=>(money,money))
        ]
                        am_procs = [
          AmProc(num=1, (money, money), proc=cash_cmp(money,money))
        ]
                    . references
                        access_method = btree
                name_minmax_ops(brin): operator-family
                    . properties
                        am_ops = [
          AmOp(strategy=1, opSig=<(name,name)),
          AmOp(strategy=2, opSig=<=(name,name)),
          AmOp(strategy=3, opSig==(name,name)),
          AmOp(strategy=4, opSig=>=(name,name)),
          AmOp(strategy=5, opSig=>(name,name))
        ]
                        am_procs = [
          AmProc(num=1, (name, name), proc=brin_minmax_opcinfo(internal)),
          AmProc(num=2, (name, name), proc=brin_minmax_add_value(internal,internal,internal,internal)),
          AmProc(num=3, (name, name), proc=brin_minmax_consistent(internal,internal,internal)),
          AmProc(num=4, (name, name), proc=brin_minmax_union(internal,internal,internal))
        ]
                    . references
                        access_method = brin
                network_inclusion_ops(brin): operator-family
                    . properties
                        am_ops = [
          AmOp(strategy=3, opSig=&&(inet,inet)),
          AmOp(strategy=7, opSig=>>=(inet,inet)),
          AmOp(strategy=8, opSig=<<=(inet,inet)),
          AmOp(strategy=18, opSig==(inet,inet)),
          AmOp(strategy=24, opSig=>>(inet,inet)),
          AmOp(strategy=26, opSig=<<(inet,inet))
        ]
                        am_procs = [
          AmProc(num=1, (inet, inet), proc=brin_inclusion_opcinfo(internal)),
          AmProc(num=2, (inet, inet), proc=brin_inclusion_add_value(internal,internal,internal,internal)),
          AmProc(num=3, (inet, inet), proc=brin_inclusion_consistent(internal,internal,internal)),
          AmProc(num=4, (inet, inet), proc=brin_inclusion_union(internal,internal,internal)),
          AmProc(num=11, (inet, inet), proc=inet_merge(inet,inet)),
          AmProc(num=12, (inet, inet), proc=inet_same_family(inet,inet)),
          AmProc(num=13, (inet, inet), proc=network_supeq(inet,inet))
        ]
                    . references
                        access_method = brin
                network_minmax_ops(brin): operator-family
                    . properties
                        am_ops = [
          AmOp(strategy=1, opSig=<(inet,inet)),
          AmOp(strategy=2, opSig=<=(inet,inet)),
          AmOp(strategy=3, opSig==(inet,inet)),
          AmOp(strategy=4, opSig=>=(inet,inet)),
          AmOp(strategy=5, opSig=>(inet,inet))
        ]
                        am_procs = [
          AmProc(num=1, (inet, inet), proc=brin_minmax_opcinfo(internal)),
          AmProc(num=2, (inet, inet), proc=brin_minmax_add_value(internal,internal,internal,internal)),
          AmProc(num=3, (inet, inet), proc=brin_minmax_consistent(internal,internal,internal)),
          AmProc(num=4, (inet, inet), proc=brin_minmax_union(internal,internal,internal))
        ]
                    . references
                        access_method = brin
                network_ops(btree): operator-family
                    . properties
                        am_ops = [
          AmOp(strategy=1, opSig=<(inet,inet)),
          AmOp(strategy=2, opSig=<=(inet,inet)),
          AmOp(strategy=3, opSig==(inet,inet)),
          AmOp(strategy=4, opSig=>=(inet,inet)),
          AmOp(strategy=5, opSig=>(inet,inet))
        ]
                        am_procs = [
          AmProc(num=1, (inet, inet), proc=network_cmp(inet,inet))
        ]
                    . references
                        access_method = btree
                network_ops(hash): operator-family
                    . properties
                        am_ops = [
          AmOp(strategy=1, opSig==(inet,inet))
        ]
                        am_procs = [
          AmProc(num=1, (inet, inet), proc=hashinet(inet)),
          AmProc(num=2, (inet, inet), proc=hashinetextended(inet,bigint))
        ]
                    . references
                        access_method = hash
                network_ops(gist): operator-family
                    . properties
                        am_ops = [
          AmOp(strategy=3, opSig=&&(inet,inet)),
          AmOp(strategy=18, opSig==(inet,inet)),
          AmOp(strategy=19, opSig=<>(inet,inet)),
          AmOp(strategy=20, opSig=<(inet,inet)),
          AmOp(strategy=21, opSig=<=(inet,inet)),
          AmOp(strategy=22, opSig=>(inet,inet)),
          AmOp(strategy=23, opSig=>=(inet,inet)),
          AmOp(strategy=24, opSig=<<(inet,inet)),
          AmOp(strategy=25, opSig=<<=(inet,inet)),
          AmOp(strategy=26, opSig=>>(inet,inet)),
          AmOp(strategy=27, opSig=>>=(inet,inet))
        ]
                        am_procs = [
          AmProc(num=1, (inet, inet), proc=inet_gist_consistent(internal,inet,smallint,oid,internal)),
          AmProc(num=2, (inet, inet), proc=inet_gist_union(internal,internal)),
          AmProc(num=3, (inet, inet), proc=inet_gist_compress(internal)),
          AmProc(num=5, (inet, inet), proc=inet_gist_penalty(internal,internal,internal)),
          AmProc(num=6, (inet, inet), proc=inet_gist_picksplit(internal,internal)),
          AmProc(num=7, (inet, inet), proc=inet_gist_same(inet,inet,internal)),
          AmProc(num=9, (inet, inet), proc=inet_gist_fetch(internal))
        ]
                    . references
                        access_method = gist
                network_ops(spgist): operator-family
                    . properties
                        am_ops = [
          AmOp(strategy=3, opSig=&&(inet,inet)),
          AmOp(strategy=18, opSig==(inet,inet)),
          AmOp(strategy=19, opSig=<>(inet,inet)),
          AmOp(strategy=20, opSig=<(inet,inet)),
          AmOp(strategy=21, opSig=<=(inet,inet)),
          AmOp(strategy=22, opSig=>(inet,inet)),
          AmOp(strategy=23, opSig=>=(inet,inet)),
          AmOp(strategy=24, opSig=<<(inet,inet)),
          AmOp(strategy=25, opSig=<<=(inet,inet)),
          AmOp(strategy=26, opSig=>>(inet,inet)),
          AmOp(strategy=27, opSig=>>=(inet,inet))
        ]
                        am_procs = [
          AmProc(num=1, (inet, inet), proc=inet_spg_config(internal,internal)),
          AmProc(num=2, (inet, inet), proc=inet_spg_choose(internal,internal)),
          AmProc(num=3, (inet, inet), proc=inet_spg_picksplit(internal,internal)),
          AmProc(num=4, (inet, inet), proc=inet_spg_inner_consistent(internal,internal)),
          AmProc(num=5, (inet, inet), proc=inet_spg_leaf_consistent(internal,internal))
        ]
                    . references
                        access_method = spgist
                numeric_minmax_ops(brin): operator-family
                    . properties
                        am_ops = [
          AmOp(strategy=1, opSig=<(numeric,numeric)),
          AmOp(strategy=2, opSig=<=(numeric,numeric)),
          AmOp(strategy=3, opSig==(numeric,numeric)),
          AmOp(strategy=4, opSig=>=(numeric,numeric)),
          AmOp(strategy=5, opSig=>(numeric,numeric))
        ]
                        am_procs = [
          AmProc(num=1, (numeric, numeric), proc=brin_minmax_opcinfo(internal)),
          AmProc(num=2, (numeric, numeric), proc=brin_minmax_add_value(internal,internal,internal,internal)),
          AmProc(num=3, (numeric, numeric), proc=brin_minmax_consistent(internal,internal,internal)),
          AmProc(num=4, (numeric, numeric), proc=brin_minmax_union(internal,internal,internal))
        ]
                    . references
                        access_method = brin
                numeric_ops(btree): operator-family
                    . properties
                        am_ops = [
          AmOp(strategy=1, opSig=<(numeric,numeric)),
          AmOp(strategy=2, opSig=<=(numeric,numeric)),
          AmOp(strategy=3, opSig==(numeric,numeric)),
          AmOp(strategy=4, opSig=>=(numeric,numeric)),
          AmOp(strategy=5, opSig=>(numeric,numeric))
        ]
                        am_procs = [
          AmProc(num=1, (numeric, numeric), proc=numeric_cmp(numeric,numeric)),
          AmProc(num=2, (numeric, numeric), proc=numeric_sortsupport(internal)),
          AmProc(num=3, (numeric, numeric), proc=in_range(numeric,numeric,numeric,boolean,boolean))
        ]
                    . references
                        access_method = btree
                numeric_ops(hash): operator-family
                    . properties
                        am_ops = [
          AmOp(strategy=1, opSig==(numeric,numeric))
        ]
                        am_procs = [
          AmProc(num=1, (numeric, numeric), proc=hash_numeric(numeric)),
          AmProc(num=2, (numeric, numeric), proc=hash_numeric_extended(numeric,bigint))
        ]
                    . references
                        access_method = hash
                oid_minmax_ops(brin): operator-family
                    . properties
                        am_ops = [
          AmOp(strategy=1, opSig=<(oid,oid)),
          AmOp(strategy=2, opSig=<=(oid,oid)),
          AmOp(strategy=3, opSig==(oid,oid)),
          AmOp(strategy=4, opSig=>=(oid,oid)),
          AmOp(strategy=5, opSig=>(oid,oid))
        ]
                        am_procs = [
          AmProc(num=1, (oid, oid), proc=brin_minmax_opcinfo(internal)),
          AmProc(num=2, (oid, oid), proc=brin_minmax_add_value(internal,internal,internal,internal)),
          AmProc(num=3, (oid, oid), proc=brin_minmax_consistent(internal,internal,internal)),
          AmProc(num=4, (oid, oid), proc=brin_minmax_union(internal,internal,internal))
        ]
                    . references
                        access_method = brin
                oid_ops(btree): operator-family
                    . properties
                        am_ops = [
          AmOp(strategy=1, opSig=<(oid,oid)),
          AmOp(strategy=2, opSig=<=(oid,oid)),
          AmOp(strategy=3, opSig==(oid,oid)),
          AmOp(strategy=4, opSig=>=(oid,oid)),
          AmOp(strategy=5, opSig=>(oid,oid))
        ]
                        am_procs = [
          AmProc(num=1, (oid, oid), proc=btoidcmp(oid,oid)),
          AmProc(num=2, (oid, oid), proc=btoidsortsupport(internal))
        ]
                    . references
                        access_method = btree
                oid_ops(hash): operator-family
                    . properties
                        am_ops = [
          AmOp(strategy=1, opSig==(oid,oid))
        ]
                        am_procs = [
          AmProc(num=1, (oid, oid), proc=hashoid(oid)),
          AmProc(num=2, (oid, oid), proc=hashoidextended(oid,bigint))
        ]
                    . references
                        access_method = hash
                oidvector_ops(btree): operator-family
                    . properties
                        am_ops = [
          AmOp(strategy=1, opSig=<(oidvector,oidvector)),
          AmOp(strategy=2, opSig=<=(oidvector,oidvector)),
          AmOp(strategy=3, opSig==(oidvector,oidvector)),
          AmOp(strategy=4, opSig=>=(oidvector,oidvector)),
          AmOp(strategy=5, opSig=>(oidvector,oidvector))
        ]
                        am_procs = [
          AmProc(num=1, (oidvector, oidvector), proc=btoidvectorcmp(oidvector,oidvector))
        ]
                    . references
                        access_method = btree
                oidvector_ops(hash): operator-family
                    . properties
                        am_ops = [
          AmOp(strategy=1, opSig==(oidvector,oidvector))
        ]
                        am_procs = [
          AmProc(num=1, (oidvector, oidvector), proc=hashoidvector(oidvector)),
          AmProc(num=2, (oidvector, oidvector), proc=hashoidvectorextended(oidvector,bigint))
        ]
                    . references
                        access_method = hash
                pg_lsn_minmax_ops(brin): operator-family
                    . properties
                        am_ops = [
          AmOp(strategy=1, opSig=<(pg_lsn,pg_lsn)),
          AmOp(strategy=2, opSig=<=(pg_lsn,pg_lsn)),
          AmOp(strategy=3, opSig==(pg_lsn,pg_lsn)),
          AmOp(strategy=4, opSig=>=(pg_lsn,pg_lsn)),
          AmOp(strategy=5, opSig=>(pg_lsn,pg_lsn))
        ]
                        am_procs = [
          AmProc(num=1, (pg_lsn, pg_lsn), proc=brin_minmax_opcinfo(internal)),
          AmProc(num=2, (pg_lsn, pg_lsn), proc=brin_minmax_add_value(internal,internal,internal,internal)),
          AmProc(num=3, (pg_lsn, pg_lsn), proc=brin_minmax_consistent(internal,internal,internal)),
          AmProc(num=4, (pg_lsn, pg_lsn), proc=brin_minmax_union(internal,internal,internal))
        ]
                    . references
                        access_method = brin
                pg_lsn_ops(btree): operator-family
                    . properties
                        am_ops = [
          AmOp(strategy=1, opSig=<(pg_lsn,pg_lsn)),
          AmOp(strategy=2, opSig=<=(pg_lsn,pg_lsn)),
          AmOp(strategy=3, opSig==(pg_lsn,pg_lsn)),
          AmOp(strategy=4, opSig=>=(pg_lsn,pg_lsn)),
          AmOp(strategy=5, opSig=>(pg_lsn,pg_lsn))
        ]
                        am_procs = [
          AmProc(num=1, (pg_lsn, pg_lsn), proc=pg_lsn_cmp(pg_lsn,pg_lsn))
        ]
                    . references
                        access_method = btree
                pg_lsn_ops(hash): operator-family
                    . properties
                        am_ops = [
          AmOp(strategy=1, opSig==(pg_lsn,pg_lsn))
        ]
                        am_procs = [
          AmProc(num=1, (pg_lsn, pg_lsn), proc=pg_lsn_hash(pg_lsn)),
          AmProc(num=2, (pg_lsn, pg_lsn), proc=pg_lsn_hash_extended(pg_lsn,bigint))
        ]
                    . references
                        access_method = hash
                point_ops(gist): operator-family
                    . properties
                        am_ops = [
          AmOp(strategy=11, opSig=>^(point,point)),
          AmOp(strategy=1, opSig=<<(point,point)),
          AmOp(strategy=5, opSig=>>(point,point)),
          AmOp(strategy=10, opSig=<^(point,point)),
          AmOp(strategy=6, opSig=~=(point,point)),
          AmOp(strategy=15, opSig=<->(point,point), sortFamily=float_ops),
          AmOp(strategy=28, opSig=<@(point,box)),
          AmOp(strategy=48, opSig=<@(point,polygon)),
          AmOp(strategy=68, opSig=<@(point,circle))
        ]
                        am_procs = [
          AmProc(num=1, (point, point), proc=gist_point_consistent(internal,point,smallint,oid,internal)),
          AmProc(num=2, (point, point), proc=gist_box_union(internal,internal)),
          AmProc(num=3, (point, point), proc=gist_point_compress(internal)),
          AmProc(num=5, (point, point), proc=gist_box_penalty(internal,internal,internal)),
          AmProc(num=6, (point, point), proc=gist_box_picksplit(internal,internal)),
          AmProc(num=7, (point, point), proc=gist_box_same(box,box,internal)),
          AmProc(num=8, (point, point), proc=gist_point_distance(internal,point,smallint,oid,internal)),
          AmProc(num=9, (point, point), proc=gist_point_fetch(internal))
        ]
                    . references
                        access_method = gist
                poly_ops(gist): operator-family
                    . properties
                        am_ops = [
          AmOp(strategy=1, opSig=<<(polygon,polygon)),
          AmOp(strategy=2, opSig=&<(polygon,polygon)),
          AmOp(strategy=3, opSig=&&(polygon,polygon)),
          AmOp(strategy=4, opSig=&>(polygon,polygon)),
          AmOp(strategy=5, opSig=>>(polygon,polygon)),
          AmOp(strategy=6, opSig=~=(polygon,polygon)),
          AmOp(strategy=7, opSig=@>(polygon,polygon)),
          AmOp(strategy=8, opSig=<@(polygon,polygon)),
          AmOp(strategy=9, opSig=&<|(polygon,polygon)),
          AmOp(strategy=10, opSig=<<|(polygon,polygon)),
          AmOp(strategy=11, opSig=|>>(polygon,polygon)),
          AmOp(strategy=12, opSig=|&>(polygon,polygon)),
          AmOp(strategy=13, opSig=~(polygon,polygon)),
          AmOp(strategy=14, opSig=@(polygon,polygon)),
          AmOp(strategy=15, opSig=<->(polygon,point), sortFamily=float_ops)
        ]
                        am_procs = [
          AmProc(num=1, (polygon, polygon), proc=gist_poly_consistent(internal,polygon,smallint,oid,internal)),
          AmProc(num=2, (polygon, polygon), proc=gist_box_union(internal,internal)),
          AmProc(num=3, (polygon, polygon), proc=gist_poly_compress(internal)),
          AmProc(num=5, (polygon, polygon), proc=gist_box_penalty(internal,internal,internal)),
          AmProc(num=6, (polygon, polygon), proc=gist_box_picksplit(internal,internal)),
          AmProc(num=7, (polygon, polygon), proc=gist_box_same(box,box,internal)),
          AmProc(num=8, (polygon, polygon), proc=gist_poly_distance(internal,polygon,smallint,oid,internal))
        ]
                    . references
                        access_method = gist
                poly_ops(spgist): operator-family
                    . properties
                        am_ops = [
          AmOp(strategy=1, opSig=<<(polygon,polygon)),
          AmOp(strategy=2, opSig=&<(polygon,polygon)),
          AmOp(strategy=3, opSig=&&(polygon,polygon)),
          AmOp(strategy=4, opSig=&>(polygon,polygon)),
          AmOp(strategy=5, opSig=>>(polygon,polygon)),
          AmOp(strategy=6, opSig=~=(polygon,polygon)),
          AmOp(strategy=7, opSig=@>(polygon,polygon)),
          AmOp(strategy=8, opSig=<@(polygon,polygon)),
          AmOp(strategy=9, opSig=&<|(polygon,polygon)),
          AmOp(strategy=10, opSig=<<|(polygon,polygon)),
          AmOp(strategy=11, opSig=|>>(polygon,polygon)),
          AmOp(strategy=12, opSig=|&>(polygon,polygon)),
          AmOp(strategy=15, opSig=<->(polygon,point), sortFamily=float_ops)
        ]
                        am_procs = [
          AmProc(num=1, (polygon, polygon), proc=spg_bbox_quad_config(internal,internal)),
          AmProc(num=2, (polygon, polygon), proc=spg_box_quad_choose(internal,internal)),
          AmProc(num=3, (polygon, polygon), proc=spg_box_quad_picksplit(internal,internal)),
          AmProc(num=4, (polygon, polygon), proc=spg_box_quad_inner_consistent(internal,internal)),
          AmProc(num=5, (polygon, polygon), proc=spg_box_quad_leaf_consistent(internal,internal)),
          AmProc(num=6, (polygon, polygon), proc=spg_poly_quad_compress(polygon))
        ]
                    . references
                        access_method = spgist
                quad_point_ops(spgist): operator-family
                    . properties
                        am_ops = [
          AmOp(strategy=11, opSig=>^(point,point)),
          AmOp(strategy=1, opSig=<<(point,point)),
          AmOp(strategy=5, opSig=>>(point,point)),
          AmOp(strategy=10, opSig=<^(point,point)),
          AmOp(strategy=6, opSig=~=(point,point)),
          AmOp(strategy=8, opSig=<@(point,box)),
          AmOp(strategy=15, opSig=<->(point,point), sortFamily=float_ops)
        ]
                        am_procs = [
          AmProc(num=1, (point, point), proc=spg_quad_config(internal,internal)),
          AmProc(num=2, (point, point), proc=spg_quad_choose(internal,internal)),
          AmProc(num=3, (point, point), proc=spg_quad_picksplit(internal,internal)),
          AmProc(num=4, (point, point), proc=spg_quad_inner_consistent(internal,internal)),
          AmProc(num=5, (point, point), proc=spg_quad_leaf_consistent(internal,internal))
        ]
                    . references
                        access_method = spgist
                range_inclusion_ops(brin): operator-family
                    . properties
                        am_ops = [
          AmOp(strategy=1, opSig=<<(anyrange,anyrange)),
          AmOp(strategy=2, opSig=&<(anyrange,anyrange)),
          AmOp(strategy=3, opSig=&&(anyrange,anyrange)),
          AmOp(strategy=4, opSig=&>(anyrange,anyrange)),
          AmOp(strategy=5, opSig=>>(anyrange,anyrange)),
          AmOp(strategy=7, opSig=@>(anyrange,anyrange)),
          AmOp(strategy=8, opSig=<@(anyrange,anyrange)),
          AmOp(strategy=16, opSig=@>(anyrange,anyelement)),
          AmOp(strategy=17, opSig=-|-(anyrange,anyrange)),
          AmOp(strategy=18, opSig==(anyrange,anyrange)),
          AmOp(strategy=20, opSig=<(anyrange,anyrange)),
          AmOp(strategy=21, opSig=<=(anyrange,anyrange)),
          AmOp(strategy=22, opSig=>(anyrange,anyrange)),
          AmOp(strategy=23, opSig=>=(anyrange,anyrange))
        ]
                        am_procs = [
          AmProc(num=1, (anyrange, anyrange), proc=brin_inclusion_opcinfo(internal)),
          AmProc(num=2, (anyrange, anyrange), proc=brin_inclusion_add_value(internal,internal,internal,internal)),
          AmProc(num=3, (anyrange, anyrange), proc=brin_inclusion_consistent(internal,internal,internal)),
          AmProc(num=4, (anyrange, anyrange), proc=brin_inclusion_union(internal,internal,internal)),
          AmProc(num=11, (anyrange, anyrange), proc=range_merge(anyrange,anyrange)),
          AmProc(num=13, (anyrange, anyrange), proc=range_contains(anyrange,anyrange)),
          AmProc(num=14, (anyrange, anyrange), proc=isempty(anyrange))
        ]
                    . references
                        access_method = brin
                range_ops(btree): operator-family
                    . properties
                        am_ops = [
          AmOp(strategy=1, opSig=<(anyrange,anyrange)),
          AmOp(strategy=2, opSig=<=(anyrange,anyrange)),
          AmOp(strategy=3, opSig==(anyrange,anyrange)),
          AmOp(strategy=4, opSig=>=(anyrange,anyrange)),
          AmOp(strategy=5, opSig=>(anyrange,anyrange))
        ]
                        am_procs = [
          AmProc(num=1, (anyrange, anyrange), proc=range_cmp(anyrange,anyrange))
        ]
                    . references
                        access_method = btree
                range_ops(hash): operator-family
                    . properties
                        am_ops = [
          AmOp(strategy=1, opSig==(anyrange,anyrange))
        ]
                        am_procs = [
          AmProc(num=1, (anyrange, anyrange), proc=hash_range(anyrange)),
          AmProc(num=2, (anyrange, anyrange), proc=hash_range_extended(anyrange,bigint))
        ]
                    . references
                        access_method = hash
                range_ops(gist): operator-family
                    . properties
                        am_ops = [
          AmOp(strategy=1, opSig=<<(anyrange,anyrange)),
          AmOp(strategy=2, opSig=&<(anyrange,anyrange)),
          AmOp(strategy=3, opSig=&&(anyrange,anyrange)),
          AmOp(strategy=4, opSig=&>(anyrange,anyrange)),
          AmOp(strategy=5, opSig=>>(anyrange,anyrange)),
          AmOp(strategy=6, opSig=-|-(anyrange,anyrange)),
          AmOp(strategy=7, opSig=@>(anyrange,anyrange)),
          AmOp(strategy=8, opSig=<@(anyrange,anyrange)),
          AmOp(strategy=16, opSig=@>(anyrange,anyelement)),
          AmOp(strategy=18, opSig==(anyrange,anyrange))
        ]
                        am_procs = [
          AmProc(num=1, (anyrange, anyrange), proc=range_gist_consistent(internal,anyrange,smallint,oid,internal)),
          AmProc(num=2, (anyrange, anyrange), proc=range_gist_union(internal,internal)),
          AmProc(num=5, (anyrange, anyrange), proc=range_gist_penalty(internal,internal,internal)),
          AmProc(num=6, (anyrange, anyrange), proc=range_gist_picksplit(internal,internal)),
          AmProc(num=7, (anyrange, anyrange), proc=range_gist_same(anyrange,anyrange,internal))
        ]
                    . references
                        access_method = gist
                range_ops(spgist): operator-family
                    . properties
                        am_ops = [
          AmOp(strategy=1, opSig=<<(anyrange,anyrange)),
          AmOp(strategy=2, opSig=&<(anyrange,anyrange)),
          AmOp(strategy=3, opSig=&&(anyrange,anyrange)),
          AmOp(strategy=4, opSig=&>(anyrange,anyrange)),
          AmOp(strategy=5, opSig=>>(anyrange,anyrange)),
          AmOp(strategy=6, opSig=-|-(anyrange,anyrange)),
          AmOp(strategy=7, opSig=@>(anyrange,anyrange)),
          AmOp(strategy=8, opSig=<@(anyrange,anyrange)),
          AmOp(strategy=16, opSig=@>(anyrange,anyelement)),
          AmOp(strategy=18, opSig==(anyrange,anyrange))
        ]
                        am_procs = [
          AmProc(num=1, (anyrange, anyrange), proc=spg_range_quad_config(internal,internal)),
          AmProc(num=2, (anyrange, anyrange), proc=spg_range_quad_choose(internal,internal)),
          AmProc(num=3, (anyrange, anyrange), proc=spg_range_quad_picksplit(internal,internal)),
          AmProc(num=4, (anyrange, anyrange), proc=spg_range_quad_inner_consistent(internal,internal)),
          AmProc(num=5, (anyrange, anyrange), proc=spg_range_quad_leaf_consistent(internal,internal))
        ]
                    . references
                        access_method = spgist
                record_image_ops(btree): operator-family
                    . properties
                        am_ops = [
          AmOp(strategy=1, opSig=*<(record,record)),
          AmOp(strategy=2, opSig=*<=(record,record)),
          AmOp(strategy=3, opSig=*=(record,record)),
          AmOp(strategy=4, opSig=*>=(record,record)),
          AmOp(strategy=5, opSig=*>(record,record))
        ]
                        am_procs = [
          AmProc(num=1, (record, record), proc=btrecordimagecmp(record,record))
        ]
                    . references
                        access_method = btree
                record_ops(btree): operator-family
                    . properties
                        am_ops = [
          AmOp(strategy=1, opSig=<(record,record)),
          AmOp(strategy=2, opSig=<=(record,record)),
          AmOp(strategy=3, opSig==(record,record)),
          AmOp(strategy=4, opSig=>=(record,record)),
          AmOp(strategy=5, opSig=>(record,record))
        ]
                        am_procs = [
          AmProc(num=1, (record, record), proc=btrecordcmp(record,record))
        ]
                    . references
                        access_method = btree
                text_minmax_ops(brin): operator-family
                    . properties
                        am_ops = [
          AmOp(strategy=1, opSig=<(text,text)),
          AmOp(strategy=2, opSig=<=(text,text)),
          AmOp(strategy=3, opSig==(text,text)),
          AmOp(strategy=4, opSig=>=(text,text)),
          AmOp(strategy=5, opSig=>(text,text))
        ]
                        am_procs = [
          AmProc(num=1, (text, text), proc=brin_minmax_opcinfo(internal)),
          AmProc(num=2, (text, text), proc=brin_minmax_add_value(internal,internal,internal,internal)),
          AmProc(num=3, (text, text), proc=brin_minmax_consistent(internal,internal,internal)),
          AmProc(num=4, (text, text), proc=brin_minmax_union(internal,internal,internal))
        ]
                    . references
                        access_method = brin
                text_ops(btree): operator-family
                    . properties
                        am_ops = [
          AmOp(strategy=1, opSig=<(text,text)),
          AmOp(strategy=2, opSig=<=(text,text)),
          AmOp(strategy=3, opSig==(text,text)),
          AmOp(strategy=4, opSig=>=(text,text)),
          AmOp(strategy=5, opSig=>(text,text)),
          AmOp(strategy=1, opSig=<(name,name)),
          AmOp(strategy=2, opSig=<=(name,name)),
          AmOp(strategy=3, opSig==(name,name)),
          AmOp(strategy=4, opSig=>=(name,name)),
          AmOp(strategy=5, opSig=>(name,name)),
          AmOp(strategy=1, opSig=<(name,text)),
          AmOp(strategy=2, opSig=<=(name,text)),
          AmOp(strategy=3, opSig==(name,text)),
          AmOp(strategy=4, opSig=>=(name,text)),
          AmOp(strategy=5, opSig=>(name,text)),
          AmOp(strategy=1, opSig=<(text,name)),
          AmOp(strategy=2, opSig=<=(text,name)),
          AmOp(strategy=3, opSig==(text,name)),
          AmOp(strategy=4, opSig=>=(text,name)),
          AmOp(strategy=5, opSig=>(text,name))
        ]
                        am_procs = [
          AmProc(num=1, (text, text), proc=bttextcmp(text,text)),
          AmProc(num=2, (text, text), proc=bttextsortsupport(internal)),
          AmProc(num=1, (name, name), proc=btnamecmp(name,name)),
          AmProc(num=2, (name, name), proc=btnamesortsupport(internal)),
          AmProc(num=1, (name, text), proc=btnametextcmp(name,text)),
          AmProc(num=1, (text, name), proc=bttextnamecmp(text,name))
        ]
                    . references
                        access_method = btree
                text_ops(hash): operator-family
                    . properties
                        am_ops = [
          AmOp(strategy=1, opSig==(text,text)),
          AmOp(strategy=1, opSig==(name,name)),
          AmOp(strategy=1, opSig==(name,text)),
          AmOp(strategy=1, opSig==(text,name))
        ]
                        am_procs = [
          AmProc(num=1, (text, text), proc=hashtext(text)),
          AmProc(num=2, (text, text), proc=hashtextextended(text,bigint)),
          AmProc(num=1, (name, name), proc=hashname(name)),
          AmProc(num=2, (name, name), proc=hashnameextended(name,bigint))
        ]
                    . references
                        access_method = hash
                text_ops(spgist): operator-family
                    . properties
                        am_ops = [
          AmOp(strategy=1, opSig=~<~(text,text)),
          AmOp(strategy=2, opSig=~<=~(text,text)),
          AmOp(strategy=3, opSig==(text,text)),
          AmOp(strategy=4, opSig=~>=~(text,text)),
          AmOp(strategy=5, opSig=~>~(text,text)),
          AmOp(strategy=11, opSig=<(text,text)),
          AmOp(strategy=12, opSig=<=(text,text)),
          AmOp(strategy=14, opSig=>=(text,text)),
          AmOp(strategy=15, opSig=>(text,text)),
          AmOp(strategy=28, opSig=^@(text,text))
        ]
                        am_procs = [
          AmProc(num=1, (text, text), proc=spg_text_config(internal,internal)),
          AmProc(num=2, (text, text), proc=spg_text_choose(internal,internal)),
          AmProc(num=3, (text, text), proc=spg_text_picksplit(internal,internal)),
          AmProc(num=4, (text, text), proc=spg_text_inner_consistent(internal,internal)),
          AmProc(num=5, (text, text), proc=spg_text_leaf_consistent(internal,internal))
        ]
                    . references
                        access_method = spgist
                text_pattern_ops(btree): operator-family
                    . properties
                        am_ops = [
          AmOp(strategy=1, opSig=~<~(text,text)),
          AmOp(strategy=2, opSig=~<=~(text,text)),
          AmOp(strategy=3, opSig==(text,text)),
          AmOp(strategy=4, opSig=~>=~(text,text)),
          AmOp(strategy=5, opSig=~>~(text,text))
        ]
                        am_procs = [
          AmProc(num=1, (text, text), proc=bttext_pattern_cmp(text,text)),
          AmProc(num=2, (text, text), proc=bttext_pattern_sortsupport(internal))
        ]
                    . references
                        access_method = btree
                text_pattern_ops(hash): operator-family
                    . properties
                        am_ops = [
          AmOp(strategy=1, opSig==(text,text))
        ]
                        am_procs = [
          AmProc(num=1, (text, text), proc=hashtext(text)),
          AmProc(num=2, (text, text), proc=hashtextextended(text,bigint))
        ]
                    . references
                        access_method = hash
                tid_minmax_ops(brin): operator-family
                    . properties
                        am_ops = [
          AmOp(strategy=1, opSig=<(tid,tid)),
          AmOp(strategy=2, opSig=<=(tid,tid)),
          AmOp(strategy=3, opSig==(tid,tid)),
          AmOp(strategy=4, opSig=>=(tid,tid)),
          AmOp(strategy=5, opSig=>(tid,tid))
        ]
                        am_procs = [
          AmProc(num=1, (tid, tid), proc=brin_minmax_opcinfo(internal)),
          AmProc(num=2, (tid, tid), proc=brin_minmax_add_value(internal,internal,internal,internal)),
          AmProc(num=3, (tid, tid), proc=brin_minmax_consistent(internal,internal,internal)),
          AmProc(num=4, (tid, tid), proc=brin_minmax_union(internal,internal,internal))
        ]
                    . references
                        access_method = brin
                tid_ops(btree): operator-family
                    . properties
                        am_ops = [
          AmOp(strategy=1, opSig=<(tid,tid)),
          AmOp(strategy=2, opSig=<=(tid,tid)),
          AmOp(strategy=3, opSig==(tid,tid)),
          AmOp(strategy=4, opSig=>=(tid,tid)),
          AmOp(strategy=5, opSig=>(tid,tid))
        ]
                        am_procs = [
          AmProc(num=1, (tid, tid), proc=bttidcmp(tid,tid))
        ]
                    . references
                        access_method = btree
                tid_ops(hash): operator-family
                    . properties
                        am_ops = [
          AmOp(strategy=1, opSig==(tid,tid))
        ]
                        am_procs = [
          AmProc(num=1, (tid, tid), proc=hashtid(tid)),
          AmProc(num=2, (tid, tid), proc=hashtidextended(tid,bigint))
        ]
                    . references
                        access_method = hash
                time_minmax_ops(brin): operator-family
                    . properties
                        am_ops = [
          AmOp(strategy=1, opSig=<(time without time zone,time without time zone)),
          AmOp(strategy=2, opSig=<=(time without time zone,time without time zone)),
          AmOp(strategy=3, opSig==(time without time zone,time without time zone)),
          AmOp(strategy=4, opSig=>=(time without time zone,time without time zone)),
          AmOp(strategy=5, opSig=>(time without time zone,time without time zone))
        ]
                        am_procs = [
          AmProc(num=1, (time without time zone, time without time zone), proc=brin_minmax_opcinfo(internal)),
          AmProc(num=2, (time without time zone, time without time zone), proc=brin_minmax_add_value(internal,internal,internal,internal)),
          AmProc(num=3, (time without time zone, time without time zone), proc=brin_minmax_consistent(internal,internal,internal)),
          AmProc(num=4, (time without time zone, time without time zone), proc=brin_minmax_union(internal,internal,internal))
        ]
                    . references
                        access_method = brin
                time_ops(btree): operator-family
                    . properties
                        am_ops = [
          AmOp(strategy=1, opSig=<(time without time zone,time without time zone)),
          AmOp(strategy=2, opSig=<=(time without time zone,time without time zone)),
          AmOp(strategy=3, opSig==(time without time zone,time without time zone)),
          AmOp(strategy=4, opSig=>=(time without time zone,time without time zone)),
          AmOp(strategy=5, opSig=>(time without time zone,time without time zone))
        ]
                        am_procs = [
          AmProc(num=1, (time without time zone, time without time zone), proc=time_cmp(time without time zone,time without time zone)),
          AmProc(num=3, (time without time zone, interval), proc=in_range(time without time zone,time without time zone,interval,boolean,boolean))
        ]
                    . references
                        access_method = btree
                time_ops(hash): operator-family
                    . properties
                        am_ops = [
          AmOp(strategy=1, opSig==(time without time zone,time without time zone))
        ]
                        am_procs = [
          AmProc(num=1, (time without time zone, time without time zone), proc=time_hash(time without time zone)),
          AmProc(num=2, (time without time zone, time without time zone), proc=time_hash_extended(time without time zone,bigint))
        ]
                    . references
                        access_method = hash
                timestamp_ops(hash): operator-family
                    . properties
                        am_ops = [
          AmOp(strategy=1, opSig==(timestamp without time zone,timestamp without time zone))
        ]
                        am_procs = [
          AmProc(num=1, (timestamp without time zone, timestamp without time zone), proc=timestamp_hash(timestamp without time zone)),
          AmProc(num=2, (timestamp without time zone, timestamp without time zone), proc=timestamp_hash_extended(timestamp without time zone,bigint))
        ]
                    . references
                        access_method = hash
                timestamptz_ops(hash): operator-family
                    . properties
                        am_ops = [
          AmOp(strategy=1, opSig==(timestamp with time zone,timestamp with time zone))
        ]
                        am_procs = [
          AmProc(num=1, (timestamp with time zone, timestamp with time zone), proc=timestamp_hash(timestamp without time zone)),
          AmProc(num=2, (timestamp with time zone, timestamp with time zone), proc=timestamp_hash_extended(timestamp without time zone,bigint))
        ]
                    . references
                        access_method = hash
                timetz_minmax_ops(brin): operator-family
                    . properties
                        am_ops = [
          AmOp(strategy=1, opSig=<(time with time zone,time with time zone)),
          AmOp(strategy=2, opSig=<=(time with time zone,time with time zone)),
          AmOp(strategy=3, opSig==(time with time zone,time with time zone)),
          AmOp(strategy=4, opSig=>=(time with time zone,time with time zone)),
          AmOp(strategy=5, opSig=>(time with time zone,time with time zone))
        ]
                        am_procs = [
          AmProc(num=1, (time with time zone, time with time zone), proc=brin_minmax_opcinfo(internal)),
          AmProc(num=2, (time with time zone, time with time zone), proc=brin_minmax_add_value(internal,internal,internal,internal)),
          AmProc(num=3, (time with time zone, time with time zone), proc=brin_minmax_consistent(internal,internal,internal)),
          AmProc(num=4, (time with time zone, time with time zone), proc=brin_minmax_union(internal,internal,internal))
        ]
                    . references
                        access_method = brin
                timetz_ops(btree): operator-family
                    . properties
                        am_ops = [
          AmOp(strategy=1, opSig=<(time with time zone,time with time zone)),
          AmOp(strategy=2, opSig=<=(time with time zone,time with time zone)),
          AmOp(strategy=3, opSig==(time with time zone,time with time zone)),
          AmOp(strategy=4, opSig=>=(time with time zone,time with time zone)),
          AmOp(strategy=5, opSig=>(time with time zone,time with time zone))
        ]
                        am_procs = [
          AmProc(num=1, (time with time zone, time with time zone), proc=timetz_cmp(time with time zone,time with time zone)),
          AmProc(num=3, (time with time zone, interval), proc=in_range(time with time zone,time with time zone,interval,boolean,boolean))
        ]
                    . references
                        access_method = btree
                timetz_ops(hash): operator-family
                    . properties
                        am_ops = [
          AmOp(strategy=1, opSig==(time with time zone,time with time zone))
        ]
                        am_procs = [
          AmProc(num=1, (time with time zone, time with time zone), proc=timetz_hash(time with time zone)),
          AmProc(num=2, (time with time zone, time with time zone), proc=timetz_hash_extended(time with time zone,bigint))
        ]
                    . references
                        access_method = hash
                tsquery_ops(btree): operator-family
                    . properties
                        am_ops = [
          AmOp(strategy=1, opSig=<(tsquery,tsquery)),
          AmOp(strategy=2, opSig=<=(tsquery,tsquery)),
          AmOp(strategy=3, opSig==(tsquery,tsquery)),
          AmOp(strategy=4, opSig=>=(tsquery,tsquery)),
          AmOp(strategy=5, opSig=>(tsquery,tsquery))
        ]
                        am_procs = [
          AmProc(num=1, (tsquery, tsquery), proc=tsquery_cmp(tsquery,tsquery))
        ]
                    . references
                        access_method = btree
                tsquery_ops(gist): operator-family
                    . properties
                        am_ops = [
          AmOp(strategy=7, opSig=@>(tsquery,tsquery)),
          AmOp(strategy=8, opSig=<@(tsquery,tsquery))
        ]
                        am_procs = [
          AmProc(num=1, (tsquery, tsquery), proc=gtsquery_consistent(internal,tsquery,smallint,oid,internal)),
          AmProc(num=2, (tsquery, tsquery), proc=gtsquery_union(internal,internal)),
          AmProc(num=3, (tsquery, tsquery), proc=gtsquery_compress(internal)),
          AmProc(num=5, (tsquery, tsquery), proc=gtsquery_penalty(internal,internal,internal)),
          AmProc(num=6, (tsquery, tsquery), proc=gtsquery_picksplit(internal,internal)),
          AmProc(num=7, (tsquery, tsquery), proc=gtsquery_same(bigint,bigint,internal))
        ]
                    . references
                        access_method = gist
                tsvector_ops(btree): operator-family
                    . properties
                        am_ops = [
          AmOp(strategy=1, opSig=<(tsvector,tsvector)),
          AmOp(strategy=2, opSig=<=(tsvector,tsvector)),
          AmOp(strategy=3, opSig==(tsvector,tsvector)),
          AmOp(strategy=4, opSig=>=(tsvector,tsvector)),
          AmOp(strategy=5, opSig=>(tsvector,tsvector))
        ]
                        am_procs = [
          AmProc(num=1, (tsvector, tsvector), proc=tsvector_cmp(tsvector,tsvector))
        ]
                    . references
                        access_method = btree
                tsvector_ops(gist): operator-family
                    . properties
                        am_ops = [
          AmOp(strategy=1, opSig=@@(tsvector,tsquery))
        ]
                        am_procs = [
          AmProc(num=1, (tsvector, tsvector), proc=gtsvector_consistent(internal,tsvector,smallint,oid,internal)),
          AmProc(num=2, (tsvector, tsvector), proc=gtsvector_union(internal,internal)),
          AmProc(num=3, (tsvector, tsvector), proc=gtsvector_compress(internal)),
          AmProc(num=4, (tsvector, tsvector), proc=gtsvector_decompress(internal)),
          AmProc(num=5, (tsvector, tsvector), proc=gtsvector_penalty(internal,internal,internal)),
          AmProc(num=6, (tsvector, tsvector), proc=gtsvector_picksplit(internal,internal)),
          AmProc(num=7, (tsvector, tsvector), proc=gtsvector_same(gtsvector,gtsvector,internal))
        ]
                    . references
                        access_method = gist
                tsvector_ops(gin): operator-family
                    . properties
                        am_ops = [
          AmOp(strategy=1, opSig=@@(tsvector,tsquery)),
          AmOp(strategy=2, opSig=@@@(tsvector,tsquery))
        ]
                        am_procs = [
          AmProc(num=1, (tsvector, tsvector), proc=gin_cmp_tslexeme(text,text)),
          AmProc(num=2, (tsvector, tsvector), proc=gin_extract_tsvector(tsvector,internal,internal)),
          AmProc(num=3, (tsvector, tsvector), proc=gin_extract_tsquery(tsvector,internal,smallint,internal,internal,internal,internal)),
          AmProc(num=4, (tsvector, tsvector), proc=gin_tsquery_consistent(internal,smallint,tsvector,integer,internal,internal,internal,internal)),
          AmProc(num=5, (tsvector, tsvector), proc=gin_cmp_prefix(text,text,smallint,internal)),
          AmProc(num=6, (tsvector, tsvector), proc=gin_tsquery_triconsistent(internal,smallint,tsvector,integer,internal,internal,internal))
        ]
                    . references
                        access_method = gin
                uuid_minmax_ops(brin): operator-family
                    . properties
                        am_ops = [
          AmOp(strategy=1, opSig=<(uuid,uuid)),
          AmOp(strategy=2, opSig=<=(uuid,uuid)),
          AmOp(strategy=3, opSig==(uuid,uuid)),
          AmOp(strategy=4, opSig=>=(uuid,uuid)),
          AmOp(strategy=5, opSig=>(uuid,uuid))
        ]
                        am_procs = [
          AmProc(num=1, (uuid, uuid), proc=brin_minmax_opcinfo(internal)),
          AmProc(num=2, (uuid, uuid), proc=brin_minmax_add_value(internal,internal,internal,internal)),
          AmProc(num=3, (uuid, uuid), proc=brin_minmax_consistent(internal,internal,internal)),
          AmProc(num=4, (uuid, uuid), proc=brin_minmax_union(internal,internal,internal))
        ]
                    . references
                        access_method = brin
                uuid_ops(btree): operator-family
                    . properties
                        am_ops = [
          AmOp(strategy=1, opSig=<(uuid,uuid)),
          AmOp(strategy=2, opSig=<=(uuid,uuid)),
          AmOp(strategy=3, opSig==(uuid,uuid)),
          AmOp(strategy=4, opSig=>=(uuid,uuid)),
          AmOp(strategy=5, opSig=>(uuid,uuid))
        ]
                        am_procs = [
          AmProc(num=1, (uuid, uuid), proc=uuid_cmp(uuid,uuid)),
          AmProc(num=2, (uuid, uuid), proc=uuid_sortsupport(internal))
        ]
                    . references
                        access_method = btree
                uuid_ops(hash): operator-family
                    . properties
                        am_ops = [
          AmOp(strategy=1, opSig==(uuid,uuid))
        ]
                        am_procs = [
          AmProc(num=1, (uuid, uuid), proc=uuid_hash(uuid)),
          AmProc(num=2, (uuid, uuid), proc=uuid_hash_extended(uuid,bigint))
        ]
                    . references
                        access_method = hash
                varbit_minmax_ops(brin): operator-family
                    . properties
                        am_ops = [
          AmOp(strategy=1, opSig=<(bit varying,bit varying)),
          AmOp(strategy=2, opSig=<=(bit varying,bit varying)),
          AmOp(strategy=3, opSig==(bit varying,bit varying)),
          AmOp(strategy=4, opSig=>=(bit varying,bit varying)),
          AmOp(strategy=5, opSig=>(bit varying,bit varying))
        ]
                        am_procs = [
          AmProc(num=1, (bit varying, bit varying), proc=brin_minmax_opcinfo(internal)),
          AmProc(num=2, (bit varying, bit varying), proc=brin_minmax_add_value(internal,internal,internal,internal)),
          AmProc(num=3, (bit varying, bit varying), proc=brin_minmax_consistent(internal,internal,internal)),
          AmProc(num=4, (bit varying, bit varying), proc=brin_minmax_union(internal,internal,internal))
        ]
                    . references
                        access_method = brin
                varbit_ops(btree): operator-family
                    . properties
                        am_ops = [
          AmOp(strategy=1, opSig=<(bit varying,bit varying)),
          AmOp(strategy=2, opSig=<=(bit varying,bit varying)),
          AmOp(strategy=3, opSig==(bit varying,bit varying)),
          AmOp(strategy=4, opSig=>=(bit varying,bit varying)),
          AmOp(strategy=5, opSig=>(bit varying,bit varying))
        ]
                        am_procs = [
          AmProc(num=1, (bit varying, bit varying), proc=varbitcmp(bit varying,bit varying))
        ]
                    . references
                        access_method = btree
                xid_ops(hash): operator-family
                    . properties
                        am_ops = [
          AmOp(strategy=1, opSig==(xid,xid))
        ]
                        am_procs = [
          AmProc(num=1, (xid, xid), proc=hashint4(integer)),
          AmProc(num=2, (xid, xid), proc=hashint4extended(integer,bigint))
        ]
                    . references
                        access_method = hash
        public: schema
            --  standard public schema
            + sequences
                users_id_seq: private sequence: null data type: integer
            + tables
                users: table
                    + columns
                        id: integer NN default nextval('users_id_seq'::regclass)
                        balance: integer
                    + indices
                        users_pk: unique (id)
                    + keys
                        users_pk: PK (id)
    + access-methods
        brin: type: index, handler: pg_catalog.brinhandler
            --  block range index (BRIN) access method
        btree: type: index, handler: pg_catalog.bthandler
            --  b-tree index access method
        gin: type: index, handler: pg_catalog.ginhandler
            --  GIN index access method
        gist: type: index, handler: pg_catalog.gisthandler
            --  GiST index access method
        hash: type: index, handler: pg_catalog.hashhandler
            --  hash index access method
        heap: type: table, handler: pg_catalog.heap_tableam_handler
            --  heap table access method
        spgist: type: index, handler: pg_catalog.spghandler
            --  SP-GiST index access method
    + extensions
        plpgsql: extension version: 1.0, schemaName: 'pg_catalog', availableUpdates: []
            --  PL/pgSQL procedural language
    + languages
        c: language
            --  dynamically-loaded C functions
            . properties
                validator_name = fmgr_c_validator
                validator_schema = pg_catalog
        internal: language
            --  built-in functions
            . properties
                validator_name = fmgr_internal_validator
                validator_schema = pg_catalog
        plpgsql: language
            --  PL/pgSQL procedural language
            . properties
                handler_name = plpgsql_call_handler
                handler_schema = pg_catalog
                inline_handler_name = plpgsql_inline_handler
                inline_handler_schema = pg_catalog
                trusted +
                validator_name = plpgsql_validator
                validator_schema = pg_catalog
        sql: language
            --  SQL-language functions
            . properties
                trusted +
                validator_name = fmgr_sql_validator
                validator_schema = pg_catalog
    + casts
        int8 as int2: cast
            . properties
                context = ASSIGNMENT
                method = FUNCTION
            . references
                cast_function = pg_catalog.int2
                source_type = pg_catalog.int8
                target_type = pg_catalog.int2
        int8 as int4: cast
            . properties
                context = ASSIGNMENT
                method = FUNCTION
            . references
                cast_function = pg_catalog.int4
                source_type = pg_catalog.int8
                target_type = pg_catalog.int4
        int8 as float4: cast
            . properties
                context = IMPLICIT
                method = FUNCTION
            . references
                cast_function = pg_catalog.float4
                source_type = pg_catalog.int8
                target_type = pg_catalog.float4
        int8 as float8: cast
            . properties
                context = IMPLICIT
                method = FUNCTION
            . references
                cast_function = pg_catalog.float8
                source_type = pg_catalog.int8
                target_type = pg_catalog.float8
        int8 as numeric: cast
            . properties
                context = IMPLICIT
                method = FUNCTION
            . references
                cast_function = pg_catalog.numeric
                source_type = pg_catalog.int8
                target_type = pg_catalog.numeric
        int2 as int8: cast
            . properties
                context = IMPLICIT
                method = FUNCTION
            . references
                cast_function = pg_catalog.int8
                source_type = pg_catalog.int2
                target_type = pg_catalog.int8
        int2 as int4: cast
            . properties
                context = IMPLICIT
                method = FUNCTION
            . references
                cast_function = pg_catalog.int4
                source_type = pg_catalog.int2
                target_type = pg_catalog.int4
        int2 as float4: cast
            . properties
                context = IMPLICIT
                method = FUNCTION
            . references
                cast_function = pg_catalog.float4
                source_type = pg_catalog.int2
                target_type = pg_catalog.float4
        int2 as float8: cast
            . properties
                context = IMPLICIT
                method = FUNCTION
            . references
                cast_function = pg_catalog.float8
                source_type = pg_catalog.int2
                target_type = pg_catalog.float8
        int2 as numeric: cast
            . properties
                context = IMPLICIT
                method = FUNCTION
            . references
                cast_function = pg_catalog.numeric
                source_type = pg_catalog.int2
                target_type = pg_catalog.numeric
        int4 as int8: cast
            . properties
                context = IMPLICIT
                method = FUNCTION
            . references
                cast_function = pg_catalog.int8
                source_type = pg_catalog.int4
                target_type = pg_catalog.int8
        int4 as int2: cast
            . properties
                context = ASSIGNMENT
                method = FUNCTION
            . references
                cast_function = pg_catalog.int2
                source_type = pg_catalog.int4
                target_type = pg_catalog.int2
        int4 as float4: cast
            . properties
                context = IMPLICIT
                method = FUNCTION
            . references
                cast_function = pg_catalog.float4
                source_type = pg_catalog.int4
                target_type = pg_catalog.float4
        int4 as float8: cast
            . properties
                context = IMPLICIT
                method = FUNCTION
            . references
                cast_function = pg_catalog.float8
                source_type = pg_catalog.int4
                target_type = pg_catalog.float8
        int4 as numeric: cast
            . properties
                context = IMPLICIT
                method = FUNCTION
            . references
                cast_function = pg_catalog.numeric
                source_type = pg_catalog.int4
                target_type = pg_catalog.numeric
        float4 as int8: cast
            . properties
                context = ASSIGNMENT
                method = FUNCTION
            . references
                cast_function = pg_catalog.int8
                source_type = pg_catalog.float4
                target_type = pg_catalog.int8
        float4 as int2: cast
            . properties
                context = ASSIGNMENT
                method = FUNCTION
            . references
                cast_function = pg_catalog.int2
                source_type = pg_catalog.float4
                target_type = pg_catalog.int2
        float4 as int4: cast
            . properties
                context = ASSIGNMENT
                method = FUNCTION
            . references
                cast_function = pg_catalog.int4
                source_type = pg_catalog.float4
                target_type = pg_catalog.int4
        float4 as float8: cast
            . properties
                context = IMPLICIT
                method = FUNCTION
            . references
                cast_function = pg_catalog.float8
                source_type = pg_catalog.float4
                target_type = pg_catalog.float8
        float4 as numeric: cast
            . properties
                context = ASSIGNMENT
                method = FUNCTION
            . references
                cast_function = pg_catalog.numeric
                source_type = pg_catalog.float4
                target_type = pg_catalog.numeric
        float8 as int8: cast
            . properties
                context = ASSIGNMENT
                method = FUNCTION
            . references
                cast_function = pg_catalog.int8
                source_type = pg_catalog.float8
                target_type = pg_catalog.int8
        float8 as int2: cast
            . properties
                context = ASSIGNMENT
                method = FUNCTION
            . references
                cast_function = pg_catalog.int2
                source_type = pg_catalog.float8
                target_type = pg_catalog.int2
        float8 as int4: cast
            . properties
                context = ASSIGNMENT
                method = FUNCTION
            . references
                cast_function = pg_catalog.int4
                source_type = pg_catalog.float8
                target_type = pg_catalog.int4
        float8 as float4: cast
            . properties
                context = ASSIGNMENT
                method = FUNCTION
            . references
                cast_function = pg_catalog.float4
                source_type = pg_catalog.float8
                target_type = pg_catalog.float4
        float8 as numeric: cast
            . properties
                context = ASSIGNMENT
                method = FUNCTION
            . references
                cast_function = pg_catalog.numeric
                source_type = pg_catalog.float8
                target_type = pg_catalog.numeric
        numeric as int8: cast
            . properties
                context = ASSIGNMENT
                method = FUNCTION
            . references
                cast_function = pg_catalog.int8
                source_type = pg_catalog.numeric
                target_type = pg_catalog.int8
        numeric as int2: cast
            . properties
                context = ASSIGNMENT
                method = FUNCTION
            . references
                cast_function = pg_catalog.int2
                source_type = pg_catalog.numeric
                target_type = pg_catalog.int2
        numeric as int4: cast
            . properties
                context = ASSIGNMENT
                method = FUNCTION
            . references
                cast_function = pg_catalog.int4
                source_type = pg_catalog.numeric
                target_type = pg_catalog.int4
        numeric as float4: cast
            . properties
                context = IMPLICIT
                method = FUNCTION
            . references
                cast_function = pg_catalog.float4
                source_type = pg_catalog.numeric
                target_type = pg_catalog.float4
        numeric as float8: cast
            . properties
                context = IMPLICIT
                method = FUNCTION
            . references
                cast_function = pg_catalog.float8
                source_type = pg_catalog.numeric
                target_type = pg_catalog.float8
        money as numeric: cast
            . properties
                context = ASSIGNMENT
                method = FUNCTION
            . references
                cast_function = pg_catalog.numeric
                source_type = pg_catalog.money
                target_type = pg_catalog.numeric
        numeric as money: cast
            . properties
                context = ASSIGNMENT
                method = FUNCTION
            . references
                cast_function = pg_catalog.money
                source_type = pg_catalog.numeric
                target_type = pg_catalog.money
        int4 as money: cast
            . properties
                context = ASSIGNMENT
                method = FUNCTION
            . references
                cast_function = pg_catalog.money
                source_type = pg_catalog.int4
                target_type = pg_catalog.money
        int8 as money: cast
            . properties
                context = ASSIGNMENT
                method = FUNCTION
            . references
                cast_function = pg_catalog.money
                source_type = pg_catalog.int8
                target_type = pg_catalog.money
        int4 as bool: cast
            . properties
                context = EXPLICIT
                method = FUNCTION
            . references
                cast_function = pg_catalog.bool
                source_type = pg_catalog.int4
                target_type = pg_catalog.bool
        bool as int4: cast
            . properties
                context = EXPLICIT
                method = FUNCTION
            . references
                cast_function = pg_catalog.int4
                source_type = pg_catalog.bool
                target_type = pg_catalog.int4
        int8 as oid: cast
            . properties
                context = IMPLICIT
                method = FUNCTION
            . references
                cast_function = pg_catalog.oid
                source_type = pg_catalog.int8
                target_type = pg_catalog.oid
        int2 as oid: cast
            . properties
                context = IMPLICIT
                method = FUNCTION
            . references
                cast_function = pg_catalog.int4
                source_type = pg_catalog.int2
                target_type = pg_catalog.oid
        int4 as oid: cast
            . properties
                context = IMPLICIT
                method = BINARY
            . references
                source_type = pg_catalog.int4
                target_type = pg_catalog.oid
        oid as int8: cast
            . properties
                context = ASSIGNMENT
                method = FUNCTION
            . references
                cast_function = pg_catalog.int8
                source_type = pg_catalog.oid
                target_type = pg_catalog.int8
        oid as int4: cast
            . properties
                context = ASSIGNMENT
                method = BINARY
            . references
                source_type = pg_catalog.oid
                target_type = pg_catalog.int4
        oid as regproc: cast
            . properties
                context = IMPLICIT
                method = BINARY
            . references
                source_type = pg_catalog.oid
                target_type = pg_catalog.regproc
        regproc as oid: cast
            . properties
                context = IMPLICIT
                method = BINARY
            . references
                source_type = pg_catalog.regproc
                target_type = pg_catalog.oid
        int8 as regproc: cast
            . properties
                context = IMPLICIT
                method = FUNCTION
            . references
                cast_function = pg_catalog.oid
                source_type = pg_catalog.int8
                target_type = pg_catalog.regproc
        int2 as regproc: cast
            . properties
                context = IMPLICIT
                method = FUNCTION
            . references
                cast_function = pg_catalog.int4
                source_type = pg_catalog.int2
                target_type = pg_catalog.regproc
        int4 as regproc: cast
            . properties
                context = IMPLICIT
                method = BINARY
            . references
                source_type = pg_catalog.int4
                target_type = pg_catalog.regproc
        regproc as int8: cast
            . properties
                context = ASSIGNMENT
                method = FUNCTION
            . references
                cast_function = pg_catalog.int8
                source_type = pg_catalog.regproc
                target_type = pg_catalog.int8
        regproc as int4: cast
            . properties
                context = ASSIGNMENT
                method = BINARY
            . references
                source_type = pg_catalog.regproc
                target_type = pg_catalog.int4
        regproc as regprocedure: cast
            . properties
                context = IMPLICIT
                method = BINARY
            . references
                source_type = pg_catalog.regproc
                target_type = pg_catalog.regprocedure
        regprocedure as regproc: cast
            . properties
                context = IMPLICIT
                method = BINARY
            . references
                source_type = pg_catalog.regprocedure
                target_type = pg_catalog.regproc
        oid as regprocedure: cast
            . properties
                context = IMPLICIT
                method = BINARY
            . references
                source_type = pg_catalog.oid
                target_type = pg_catalog.regprocedure
        regprocedure as oid: cast
            . properties
                context = IMPLICIT
                method = BINARY
            . references
                source_type = pg_catalog.regprocedure
                target_type = pg_catalog.oid
        int8 as regprocedure: cast
            . properties
                context = IMPLICIT
                method = FUNCTION
            . references
                cast_function = pg_catalog.oid
                source_type = pg_catalog.int8
                target_type = pg_catalog.regprocedure
        int2 as regprocedure: cast
            . properties
                context = IMPLICIT
                method = FUNCTION
            . references
                cast_function = pg_catalog.int4
                source_type = pg_catalog.int2
                target_type = pg_catalog.regprocedure
        int4 as regprocedure: cast
            . properties
                context = IMPLICIT
                method = BINARY
            . references
                source_type = pg_catalog.int4
                target_type = pg_catalog.regprocedure
        regprocedure as int8: cast
            . properties
                context = ASSIGNMENT
                method = FUNCTION
            . references
                cast_function = pg_catalog.int8
                source_type = pg_catalog.regprocedure
                target_type = pg_catalog.int8
        regprocedure as int4: cast
            . properties
                context = ASSIGNMENT
                method = BINARY
            . references
                source_type = pg_catalog.regprocedure
                target_type = pg_catalog.int4
        oid as regoper: cast
            . properties
                context = IMPLICIT
                method = BINARY
            . references
                source_type = pg_catalog.oid
                target_type = pg_catalog.regoper
        regoper as oid: cast
            . properties
                context = IMPLICIT
                method = BINARY
            . references
                source_type = pg_catalog.regoper
                target_type = pg_catalog.oid
        int8 as regoper: cast
            . properties
                context = IMPLICIT
                method = FUNCTION
            . references
                cast_function = pg_catalog.oid
                source_type = pg_catalog.int8
                target_type = pg_catalog.regoper
        int2 as regoper: cast
            . properties
                context = IMPLICIT
                method = FUNCTION
            . references
                cast_function = pg_catalog.int4
                source_type = pg_catalog.int2
                target_type = pg_catalog.regoper
        int4 as regoper: cast
            . properties
                context = IMPLICIT
                method = BINARY
            . references
                source_type = pg_catalog.int4
                target_type = pg_catalog.regoper
        regoper as int8: cast
            . properties
                context = ASSIGNMENT
                method = FUNCTION
            . references
                cast_function = pg_catalog.int8
                source_type = pg_catalog.regoper
                target_type = pg_catalog.int8
        regoper as int4: cast
            . properties
                context = ASSIGNMENT
                method = BINARY
            . references
                source_type = pg_catalog.regoper
                target_type = pg_catalog.int4
        regoper as regoperator: cast
            . properties
                context = IMPLICIT
                method = BINARY
            . references
                source_type = pg_catalog.regoper
                target_type = pg_catalog.regoperator
        regoperator as regoper: cast
            . properties
                context = IMPLICIT
                method = BINARY
            . references
                source_type = pg_catalog.regoperator
                target_type = pg_catalog.regoper
        oid as regoperator: cast
            . properties
                context = IMPLICIT
                method = BINARY
            . references
                source_type = pg_catalog.oid
                target_type = pg_catalog.regoperator
        regoperator as oid: cast
            . properties
                context = IMPLICIT
                method = BINARY
            . references
                source_type = pg_catalog.regoperator
                target_type = pg_catalog.oid
        int8 as regoperator: cast
            . properties
                context = IMPLICIT
                method = FUNCTION
            . references
                cast_function = pg_catalog.oid
                source_type = pg_catalog.int8
                target_type = pg_catalog.regoperator
        int2 as regoperator: cast
            . properties
                context = IMPLICIT
                method = FUNCTION
            . references
                cast_function = pg_catalog.int4
                source_type = pg_catalog.int2
                target_type = pg_catalog.regoperator
        int4 as regoperator: cast
            . properties
                context = IMPLICIT
                method = BINARY
            . references
                source_type = pg_catalog.int4
                target_type = pg_catalog.regoperator
        regoperator as int8: cast
            . properties
                context = ASSIGNMENT
                method = FUNCTION
            . references
                cast_function = pg_catalog.int8
                source_type = pg_catalog.regoperator
                target_type = pg_catalog.int8
        regoperator as int4: cast
            . properties
                context = ASSIGNMENT
                method = BINARY
            . references
                source_type = pg_catalog.regoperator
                target_type = pg_catalog.int4
        oid as regclass: cast
            . properties
                context = IMPLICIT
                method = BINARY
            . references
                source_type = pg_catalog.oid
                target_type = pg_catalog.regclass
        regclass as oid: cast
            . properties
                context = IMPLICIT
                method = BINARY
            . references
                source_type = pg_catalog.regclass
                target_type = pg_catalog.oid
        int8 as regclass: cast
            . properties
                context = IMPLICIT
                method = FUNCTION
            . references
                cast_function = pg_catalog.oid
                source_type = pg_catalog.int8
                target_type = pg_catalog.regclass
        int2 as regclass: cast
            . properties
                context = IMPLICIT
                method = FUNCTION
            . references
                cast_function = pg_catalog.int4
                source_type = pg_catalog.int2
                target_type = pg_catalog.regclass
        int4 as regclass: cast
            . properties
                context = IMPLICIT
                method = BINARY
            . references
                source_type = pg_catalog.int4
                target_type = pg_catalog.regclass
        regclass as int8: cast
            . properties
                context = ASSIGNMENT
                method = FUNCTION
            . references
                cast_function = pg_catalog.int8
                source_type = pg_catalog.regclass
                target_type = pg_catalog.int8
        regclass as int4: cast
            . properties
                context = ASSIGNMENT
                method = BINARY
            . references
                source_type = pg_catalog.regclass
                target_type = pg_catalog.int4
        oid as regtype: cast
            . properties
                context = IMPLICIT
                method = BINARY
            . references
                source_type = pg_catalog.oid
                target_type = pg_catalog.regtype
        regtype as oid: cast
            . properties
                context = IMPLICIT
                method = BINARY
            . references
                source_type = pg_catalog.regtype
                target_type = pg_catalog.oid
        int8 as regtype: cast
            . properties
                context = IMPLICIT
                method = FUNCTION
            . references
                cast_function = pg_catalog.oid
                source_type = pg_catalog.int8
                target_type = pg_catalog.regtype
        int2 as regtype: cast
            . properties
                context = IMPLICIT
                method = FUNCTION
            . references
                cast_function = pg_catalog.int4
                source_type = pg_catalog.int2
                target_type = pg_catalog.regtype
        int4 as regtype: cast
            . properties
                context = IMPLICIT
                method = BINARY
            . references
                source_type = pg_catalog.int4
                target_type = pg_catalog.regtype
        regtype as int8: cast
            . properties
                context = ASSIGNMENT
                method = FUNCTION
            . references
                cast_function = pg_catalog.int8
                source_type = pg_catalog.regtype
                target_type = pg_catalog.int8
        regtype as int4: cast
            . properties
                context = ASSIGNMENT
                method = BINARY
            . references
                source_type = pg_catalog.regtype
                target_type = pg_catalog.int4
        oid as regconfig: cast
            . properties
                context = IMPLICIT
                method = BINARY
            . references
                source_type = pg_catalog.oid
                target_type = pg_catalog.regconfig
        regconfig as oid: cast
            . properties
                context = IMPLICIT
                method = BINARY
            . references
                source_type = pg_catalog.regconfig
                target_type = pg_catalog.oid
        int8 as regconfig: cast
            . properties
                context = IMPLICIT
                method = FUNCTION
            . references
                cast_function = pg_catalog.oid
                source_type = pg_catalog.int8
                target_type = pg_catalog.regconfig
        int2 as regconfig: cast
            . properties
                context = IMPLICIT
                method = FUNCTION
            . references
                cast_function = pg_catalog.int4
                source_type = pg_catalog.int2
                target_type = pg_catalog.regconfig
        int4 as regconfig: cast
            . properties
                context = IMPLICIT
                method = BINARY
            . references
                source_type = pg_catalog.int4
                target_type = pg_catalog.regconfig
        regconfig as int8: cast
            . properties
                context = ASSIGNMENT
                method = FUNCTION
            . references
                cast_function = pg_catalog.int8
                source_type = pg_catalog.regconfig
                target_type = pg_catalog.int8
        regconfig as int4: cast
            . properties
                context = ASSIGNMENT
                method = BINARY
            . references
                source_type = pg_catalog.regconfig
                target_type = pg_catalog.int4
        oid as regdictionary: cast
            . properties
                context = IMPLICIT
                method = BINARY
            . references
                source_type = pg_catalog.oid
                target_type = pg_catalog.regdictionary
        regdictionary as oid: cast
            . properties
                context = IMPLICIT
                method = BINARY
            . references
                source_type = pg_catalog.regdictionary
                target_type = pg_catalog.oid
        int8 as regdictionary: cast
            . properties
                context = IMPLICIT
                method = FUNCTION
            . references
                cast_function = pg_catalog.oid
                source_type = pg_catalog.int8
                target_type = pg_catalog.regdictionary
        int2 as regdictionary: cast
            . properties
                context = IMPLICIT
                method = FUNCTION
            . references
                cast_function = pg_catalog.int4
                source_type = pg_catalog.int2
                target_type = pg_catalog.regdictionary
        int4 as regdictionary: cast
            . properties
                context = IMPLICIT
                method = BINARY
            . references
                source_type = pg_catalog.int4
                target_type = pg_catalog.regdictionary
        regdictionary as int8: cast
            . properties
                context = ASSIGNMENT
                method = FUNCTION
            . references
                cast_function = pg_catalog.int8
                source_type = pg_catalog.regdictionary
                target_type = pg_catalog.int8
        regdictionary as int4: cast
            . properties
                context = ASSIGNMENT
                method = BINARY
            . references
                source_type = pg_catalog.regdictionary
                target_type = pg_catalog.int4
        text as regclass: cast
            . properties
                context = IMPLICIT
                method = FUNCTION
            . references
                cast_function = pg_catalog.regclass
                source_type = pg_catalog.text
                target_type = pg_catalog.regclass
        varchar as regclass: cast
            . properties
                context = IMPLICIT
                method = FUNCTION
            . references
                cast_function = pg_catalog.regclass
                source_type = pg_catalog.varchar
                target_type = pg_catalog.regclass
        oid as regrole: cast
            . properties
                context = IMPLICIT
                method = BINARY
            . references
                source_type = pg_catalog.oid
                target_type = pg_catalog.regrole
        regrole as oid: cast
            . properties
                context = IMPLICIT
                method = BINARY
            . references
                source_type = pg_catalog.regrole
                target_type = pg_catalog.oid
        int8 as regrole: cast
            . properties
                context = IMPLICIT
                method = FUNCTION
            . references
                cast_function = pg_catalog.oid
                source_type = pg_catalog.int8
                target_type = pg_catalog.regrole
        int2 as regrole: cast
            . properties
                context = IMPLICIT
                method = FUNCTION
            . references
                cast_function = pg_catalog.int4
                source_type = pg_catalog.int2
                target_type = pg_catalog.regrole
        int4 as regrole: cast
            . properties
                context = IMPLICIT
                method = BINARY
            . references
                source_type = pg_catalog.int4
                target_type = pg_catalog.regrole
        regrole as int8: cast
            . properties
                context = ASSIGNMENT
                method = FUNCTION
            . references
                cast_function = pg_catalog.int8
                source_type = pg_catalog.regrole
                target_type = pg_catalog.int8
        regrole as int4: cast
            . properties
                context = ASSIGNMENT
                method = BINARY
            . references
                source_type = pg_catalog.regrole
                target_type = pg_catalog.int4
        oid as regnamespace: cast
            . properties
                context = IMPLICIT
                method = BINARY
            . references
                source_type = pg_catalog.oid
                target_type = pg_catalog.regnamespace
        regnamespace as oid: cast
            . properties
                context = IMPLICIT
                method = BINARY
            . references
                source_type = pg_catalog.regnamespace
                target_type = pg_catalog.oid
        int8 as regnamespace: cast
            . properties
                context = IMPLICIT
                method = FUNCTION
            . references
                cast_function = pg_catalog.oid
                source_type = pg_catalog.int8
                target_type = pg_catalog.regnamespace
        int2 as regnamespace: cast
            . properties
                context = IMPLICIT
                method = FUNCTION
            . references
                cast_function = pg_catalog.int4
                source_type = pg_catalog.int2
                target_type = pg_catalog.regnamespace
        int4 as regnamespace: cast
            . properties
                context = IMPLICIT
                method = BINARY
            . references
                source_type = pg_catalog.int4
                target_type = pg_catalog.regnamespace
        regnamespace as int8: cast
            . properties
                context = ASSIGNMENT
                method = FUNCTION
            . references
                cast_function = pg_catalog.int8
                source_type = pg_catalog.regnamespace
                target_type = pg_catalog.int8
        regnamespace as int4: cast
            . properties
                context = ASSIGNMENT
                method = BINARY
            . references
                source_type = pg_catalog.regnamespace
                target_type = pg_catalog.int4
        text as bpchar: cast
            . properties
                context = IMPLICIT
                method = BINARY
            . references
                source_type = pg_catalog.text
                target_type = pg_catalog.bpchar
        text as varchar: cast
            . properties
                context = IMPLICIT
                method = BINARY
            . references
                source_type = pg_catalog.text
                target_type = pg_catalog.varchar
        bpchar as text: cast
            . properties
                context = IMPLICIT
                method = FUNCTION
            . references
                cast_function = pg_catalog.text
                source_type = pg_catalog.bpchar
                target_type = pg_catalog.text
        bpchar as varchar: cast
            . properties
                context = IMPLICIT
                method = FUNCTION
            . references
                cast_function = pg_catalog.text
                source_type = pg_catalog.bpchar
                target_type = pg_catalog.varchar
        varchar as text: cast
            . properties
                context = IMPLICIT
                method = BINARY
            . references
                source_type = pg_catalog.varchar
                target_type = pg_catalog.text
        varchar as bpchar: cast
            . properties
                context = IMPLICIT
                method = BINARY
            . references
                source_type = pg_catalog.varchar
                target_type = pg_catalog.bpchar
        char as text: cast
            . properties
                context = IMPLICIT
                method = FUNCTION
            . references
                cast_function = pg_catalog.text
                source_type = pg_catalog.char
                target_type = pg_catalog.text
        char as bpchar: cast
            . properties
                context = ASSIGNMENT
                method = FUNCTION
            . references
                cast_function = pg_catalog.bpchar
                source_type = pg_catalog.char
                target_type = pg_catalog.bpchar
        char as varchar: cast
            . properties
                context = ASSIGNMENT
                method = FUNCTION
            . references
                cast_function = pg_catalog.text
                source_type = pg_catalog.char
                target_type = pg_catalog.varchar
        name as text: cast
            . properties
                context = IMPLICIT
                method = FUNCTION
            . references
                cast_function = pg_catalog.text
                source_type = pg_catalog.name
                target_type = pg_catalog.text
        name as bpchar: cast
            . properties
                context = ASSIGNMENT
                method = FUNCTION
            . references
                cast_function = pg_catalog.bpchar
                source_type = pg_catalog.name
                target_type = pg_catalog.bpchar
        name as varchar: cast
            . properties
                context = ASSIGNMENT
                method = FUNCTION
            . references
                cast_function = pg_catalog.varchar
                source_type = pg_catalog.name
                target_type = pg_catalog.varchar
        text as char: cast
            . properties
                context = ASSIGNMENT
                method = FUNCTION
            . references
                cast_function = pg_catalog.char
                source_type = pg_catalog.text
                target_type = pg_catalog.char
        bpchar as char: cast
            . properties
                context = ASSIGNMENT
                method = FUNCTION
            . references
                cast_function = pg_catalog.char
                source_type = pg_catalog.bpchar
                target_type = pg_catalog.char
        varchar as char: cast
            . properties
                context = ASSIGNMENT
                method = FUNCTION
            . references
                cast_function = pg_catalog.char
                source_type = pg_catalog.varchar
                target_type = pg_catalog.char
        text as name: cast
            . properties
                context = IMPLICIT
                method = FUNCTION
            . references
                cast_function = pg_catalog.name
                source_type = pg_catalog.text
                target_type = pg_catalog.name
        bpchar as name: cast
            . properties
                context = IMPLICIT
                method = FUNCTION
            . references
                cast_function = pg_catalog.name
                source_type = pg_catalog.bpchar
                target_type = pg_catalog.name
        varchar as name: cast
            . properties
                context = IMPLICIT
                method = FUNCTION
            . references
                cast_function = pg_catalog.name
                source_type = pg_catalog.varchar
                target_type = pg_catalog.name
        char as int4: cast
            . properties
                context = EXPLICIT
                method = FUNCTION
            . references
                cast_function = pg_catalog.int4
                source_type = pg_catalog.char
                target_type = pg_catalog.int4
        int4 as char: cast
            . properties
                context = EXPLICIT
                method = FUNCTION
            . references
                cast_function = pg_catalog.char
                source_type = pg_catalog.int4
                target_type = pg_catalog.char
        pg_node_tree as text: cast
            . properties
                context = IMPLICIT
                method = BINARY
            . references
                source_type = pg_catalog.pg_node_tree
                target_type = pg_catalog.text
        pg_ndistinct as bytea: cast
            . properties
                context = IMPLICIT
                method = BINARY
            . references
                source_type = pg_catalog.pg_ndistinct
                target_type = pg_catalog.bytea
        pg_ndistinct as text: cast
            . properties
                context = IMPLICIT
                method = IO
            . references
                source_type = pg_catalog.pg_ndistinct
                target_type = pg_catalog.text
        pg_dependencies as bytea: cast
            . properties
                context = IMPLICIT
                method = BINARY
            . references
                source_type = pg_catalog.pg_dependencies
                target_type = pg_catalog.bytea
        pg_dependencies as text: cast
            . properties
                context = IMPLICIT
                method = IO
            . references
                source_type = pg_catalog.pg_dependencies
                target_type = pg_catalog.text
        pg_mcv_list as bytea: cast
            . properties
                context = IMPLICIT
                method = BINARY
            . references
                source_type = pg_catalog.pg_mcv_list
                target_type = pg_catalog.bytea
        pg_mcv_list as text: cast
            . properties
                context = IMPLICIT
                method = IO
            . references
                source_type = pg_catalog.pg_mcv_list
                target_type = pg_catalog.text
        date as timestamp: cast
            . properties
                context = IMPLICIT
                method = FUNCTION
            . references
                cast_function = pg_catalog.timestamp
                source_type = pg_catalog.date
                target_type = pg_catalog.timestamp
        date as timestamptz: cast
            . properties
                context = IMPLICIT
                method = FUNCTION
            . references
                cast_function = pg_catalog.timestamptz
                source_type = pg_catalog.date
                target_type = pg_catalog.timestamptz
        time as interval: cast
            . properties
                context = IMPLICIT
                method = FUNCTION
            . references
                cast_function = pg_catalog.interval
                source_type = pg_catalog.time
                target_type = pg_catalog.interval
        time as timetz: cast
            . properties
                context = IMPLICIT
                method = FUNCTION
            . references
                cast_function = pg_catalog.timetz
                source_type = pg_catalog.time
                target_type = pg_catalog.timetz
        timestamp as date: cast
            . properties
                context = ASSIGNMENT
                method = FUNCTION
            . references
                cast_function = pg_catalog.date
                source_type = pg_catalog.timestamp
                target_type = pg_catalog.date
        timestamp as time: cast
            . properties
                context = ASSIGNMENT
                method = FUNCTION
            . references
                cast_function = pg_catalog.time
                source_type = pg_catalog.timestamp
                target_type = pg_catalog.time
        timestamp as timestamptz: cast
            . properties
                context = IMPLICIT
                method = FUNCTION
            . references
                cast_function = pg_catalog.timestamptz
                source_type = pg_catalog.timestamp
                target_type = pg_catalog.timestamptz
        timestamptz as date: cast
            . properties
                context = ASSIGNMENT
                method = FUNCTION
            . references
                cast_function = pg_catalog.date
                source_type = pg_catalog.timestamptz
                target_type = pg_catalog.date
        timestamptz as time: cast
            . properties
                context = ASSIGNMENT
                method = FUNCTION
            . references
                cast_function = pg_catalog.time
                source_type = pg_catalog.timestamptz
                target_type = pg_catalog.time
        timestamptz as timestamp: cast
            . properties
                context = ASSIGNMENT
                method = FUNCTION
            . references
                cast_function = pg_catalog.timestamp
                source_type = pg_catalog.timestamptz
                target_type = pg_catalog.timestamp
        timestamptz as timetz: cast
            . properties
                context = ASSIGNMENT
                method = FUNCTION
            . references
                cast_function = pg_catalog.timetz
                source_type = pg_catalog.timestamptz
                target_type = pg_catalog.timetz
        interval as time: cast
            . properties
                context = ASSIGNMENT
                method = FUNCTION
            . references
                cast_function = pg_catalog.time
                source_type = pg_catalog.interval
                target_type = pg_catalog.time
        timetz as time: cast
            . properties
                context = ASSIGNMENT
                method = FUNCTION
            . references
                cast_function = pg_catalog.time
                source_type = pg_catalog.timetz
                target_type = pg_catalog.time
        point as box: cast
            . properties
                context = ASSIGNMENT
                method = FUNCTION
            . references
                cast_function = pg_catalog.box
                source_type = pg_catalog.point
                target_type = pg_catalog.box
        lseg as point: cast
            . properties
                context = EXPLICIT
                method = FUNCTION
            . references
                cast_function = pg_catalog.point
                source_type = pg_catalog.lseg
                target_type = pg_catalog.point
        path as point: cast
            . properties
                context = EXPLICIT
                method = FUNCTION
            . references
                cast_function = pg_catalog.point
                source_type = pg_catalog.path
                target_type = pg_catalog.point
        path as polygon: cast
            . properties
                context = ASSIGNMENT
                method = FUNCTION
            . references
                cast_function = pg_catalog.polygon
                source_type = pg_catalog.path
                target_type = pg_catalog.polygon
        box as point: cast
            . properties
                context = EXPLICIT
                method = FUNCTION
            . references
                cast_function = pg_catalog.point
                source_type = pg_catalog.box
                target_type = pg_catalog.point
        box as lseg: cast
            . properties
                context = EXPLICIT
                method = FUNCTION
            . references
                cast_function = pg_catalog.lseg
                source_type = pg_catalog.box
                target_type = pg_catalog.lseg
        box as polygon: cast
            . properties
                context = ASSIGNMENT
                method = FUNCTION
            . references
                cast_function = pg_catalog.polygon
                source_type = pg_catalog.box
                target_type = pg_catalog.polygon
        box as circle: cast
            . properties
                context = EXPLICIT
                method = FUNCTION
            . references
                cast_function = pg_catalog.circle
                source_type = pg_catalog.box
                target_type = pg_catalog.circle
        polygon as point: cast
            . properties
                context = EXPLICIT
                method = FUNCTION
            . references
                cast_function = pg_catalog.point
                source_type = pg_catalog.polygon
                target_type = pg_catalog.point
        polygon as path: cast
            . properties
                context = ASSIGNMENT
                method = FUNCTION
            . references
                cast_function = pg_catalog.path
                source_type = pg_catalog.polygon
                target_type = pg_catalog.path
        polygon as box: cast
            . properties
                context = EXPLICIT
                method = FUNCTION
            . references
                cast_function = pg_catalog.box
                source_type = pg_catalog.polygon
                target_type = pg_catalog.box
        polygon as circle: cast
            . properties
                context = EXPLICIT
                method = FUNCTION
            . references
                cast_function = pg_catalog.circle
                source_type = pg_catalog.polygon
                target_type = pg_catalog.circle
        circle as point: cast
            . properties
                context = EXPLICIT
                method = FUNCTION
            . references
                cast_function = pg_catalog.point
                source_type = pg_catalog.circle
                target_type = pg_catalog.point
        circle as box: cast
            . properties
                context = EXPLICIT
                method = FUNCTION
            . references
                cast_function = pg_catalog.box
                source_type = pg_catalog.circle
                target_type = pg_catalog.box
        circle as polygon: cast
            . properties
                context = EXPLICIT
                method = FUNCTION
            . references
                cast_function = pg_catalog.polygon
                source_type = pg_catalog.circle
                target_type = pg_catalog.polygon
        macaddr as macaddr8: cast
            . properties
                context = IMPLICIT
                method = FUNCTION
            . references
                cast_function = pg_catalog.macaddr8
                source_type = pg_catalog.macaddr
                target_type = pg_catalog.macaddr8
        macaddr8 as macaddr: cast
            . properties
                context = IMPLICIT
                method = FUNCTION
            . references
                cast_function = pg_catalog.macaddr
                source_type = pg_catalog.macaddr8
                target_type = pg_catalog.macaddr
        cidr as inet: cast
            . properties
                context = IMPLICIT
                method = BINARY
            . references
                source_type = pg_catalog.cidr
                target_type = pg_catalog.inet
        inet as cidr: cast
            . properties
                context = ASSIGNMENT
                method = FUNCTION
            . references
                cast_function = pg_catalog.cidr
                source_type = pg_catalog.inet
                target_type = pg_catalog.cidr
        bit as varbit: cast
            . properties
                context = IMPLICIT
                method = BINARY
            . references
                source_type = pg_catalog.bit
                target_type = pg_catalog.varbit
        varbit as bit: cast
            . properties
                context = IMPLICIT
                method = BINARY
            . references
                source_type = pg_catalog.varbit
                target_type = pg_catalog.bit
        int8 as bit: cast
            . properties
                context = EXPLICIT
                method = FUNCTION
            . references
                cast_function = pg_catalog.bit
                source_type = pg_catalog.int8
                target_type = pg_catalog.bit
        int4 as bit: cast
            . properties
                context = EXPLICIT
                method = FUNCTION
            . references
                cast_function = pg_catalog.bit
                source_type = pg_catalog.int4
                target_type = pg_catalog.bit
        bit as int8: cast
            . properties
                context = EXPLICIT
                method = FUNCTION
            . references
                cast_function = pg_catalog.int8
                source_type = pg_catalog.bit
                target_type = pg_catalog.int8
        bit as int4: cast
            . properties
                context = EXPLICIT
                method = FUNCTION
            . references
                cast_function = pg_catalog.int4
                source_type = pg_catalog.bit
                target_type = pg_catalog.int4
        cidr as text: cast
            . properties
                context = ASSIGNMENT
                method = FUNCTION
            . references
                cast_function = pg_catalog.text
                source_type = pg_catalog.cidr
                target_type = pg_catalog.text
        inet as text: cast
            . properties
                context = ASSIGNMENT
                method = FUNCTION
            . references
                cast_function = pg_catalog.text
                source_type = pg_catalog.inet
                target_type = pg_catalog.text
        bool as text: cast
            . properties
                context = ASSIGNMENT
                method = FUNCTION
            . references
                cast_function = pg_catalog.text
                source_type = pg_catalog.bool
                target_type = pg_catalog.text
        xml as text: cast
            . properties
                context = ASSIGNMENT
                method = BINARY
            . references
                source_type = pg_catalog.xml
                target_type = pg_catalog.text
        text as xml: cast
            . properties
                context = EXPLICIT
                method = FUNCTION
            . references
                cast_function = pg_catalog.xml
                source_type = pg_catalog.text
                target_type = pg_catalog.xml
        cidr as varchar: cast
            . properties
                context = ASSIGNMENT
                method = FUNCTION
            . references
                cast_function = pg_catalog.text
                source_type = pg_catalog.cidr
                target_type = pg_catalog.varchar
        inet as varchar: cast
            . properties
                context = ASSIGNMENT
                method = FUNCTION
            . references
                cast_function = pg_catalog.text
                source_type = pg_catalog.inet
                target_type = pg_catalog.varchar
        bool as varchar: cast
            . properties
                context = ASSIGNMENT
                method = FUNCTION
            . references
                cast_function = pg_catalog.text
                source_type = pg_catalog.bool
                target_type = pg_catalog.varchar
        xml as varchar: cast
            . properties
                context = ASSIGNMENT
                method = BINARY
            . references
                source_type = pg_catalog.xml
                target_type = pg_catalog.varchar
        varchar as xml: cast
            . properties
                context = EXPLICIT
                method = FUNCTION
            . references
                cast_function = pg_catalog.xml
                source_type = pg_catalog.varchar
                target_type = pg_catalog.xml
        cidr as bpchar: cast
            . properties
                context = ASSIGNMENT
                method = FUNCTION
            . references
                cast_function = pg_catalog.text
                source_type = pg_catalog.cidr
                target_type = pg_catalog.bpchar
        inet as bpchar: cast
            . properties
                context = ASSIGNMENT
                method = FUNCTION
            . references
                cast_function = pg_catalog.text
                source_type = pg_catalog.inet
                target_type = pg_catalog.bpchar
        bool as bpchar: cast
            . properties
                context = ASSIGNMENT
                method = FUNCTION
            . references
                cast_function = pg_catalog.text
                source_type = pg_catalog.bool
                target_type = pg_catalog.bpchar
        xml as bpchar: cast
            . properties
                context = ASSIGNMENT
                method = BINARY
            . references
                source_type = pg_catalog.xml
                target_type = pg_catalog.bpchar
        bpchar as xml: cast
            . properties
                context = EXPLICIT
                method = FUNCTION
            . references
                cast_function = pg_catalog.xml
                source_type = pg_catalog.bpchar
                target_type = pg_catalog.xml
        bpchar as bpchar: cast
            . properties
                context = IMPLICIT
                method = FUNCTION
            . references
                cast_function = pg_catalog.bpchar
                source_type = pg_catalog.bpchar
                target_type = pg_catalog.bpchar
        varchar as varchar: cast
            . properties
                context = IMPLICIT
                method = FUNCTION
            . references
                cast_function = pg_catalog.varchar
                source_type = pg_catalog.varchar
                target_type = pg_catalog.varchar
        time as time: cast
            . properties
                context = IMPLICIT
                method = FUNCTION
            . references
                cast_function = pg_catalog.time
                source_type = pg_catalog.time
                target_type = pg_catalog.time
        timestamp as timestamp: cast
            . properties
                context = IMPLICIT
                method = FUNCTION
            . references
                cast_function = pg_catalog.timestamp
                source_type = pg_catalog.timestamp
                target_type = pg_catalog.timestamp
        timestamptz as timestamptz: cast
            . properties
                context = IMPLICIT
                method = FUNCTION
            . references
                cast_function = pg_catalog.timestamptz
                source_type = pg_catalog.timestamptz
                target_type = pg_catalog.timestamptz
        interval as interval: cast
            . properties
                context = IMPLICIT
                method = FUNCTION
            . references
                cast_function = pg_catalog.interval
                source_type = pg_catalog.interval
                target_type = pg_catalog.interval
        timetz as timetz: cast
            . properties
                context = IMPLICIT
                method = FUNCTION
            . references
                cast_function = pg_catalog.timetz
                source_type = pg_catalog.timetz
                target_type = pg_catalog.timetz
        bit as bit: cast
            . properties
                context = IMPLICIT
                method = FUNCTION
            . references
                cast_function = pg_catalog.bit
                source_type = pg_catalog.bit
                target_type = pg_catalog.bit
        varbit as varbit: cast
            . properties
                context = IMPLICIT
                method = FUNCTION
            . references
                cast_function = pg_catalog.varbit
                source_type = pg_catalog.varbit
                target_type = pg_catalog.varbit
        numeric as numeric: cast
            . properties
                context = IMPLICIT
                method = FUNCTION
            . references
                cast_function = pg_catalog.numeric
                source_type = pg_catalog.numeric
                target_type = pg_catalog.numeric
        json as jsonb: cast
            . properties
                context = ASSIGNMENT
                method = IO
            . references
                source_type = pg_catalog.json
                target_type = pg_catalog.jsonb
        jsonb as json: cast
            . properties
                context = ASSIGNMENT
                method = IO
            . references
                source_type = pg_catalog.jsonb
                target_type = pg_catalog.json
        jsonb as bool: cast
            . properties
                context = EXPLICIT
                method = FUNCTION
            . references
                cast_function = pg_catalog.bool
                source_type = pg_catalog.jsonb
                target_type = pg_catalog.bool
        jsonb as numeric: cast
            . properties
                context = EXPLICIT
                method = FUNCTION
            . references
                cast_function = pg_catalog.numeric
                source_type = pg_catalog.jsonb
                target_type = pg_catalog.numeric
        jsonb as int2: cast
            . properties
                context = EXPLICIT
                method = FUNCTION
            . references
                cast_function = pg_catalog.int2
                source_type = pg_catalog.jsonb
                target_type = pg_catalog.int2
        jsonb as int4: cast
            . properties
                context = EXPLICIT
                method = FUNCTION
            . references
                cast_function = pg_catalog.int4
                source_type = pg_catalog.jsonb
                target_type = pg_catalog.int4
        jsonb as int8: cast
            . properties
                context = EXPLICIT
                method = FUNCTION
            . references
                cast_function = pg_catalog.int8
                source_type = pg_catalog.jsonb
                target_type = pg_catalog.int8
        jsonb as float4: cast
            . properties
                context = EXPLICIT
                method = FUNCTION
            . references
                cast_function = pg_catalog.float4
                source_type = pg_catalog.jsonb
                target_type = pg_catalog.float4
        jsonb as float8: cast
            . properties
                context = EXPLICIT
                method = FUNCTION
            . references
                cast_function = pg_catalog.float8
                source_type = pg_catalog.jsonb
                target_type = pg_catalog.float8
